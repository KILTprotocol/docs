(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9092],{5380:e=>{function s(e){var s=new Error("Cannot find module '"+e+"'");throw s.code="MODULE_NOT_FOUND",s}s.keys=()=>[],s.resolve=s,s.id=5380,e.exports=s},9145:(e,s,t)=>{"use strict";t.r(s),t.d(s,{assets:()=>m,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>p,toc:()=>u});var n=t(5893),a=t(1151),i=t(1909);const o="/* eslint-disable @typescript-eslint/no-unused-vars */\n\nexport function main() {\n  const MAX_ACCEPTED_AGE = 60_000 // ms -> 1 minute\n  const MIN_ACCEPTED_AGE = -1_000 // allow for some imprecision in system time\n  const submissions = new Map<string, number>()\n}\n",r="/* eslint-disable @typescript-eslint/no-unused-vars */\n\nimport { blake2AsHex } from '@polkadot/util-crypto'\n\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nexport function main(\n  submissions: Map<string, number>,\n  decrypted: Kilt.IMessage,\n  MIN_ACCEPTED_AGE: number,\n  MAX_ACCEPTED_AGE: number\n) {\n  // Is messageId fresh and createdAt recent?\n  const messageId =\n    decrypted.messageId || blake2AsHex(JSON.stringify(decrypted))\n  if (\n    submissions.has(messageId) ||\n    decrypted.createdAt < Date.now() - MAX_ACCEPTED_AGE ||\n    decrypted.createdAt > Date.now() - MIN_ACCEPTED_AGE\n  ) {\n    // no -> reject message\n  } else {\n    submissions.set(messageId, decrypted.createdAt)\n    // yes -> accept & process message\n  }\n}\n",c="/* eslint-disable @typescript-eslint/no-unused-vars */\n\nexport function main(\n  submissions: Map<string, number>,\n  MAX_ACCEPTED_AGE: number\n) {\n  setInterval(() => {\n    const outdatedTimestamp = Date.now() - MAX_ACCEPTED_AGE\n    submissions.forEach((timestamp, hash) => {\n      if (timestamp < outdatedTimestamp) submissions.delete(hash)\n    })\n  }, 1000)\n}\n",l={id:"replay_protection",title:"Protect Against Replay Attacks"},d=void 0,p={id:"develop/sdk/cookbook/messaging/replay_protection",title:"Protect Against Replay Attacks",description:"Whenever data travels on a public network, even when encrypted or signed, the communicating parties need to make sure they never accept and process a message more than once to protect against exploits by malicious third parties (so-called replay attacks).",source:"@site/docs/develop/01_sdk/02_cookbook/06_messaging/02_replay_protection.md",sourceDirName:"develop/01_sdk/02_cookbook/06_messaging",slug:"/develop/sdk/cookbook/messaging/replay_protection",permalink:"/docs/develop/sdk/cookbook/messaging/replay_protection",draft:!1,unlisted:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/01_sdk/02_cookbook/06_messaging/02_replay_protection.md",tags:[],version:"current",lastUpdatedAt:1706614634,formattedLastUpdatedAt:"Jan 30, 2024",sidebarPosition:2,frontMatter:{id:"replay_protection",title:"Protect Against Replay Attacks"},sidebar:"sdk",previous:{title:"Generate a Message",permalink:"/docs/develop/sdk/cookbook/messaging/messaging_book"},next:{title:"SignCallback",permalink:"/docs/develop/sdk/cookbook/signCallback"}},m={},u=[];function g(e){const s={a:"a",li:"li",ol:"ol",p:"p",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(s.p,{children:["Whenever data travels on a public network, even when encrypted or signed, the communicating parties need to make sure they never accept and process a message more than once to protect against exploits by malicious third parties (so-called replay attacks).\nWhen requesting and submitting credential presentations, vulnerabilities for replay attacks can be prevented by requesting that the Claimer sign a unique piece of data as part of the presentation, as shown in the ",(0,n.jsx)(s.a,{href:"/docs/develop/sdk/cookbook/claiming/presentation-creation",children:"Verification Cookbook section"}),"."]}),"\n",(0,n.jsx)(s.p,{children:"However, protection against replay attacks can also happen on the message layer.\nTo help prevent these types of attacks, KILT messages are timestamped and expose a unique identifier as part of their encrypted content, which therefore cannot be tampered with.\nIt is good practice to impose limits on an acceptable range for timestamps on incoming messages and to keep a record of the ids of previous submissions, which can be purged after their acceptance range has run out.\nThis way, any resubmission is either rejected because its id is known to the recipient, or because its timestamp is too old.\nBelow you can find example code of how this could be implemented."}),"\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsx)(s.li,{children:"Define acceptance range and set up a record of past submissions:"}),"\n"]}),"\n",(0,n.jsx)(i.Z,{className:"language-ts",children:o}),"\n",(0,n.jsxs)(s.ol,{start:"2",children:["\n",(0,n.jsx)(s.li,{children:"Check record for each incoming message and update if accepted:"}),"\n"]}),"\n",(0,n.jsx)(i.Z,{className:"language-ts",children:r}),"\n",(0,n.jsxs)(s.ol,{start:"3",children:["\n",(0,n.jsx)(s.li,{children:"Purge at regular intervals:"}),"\n"]}),"\n",(0,n.jsx)(i.Z,{className:"language-ts",children:c})]})}function h(e={}){const{wrapper:s}={...(0,a.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(g,{...e})}):g(e)}},1909:(e,s,t)=>{"use strict";t.d(s,{Z:()=>m});t(7294);var n=t(2263),a=t(2175),i=t(4935),o=t(4990),r=t(9966),c=t(4866),l=t(5162),d=t(9286),p=t(5893);const m=e=>{let{children:s,fileName:t,...m}=e;const u=s,{code:g}=(0,a.transform)(u,{plugins:["transform-typescript"],retainLines:!0}),{siteConfig:{customFields:{prettierConfig:h}}}=(0,n.Z)(),f=i.WU(g,{parser:"babel",plugins:[o.Z,r.ZP],...h}).finally((()=>{var e=[{fileName:t?`${t}.ts`:void 0,fileContents:u,fileID:"ts",fileLabel:"Typescript"},{fileName:t?`${t}.js`:void 0,fileContents:f,fileID:"js",fileLabel:"Javascript"}];return(0,p.jsx)(p.Fragment,{children:(0,p.jsx)(c.Z,{groupId:"ts-js-choice",children:e.map((e=>(0,p.jsx)(l.Z,{value:e.fileID,label:e.fileLabel,default:!0,children:(0,p.jsx)(d.Z,{...m,className:"language-"+e.fileID,title:e.fileName,children:e.fileContents})})))})})}))}}}]);