(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7602],{5380:e=>{function t(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=()=>[],t.resolve=t,t.id=5380,e.exports=t},1909:(e,t,n)=>{"use strict";n.d(t,{Z:()=>d});var a=n(7462),o=n(7294),r=n(2263),i=n(3945),s=n(8182),c=n(2175),l=n(5488),p=n(5162),u=n(6823);const d=e=>{let{children:t,fileName:n,...d}=e;const m=t,{code:k}=(0,c.transform)(m,{plugins:["transform-typescript"],retainLines:!0}),{siteConfig:{customFields:{prettierConfig:h}}}=(0,r.Z)(),g=(0,i.format)(k,{parser:s.parsers.babel.parse,...h}),N=n?`${n}.ts`:void 0,f=n?`${n}.js`:void 0;return o.createElement(l.Z,{groupId:"ts-js-choice"},o.createElement(p.Z,{value:"ts",label:"Typescript",default:!0},o.createElement(u.Z,(0,a.Z)({},d,{className:"language-ts",title:N}),m)),o.createElement(p.Z,{value:"js",label:"Javascript"},o.createElement(u.Z,(0,a.Z)({},d,{className:"language-js",title:f}),g)))}},3671:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>k,frontMatter:()=>c,metadata:()=>p,toc:()=>d});var a=n(7462),o=(n(7294),n(3905)),r=n(1909),i=n(5488),s=n(5162);const c={id:"account",title:"Account"},l=void 0,p={unversionedId:"develop/workshop/attester/account",id:"develop/workshop/attester/account",title:"Account",description:"Now that you have setup the project structure in the last step, we'll create our Attester account.",source:"@site/docs/develop/03_workshop/04_attester/01_account.md",sourceDirName:"develop/03_workshop/04_attester",slug:"/develop/workshop/attester/account",permalink:"/docs/develop/workshop/attester/account",draft:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/03_workshop/04_attester/01_account.md",tags:[],version:"current",lastUpdatedAt:1673884454,formattedLastUpdatedAt:"Jan 16, 2023",sidebarPosition:1,frontMatter:{id:"account",title:"Account"},sidebar:"workshop",previous:{title:"\ud83c\udfe2 Attester",permalink:"/docs/develop/workshop/attester/"},next:{title:"DID",permalink:"/docs/develop/workshop/attester/did"}},u={},d=[{value:"Create the Account",id:"create-the-account",level:2},{value:"Execute",id:"execute",level:2}],m={toc:d};function k(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Now that you have ",(0,o.kt)("a",{parentName:"p",href:"./"},"setup the project structure")," in the last step, we'll create our ",(0,o.kt)("span",{className:"label-role attester"},"Attester")," account.\nIn KILT, an account is an object that interacts with the blockchain.\nAn account contains multiple properties.\nOne of them is the ",(0,o.kt)("inlineCode",{parentName:"p"},"address"),": this is the entity's unique and public on-chain identifier, that is used to pay fees and deposits.\nAll we need to create an account is a mnemonic."),(0,o.kt)("admonition",{title:"KILT Account",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"A KILT account is a set of cryptographic elements:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"The address, which is generated from the public key"),(0,o.kt)("li",{parentName:"ul"},"A signing keypair to write transactions on-chain"))),(0,o.kt)("admonition",{title:"mnemonic",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"In cryptography, a mnemonic usually consists of 12 or 24 random series of words.\nFor example, ",(0,o.kt)("inlineCode",{parentName:"p"},"gold upset segment cake universe")," is a mnemonic.\nIt's used to generate signing keypairs.\nWhat's great about a mnemonic is that it's ",(0,o.kt)("strong",{parentName:"p"},"human-readable"),".\nA person can memorize it, and use it later to re-generate their keypairs and address.")),(0,o.kt)("h2",{id:"create-the-account"},"Create the Account"),(0,o.kt)("p",null,"To generate an account, one method from the Polkadot crypto utility, and one method from the KILT SDK is needed:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"mnemonicGenerate()")," - Generates a 12-word mnemonic"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"makeKeypairFromSeed(seed)")," - takes a mnemonic as an input, and outputs a ",(0,o.kt)("inlineCode",{parentName:"li"},"Keypair")," instance.")),(0,o.kt)(r.Z,{fileName:"attester/generateAccount",mdxType:"TsJsBlock"},"import { config as envConfig } from 'dotenv'\n\nimport { mnemonicGenerate, mnemonicToMiniSecret } from '@polkadot/util-crypto'\n\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nexport function generateAccount(mnemonic = mnemonicGenerate()): {\n  account: Kilt.KiltKeyringPair\n  mnemonic: string\n} {\n  const account = Kilt.Utils.Crypto.makeKeypairFromSeed(\n    mnemonicToMiniSecret(mnemonic)\n  )\n\n  return { account, mnemonic }\n}\n\n// Don't execute if this is imported by another file.\nif (require.main === module) {\n  ;(async () => {\n    envConfig()\n\n    try {\n      await Kilt.init()\n\n      const { mnemonic, account } = generateAccount()\n      console.log('save to mnemonic and address to .env to continue!\\n\\n')\n      console.log(`ATTESTER_ACCOUNT_MNEMONIC=\"${mnemonic}\"`)\n      console.log(`ATTESTER_ACCOUNT_ADDRESS=\"${account.address}\"\\n\\n`)\n    } catch (e) {\n      console.log('Error while setting up attester account')\n      throw e\n    }\n  })()\n}\n"),(0,o.kt)("h2",{id:"execute"},"Execute"),(0,o.kt)("p",null,"Now run it to get your ",(0,o.kt)("span",{className:"label-role attester"},"Attester")," ",(0,o.kt)("inlineCode",{parentName:"p"},"<address>")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"<mnenomic>"),"."),(0,o.kt)(i.Z,{groupId:"ts-js-choice",mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"ts",label:"Typescript",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn ts-node ./attester/generateAccount.ts\n"))),(0,o.kt)(s.Z,{value:"js",label:"Javascript",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"node ./attester/generateAccount.js\n")))),(0,o.kt)("p",null,"Your output will provide you with ",(0,o.kt)("inlineCode",{parentName:"p"},"ATTESTER_ACCOUNT_MNEMONIC")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"ATTESTER_ACCOUNT_ADDRESS"),".\nBe sure to save it in your ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," file; it should now look similar to this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-env",metastring:'title=".env"',title:'".env"'},'WSS_ADDRESS=wss://peregrine.kilt.io/parachain-public-ws\n\nATTESTER_ACCOUNT_MNEMONIC="warrior icon use cry..."\nATTESTER_ACCOUNT_ADDRESS="4ohMvUHsyeDhMVZF..."\n')),(0,o.kt)("admonition",{title:"Get PILT coins!",type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"You now have a blockchain account, which will be used to pay fees and deposits.\nIf you haven't already requested PILT, go to the ",(0,o.kt)("a",{parentName:"p",href:"https://faucet.peregrine.kilt.io"},"faucet")," and request tokens for your ",(0,o.kt)("inlineCode",{parentName:"p"},"<address>"),".")))}k.isMDXComponent=!0}}]);