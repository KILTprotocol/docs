(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9277],{25380:function(e){function n(e){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}n.keys=function(){return[]},n.resolve=n,n.id=25380,e.exports=n},46793:function(e,n,t){"use strict";var r=t(67294),i=t(90814);n.Z=e=>{let{children:n,funcName:t="main",funcEnd:s="}",snippets:o,leadingSpaces:a=2,...l}=e;const c=n.split(/\r?\n/);let p="";if(o)p=JSON.parse(o).map((e=>Array.isArray(e)?c.slice(e[0],e[1]).map((e=>e.slice(a))).join("\n"):e)).join("\n");else if(t){let e,n;for(let r=0;r<c.length;r++)if(c[r].includes(t)){if(e=r,c[r].includes(" {"))break}else if(c[r].includes(" {")&&void 0!==e){e=r;break}for(let t=c.length-1;t>0;t--)if(c[t].includes(s)){n=t;break}p=c.slice(e+1,n).map((e=>e.slice(a))).join("\n")}return r.createElement(i.Z,l,p)}},89747:function(e,n,t){"use strict";var r=t(83117),i=t(67294),s=t(52263),o=t(73945),a=t(28182),l=t(12175),c=t(65488),p=t(85162),d=t(46793);n.Z=e=>{let{children:n,fileName:t,...u}=e;const f=n,{code:m}=(0,l.transform)(f,{plugins:["transform-typescript"],retainLines:!0}),{siteConfig:{customFields:{prettierConfig:y}}}=(0,s.Z)(),v=(0,o.format)(m,{parser:a.parsers.babel.parse,...y}),g=t?`${t}.ts`:void 0,h=t?`${t}.js`:void 0;return i.createElement(c.Z,{groupId:"ts-js-choice"},i.createElement(p.Z,{value:"ts",label:"Typescript",default:!0},i.createElement(d.Z,(0,r.Z)({},u,{className:"language-ts",title:g}),f)),i.createElement(p.Z,{value:"js",label:"Javascript"},i.createElement(d.Z,(0,r.Z)({},u,{className:"language-js",title:h}),v)))}},12165:function(e,n,t){"use strict";t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return a},default:function(){return u},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return p}});var r=t(83117),i=(t(67294),t(3905)),s=t(89747);const o={id:"request",title:"Verifier Requests a Credential"},a=void 0,l={unversionedId:"develop/dApp/verifier/request",id:"develop/dApp/verifier/request",title:"Verifier Requests a Credential",description:"The job of the verifier is to request and verify credentials.",source:"@site/docs/develop/07_dApp/04_verifier/02_requestCredential.md",sourceDirName:"develop/07_dApp/04_verifier",slug:"/develop/dApp/verifier/request",permalink:"/docs/develop/dApp/verifier/request",draft:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/07_dApp/04_verifier/02_requestCredential.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"request",title:"Verifier Requests a Credential"},sidebar:"dApp",previous:{title:"Overview",permalink:"/docs/develop/dApp/verifier/welcome"},next:{title:"Verifier Verifies a Credential",permalink:"/docs/develop/dApp/verifier/verify"}},c={},p=[],d={toc:p};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The job of the verifier is to request and verify credentials.\nYour verifier can request one or more credentials of a specific CType.\nFor example, if you want to verify an email credential, you would use the email CType:"),(0,i.kt)(s.Z,{mdxType:"TsJsSnippet"},"/* eslint-disable @typescript-eslint/no-unused-vars */\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nexport function main() {\n  const emailCType: Kilt.ICType = {\n    $id: 'kilt:ctype:0x3291bb126e33b4862d421bfaa1d2f272e6cdfc4f96658988fbcffea8914bd9ac',\n    $schema: 'http://kilt-protocol.org/draft-01/ctype#',\n    title: 'Email',\n    properties: {\n      Email: {\n        type: 'string'\n      }\n    },\n    type: 'object'\n  }\n}\n"),(0,i.kt)("p",null,"First, generate a request challenge and store it on the server side:"),(0,i.kt)(s.Z,{mdxType:"TsJsSnippet"},"/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { randomAsHex } from '@polkadot/util-crypto'\n\nexport function main() {\n  // Store somewhere in the backend.\n  const requestChallenge = randomAsHex(24)\n}\n"),(0,i.kt)("p",null,"Then construct the ",(0,i.kt)("inlineCode",{parentName:"p"},"request-credential")," message using the message body, sender DID and receiver DID:"),(0,i.kt)(s.Z,{mdxType:"TsJsSnippet"},"/* eslint-disable @typescript-eslint/no-unused-vars */\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nlet encryptionKeyUri: Kilt.DidResourceUri\nlet emailCtype: Kilt.CTypeHash\nlet requestChallenge: string\n\nexport function main() {\n  const did = 'did:kilt:4smcAoiTiCLaNrGhrAM4wZvt5cMKEGm8f3Cu9aFrpsh5EiNV'\n  const { did: receiverDid } = Kilt.Did.parse(encryptionKeyUri)\n\n  const message = Kilt.Message.fromBody(\n    {\n      content: {\n        cTypes: [{ cTypeHash: emailCtype }],\n        challenge: requestChallenge\n      },\n      type: 'request-credential'\n    },\n    did,\n    receiverDid\n  )\n}\n"),(0,i.kt)("p",null,"Next, encrypt the message:"),(0,i.kt)(s.Z,{mdxType:"TsJsSnippet"},"/* eslint-disable @typescript-eslint/no-unused-vars */\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nlet message: Kilt.IMessage\nlet session: {\n  encryptionKeyUri: Kilt.DidResourceUri\n  send: (message: Kilt.IEncryptedMessage) => Promise<void>\n}\nlet senderDid: Kilt.DidDocument\nlet senderSecretKey: Kilt.Utils.Crypto.CryptoInput\n\nexport async function main() {\n  const senderEncryptionKey = senderDid.keyAgreement?.[0]\n  if (!senderEncryptionKey) {\n    return\n  }\n\n  // Create a callback that uses the DID encryption key to encrypt the message.\n  const encryptCallback: Kilt.EncryptCallback = async ({\n    data,\n    peerPublicKey\n  }) => {\n    const { box, nonce } = Kilt.Utils.Crypto.encryptAsymmetric(\n      data,\n      peerPublicKey,\n      senderSecretKey\n    )\n    return {\n      data: box,\n      nonce,\n      keyUri: `${senderDid.uri}${senderEncryptionKey.id}`\n    }\n  }\n\n  const encryptedMesage = await Kilt.Message.encrypt(\n    message,\n    encryptCallback,\n    session.encryptionKeyUri\n  )\n\n  // Finally, send the encrypted message to the extension.\n  await session.send(encryptedMesage)\n}\n"))}u.isMDXComponent=!0}}]);