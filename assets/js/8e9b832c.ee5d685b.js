(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5596],{48952:e=>{function n(e){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}n.keys=()=>[],n.resolve=n,n.id=48952,e.exports=n},32176:(e,n,o)=>{"use strict";o.r(n),o.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>d,toc:()=>p});var t=o(17624),i=o(4552),c=o(96020),a=o(72100);const s="import type { KeyringPair } from '@polkadot/keyring/types'\n\nimport { ApiPromise, WsProvider } from '@polkadot/api'\n\n// Import needed to provide KILT Typescript support to the api object.\nimport '@kiltprotocol/augment-api'\nimport { typesBundle } from '@kiltprotocol/type-definitions'\n\nexport async function queryAccountWeb3Name(\n  endpoint: string,\n  lookupAccountAddress: KeyringPair['address']\n): Promise<string | null> {\n  const api = await ApiPromise.create({\n    provider: new WsProvider(endpoint),\n    typesBundle\n  })\n  // Call to the KILT runtime API `did.queryByAccount`\n  const didDetails = await api.call.did.queryByAccount({\n    AccountId32: lookupAccountAddress\n  })\n  if (didDetails.isNone) {\n    throw new Error(`No DID for the KILT account \"${lookupAccountAddress}\".`)\n  }\n\n  const { w3n } = didDetails.unwrap()\n  if (w3n.isNone) {\n    throw new Error(\n      `No web3name for the KILT account \"${lookupAccountAddress}\".`\n    )\n  }\n\n  const web3Name = w3n.unwrap().toHuman()\n  console.log(\n    `The provided account is identifiable by the following web3name: \"w3n:${web3Name}\"`\n  )\n\n  return web3Name\n}\n",r={id:"account-name",title:"Query the web3name of an Account"},l=void 0,d={id:"develop/sdk/cookbook/account_linking/account-name",title:"Query the web3name of an Account",description:"For accounts that have been linked to DIDs that have claimed a web3name, the linking feature opens the way to a host of possibilities, e.g., showing the web3name of a collator's account on the KILT Stakeboard.",source:"@site/docs/develop/01_sdk/02_cookbook/03_account_linking/02_account_name.md",sourceDirName:"develop/01_sdk/02_cookbook/03_account_linking",slug:"/develop/sdk/cookbook/account_linking/account-name",permalink:"/docs/develop/sdk/cookbook/account_linking/account-name",draft:!1,unlisted:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/01_sdk/02_cookbook/03_account_linking/02_account_name.md",tags:[],version:"current",lastUpdatedAt:1712675998,formattedLastUpdatedAt:"Apr 9, 2024",sidebarPosition:2,frontMatter:{id:"account-name",title:"Query the web3name of an Account"},sidebar:"sdk",previous:{title:"Link an Account to a KILT DID",permalink:"/docs/develop/sdk/cookbook/account_linking/account-link"},next:{title:"Unlink an Account From a KILT DID",permalink:"/docs/develop/sdk/cookbook/account_linking/account-unlink"}},u={},p=[{value:"Query an Account&#39;s web3name with the KILT SDK",id:"query-an-accounts-web3name-with-the-kilt-sdk",level:2},{value:"Query an Account&#39;s web3name without the KILT SDK",id:"query-an-accounts-web3name-without-the-kilt-sdk",level:2}];function h(e){const n={a:"a",code:"code",h2:"h2",p:"p",...(0,i.M)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["For accounts that have been linked to DIDs that have claimed a web3name, the linking feature opens the way to a host of possibilities, e.g., showing the web3name of a collator's account on the ",(0,t.jsx)(n.a,{href:"https://stakeboard.kilt.io/",children:"KILT Stakeboard"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["This section shows how to perform the ",(0,t.jsx)(n.code,{children:"account -> web3name"})," querying both with and without the support of the KILT SDK."]}),"\n",(0,t.jsx)(n.h2,{id:"query-an-accounts-web3name-with-the-kilt-sdk",children:"Query an Account's web3name with the KILT SDK"}),"\n",(0,t.jsx)(c.c,{children:a.c}),"\n",(0,t.jsx)(n.h2,{id:"query-an-accounts-web3name-without-the-kilt-sdk",children:"Query an Account's web3name without the KILT SDK"}),"\n",(0,t.jsx)(c.c,{children:s})]})}function m(e={}){const{wrapper:n}={...(0,i.M)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},96020:(e,n,o)=>{"use strict";o.d(n,{c:()=>h});var t=o(11504),i=o(28264),c=o(46352),a=o(58440),s=o(14300),r=o(28168),l=o(61268),d=o(87768),u=o(1608),p=o(17624);const h=e=>{let{children:n,fileName:o,...h}=e;const m=n,[k,w]=(0,t.useState)("# loading code..."),{siteConfig:{customFields:{prettierConfig:f}}}=(0,i.c)(),b=(0,t.useMemo)((()=>{const{code:e}=(0,c.transform)(m,{plugins:["transform-typescript"],retainLines:!0});return e}),[m]);(0,t.useEffect)((()=>{a.E9(b,{parser:"babel",plugins:[s.c,r.cp],...f}).then(w)}),[f,b]);const g=[{fileName:o?`${o}.ts`:void 0,fileContents:m,fileID:"ts",fileLabel:"Typescript"},{fileName:o?`${o}.js`:void 0,fileContents:k,fileID:"js",fileLabel:"Javascript"}];return(0,p.jsx)(p.Fragment,{children:(0,p.jsx)(l.c,{groupId:"ts-js-choice",children:g.map((e=>(0,p.jsx)(d.c,{value:e.fileID,label:e.fileLabel,default:!0,children:(0,p.jsx)(u.c,{...h,className:"language-"+e.fileID,title:e.fileName,children:e.fileContents})})))})})}},72100:(e,n,o)=>{"use strict";o.d(n,{c:()=>t});const t='import * as Kilt from \'@kiltprotocol/sdk-js\'\n\nexport async function queryAccountWeb3Name(\n  lookupAccountAddress: Kilt.KiltAddress\n): Promise<Kilt.Did.Web3Name | null> {\n  const api = Kilt.ConfigService.get(\'api\')\n\n  const encodedLinkedDetails = await api.call.did.queryByAccount(\n    Kilt.Did.accountToChain(lookupAccountAddress)\n  )\n  const { web3Name } = Kilt.Did.linkedInfoFromChain(encodedLinkedDetails)\n  if (web3Name) {\n    console.log(\n      `web3name for account "${lookupAccountAddress}" -> "${web3Name}"`\n    )\n  } else {\n    console.log(\n      `Account "${lookupAccountAddress}" does not have a linked web3name.`\n    )\n  }\n\n  return web3Name\n}\n'}}]);