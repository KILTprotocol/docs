"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[914],{5442:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>d,default:()=>u,frontMatter:()=>c,metadata:()=>l,toc:()=>p});var i=n(4848),s=n(8453),r=n(1432);const o='{\n  "$schema": "ipfs://bafybeiah66wbkhqbqn7idkostj2iqyan2tstc4tpqt65udlhimd7hcxjyq/",\n  "title": "Drivers License by did:kilt:4t9FPVbcN42UMxt3Z2Y4Wx38qPL8bLduAB11gLZSwn5hVEfH",\n  "additionalProperties": false,\n  "properties": {\n    "name": {\n      "type": "string"\n    },\n    "age": {\n      "type": "integer"\n    },\n    "id": {\n      "type": "string"\n    }\n  },\n  "type": "object"\n}';var a=n(1899);const c={id:"ctypes",title:"CTypes"},d=void 0,l={id:"concepts/credentials/ctypes",title:"CTypes",description:"Claim types (CTypes) are data types specific to KILT that define the structure of a claim (i.e., its data model).",source:"@site/docs/concepts/05_credentials/02_ctypes.md",sourceDirName:"concepts/05_credentials",slug:"/concepts/credentials/ctypes",permalink:"/docs/concepts/credentials/ctypes",draft:!1,unlisted:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/concepts/05_credentials/02_ctypes.md",tags:[],version:"current",lastUpdatedAt:1733496053e3,sidebarPosition:2,frontMatter:{id:"ctypes",title:"CTypes"},sidebar:"concepts",previous:{title:"Overview",permalink:"/docs/concepts/credentials/overview"},next:{title:"Claims",permalink:"/docs/concepts/credentials/claiming"}},h={},p=[{value:"CType model JSON schema",id:"ctype-model-json-schema",level:2},{value:"Properties",id:"properties",level:3},{value:"CType metadata",id:"ctype-metadata",level:2},{value:"Hashing",id:"hashing",level:2},{value:"Constructing the <code>hash</code> for the <code>$id</code>",id:"constructing-the-hash-for-the-id",level:3},{value:"Storing and querying CTypes",id:"storing-and-querying-ctypes",level:2},{value:"Migration instructions",id:"migration-instructions",level:2}];function y(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["Claim types (CTypes) are data types specific to KILT that define the structure of a claim (i.e., its data model).\nCTypes are based on ",(0,i.jsx)(t.a,{href:"https://json-schema.org/",children:"JSON Schema"}),", a standard used to annotate and validate JSON documents.\nThe schema defines which properties exist and what their type should be, e.g., a string, a number, an object, etc."]}),"\n",(0,i.jsx)(t.h2,{id:"ctype-model-json-schema",children:"CType model JSON schema"}),"\n",(0,i.jsx)(t.p,{children:"The following are all required properties of the JSON schema for CType models:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"$id"}),": An ",(0,i.jsx)(t.strong,{children:"identifier"}),": in the format ",(0,i.jsx)(t.code,{children:"kilt:ctype:0x{cTypeHash}"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"$schema"}),": A ",(0,i.jsx)(t.strong,{children:"reference to CType metaschema"}),": Describes what a valid CType must looks like. You can find the latest metaschema on IPFS at the following address ",(0,i.jsx)(t.a,{href:"ipfs://bafybeiah66wbkhqbqn7idkostj2iqyan2tstc4tpqt65udlhimd7hcxjyq/",children:"ipfs://bafybeiah66wbkhqbqn7idkostj2iqyan2tstc4tpqt65udlhimd7hcxjyq/"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"title"}),": A user-friendly name for the CType that makes it easier for users to contextualize."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"properties"}),": A set of fields (e.g., name, birth date) that the CType can contain, and that the Claimer can have attested. ",(0,i.jsx)(t.a,{href:"#properties",children:"Read more details about properties below"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"type"}),": An object containing properties for a claim about the Claimer in the credential."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"additionalProperties"}),": A boolean added since version 1 of CTypes, that must be set and allows or disallows any properties in addition to those in ",(0,i.jsx)(t.code,{children:"properties"}),". If set to ",(0,i.jsx)(t.code,{children:"false"}),", the CType validation will fail if there are any additional properties."]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"properties",children:"Properties"}),"\n",(0,i.jsxs)(t.p,{children:["When creating the accepted properties of a new CType schema, you define each property as a key-value pair.\nThe ",(0,i.jsx)(t.strong,{children:"key"}),' is the property name (such as "age") and the ',(0,i.jsx)(t.strong,{children:"value"}),' is an object that has a "type" property whose property defines which type the credential property should have (e.g., "number") or a ',(0,i.jsx)(t.code,{children:"$ref"})," property whose value is a reference to another CType or one of its properties. Using a ",(0,i.jsx)(t.code,{children:"$ref"})," allows for nested CTypes"]}),"\n",(0,i.jsx)(t.p,{children:"Each property must have:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["One of the following fields: ",(0,i.jsx)(t.code,{children:"type"})," or ",(0,i.jsx)(t.code,{children:"$ref"})]}),"\n",(0,i.jsxs)(t.li,{children:["A type of ",(0,i.jsx)(t.code,{children:"string"}),", ",(0,i.jsx)(t.code,{children:"integer"}),", ",(0,i.jsx)(t.code,{children:"number"})," or ",(0,i.jsx)(t.code,{children:"boolean"})," to define the attribute"]}),"\n",(0,i.jsxs)(t.li,{children:["Reference nested JSON schemas from previously created CTypes with a ",(0,i.jsx)(t.code,{children:"uri"})," using ",(0,i.jsx)(t.code,{children:"$ref"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:["The format field is optionally:","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.em,{children:"Date"})," format e.g., 2012-04-23T18:25:43.511Z"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.em,{children:"Time"})," format e.g., T18:25:43.511Z"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.em,{children:"URI"}),' format e.g., "',(0,i.jsx)(t.a,{href:"https://www.example.com",children:"https://www.example.com"}),'"']}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(r.A,{className:"language-json",title:"CType schema example",children:o}),"\n",(0,i.jsx)(t.p,{children:"When submitted, the CType schema is hashed to generate its own identifier, and it becomes the full CType object:"}),"\n",(0,i.jsx)(r.A,{className:"language-json",title:"Full CType example",children:a.A}),"\n",(0,i.jsx)(t.h2,{id:"ctype-metadata",children:"CType metadata"}),"\n",(0,i.jsx)(t.p,{children:"You can link CType Metadata to a given CType to provide title and descriptions in different languages for the whole CType and its properties."}),"\n",(0,i.jsx)(t.h2,{id:"hashing",children:"Hashing"}),"\n",(0,i.jsx)(t.p,{children:"Use the hash of the CType to identify and anchor it to the KILT blockchain. Once this is done, it's no longer possible to change or delete the CType schema."}),"\n",(0,i.jsxs)(t.h3,{id:"constructing-the-hash-for-the-id",children:["Constructing the ",(0,i.jsx)(t.code,{children:"hash"})," for the ",(0,i.jsx)(t.code,{children:"$id"})]}),"\n",(0,i.jsxs)(t.p,{children:["KILT uses the ",(0,i.jsx)(t.code,{children:"blake2b256"})," hashing algorithm to compute the hash of CTypes, after sorting the CType object by a canonicalization algorithm to ensure that semantically equivalent CTypes with different orders of their properties result in the same final hash."]}),"\n",(0,i.jsx)(t.p,{children:"KILT computes the hash from the following fields of the CType schema:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"$schema"})}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"properties"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"key"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"$ref"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"type"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"format"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"title"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"type"})}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["A typical CType ID looks like this: ",(0,i.jsx)(t.code,{children:"kilt:ctype:0xda3861a45e0197f3ca145c2c209f9126e5053fas503e459af4255cf8011d5101"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"storing-and-querying-ctypes",children:"Storing and querying CTypes"}),"\n",(0,i.jsxs)(t.p,{children:["As of the ",(0,i.jsx)(t.a,{href:"https://github.com/KILTprotocol/kilt-node/releases/tag/1.9.0",children:"KILT runtime 1.9.0"}),", you can query CTypes directly from any KILT archive node."]}),"\n",(0,i.jsx)(t.p,{children:"After creating a CType, its full content is only included in the blockchain block history and its hash and creation block number anchored to the blockchain state."}),"\n",(0,i.jsx)(t.p,{children:"To query the full content of a CType, use its hash to look up the creation block number, and use that to query any KILT archive node for the extrinsic information about the CType."}),"\n",(0,i.jsx)(t.p,{children:"The returned information includes the whole CType, which is now available for the user to, for example, verify credentials against it."}),"\n",(0,i.jsx)(t.admonition,{title:"CType creation cost",type:"info",children:(0,i.jsx)(t.p,{children:"Currently, it costs 0.001 KILT to create a CType on the KILT blockchain."})}),"\n",(0,i.jsxs)(t.p,{children:["For a detailed developer-oriented guide to KILT CTypes, read the ",(0,i.jsx)(t.a,{href:"/docs/develop/sdk/cookbook/claiming/ctype-creation",children:"CType Cookbook section"}),"."]}),"\n",(0,i.jsxs)(t.admonition,{title:"Deprecation Warning: CType metaschema draft-01",type:"danger",children:[(0,i.jsxs)(t.p,{children:["CTypes based on the ",(0,i.jsx)(t.a,{href:"http://kilt-protocol.org/draft-01/ctype",children:"Draft 01"})," metaschema are subject to a vulnerability that could fool an ",(0,i.jsx)(t.strong,{children:"Attester"})," by introducing data they never checked."]}),(0,i.jsx)(t.p,{children:"Due to this vulnerability, this version of the metaschema is deprecated and its use is discouraged when creating new CTypes."}),(0,i.jsxs)(t.p,{children:["For optimal security and functionality, use SDK version ",(0,i.jsx)(t.code,{children:"0.33.0"})," or later for creating CTypes.\nThis newer version defaults to using the updated metaschema available at ",(0,i.jsx)(t.a,{href:"ipfs://bafybeiah66wbkhqbqn7idkostj2iqyan2tstc4tpqt65udlhimd7hcxjyq",children:(0,i.jsx)(t.code,{children:"ipfs://bafybeiah66wbkhqbqn7idkostj2iqyan2tstc4tpqt65udlhimd7hcxjyq/"})}),"."]}),(0,i.jsx)(t.p,{children:"This also means you should update existing CTypes.\nWhile existing CTypes continue to work in the short term, we advise to upgrade to the latest metaschema at your earliest convenience."}),(0,i.jsxs)(t.p,{children:["Old Property Value: ",(0,i.jsx)(t.code,{children:'"$schema": "http://kilt-protocol.org/draft-01/ctype"'}),"\nNew Property Value: ",(0,i.jsx)(t.code,{children:'"$schema": "ipfs://bafybeiah66wbkhqbqn7idkostj2iqyan2tstc4tpqt65udlhimd7hcxjyq/"'})]}),(0,i.jsx)(t.h2,{id:"migration-instructions",children:"Migration instructions"}),(0,i.jsx)(t.p,{children:"Attesters should transition to issuing credentials using upgraded versions of CTypes currently in use."}),(0,i.jsxs)(t.p,{children:["Using sdk version ",(0,i.jsx)(t.code,{children:"0.33.0"})," or later, you can produce a copy of an existing CType ",(0,i.jsx)(t.code,{children:"oldCType"})," as follows:"]}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"const newCType = CType.fromProperties(oldCType.title, oldCType.properties, 'V1')\n"})}),(0,i.jsxs)(t.p,{children:["The new CType has the same title and properties as the existing one, but be based on the new metaschema, resulting in a different hash and id.\nAfter ",(0,i.jsx)(t.a,{href:"/docs/develop/sdk/cookbook/claiming/ctype-creation",children:"registering the new CType on the KILT blockchain"}),", you can use the new CType as a drop-in replacement in issuing credentials."]}),(0,i.jsx)(t.p,{children:"Verifiers depending on these CTypes should accept both the old and new CType during a transition period.\nTest thoroughly to ensure the correct behavior and functionality of the new CTypes in your application."})]})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(y,{...e})}):y(e)}},1899:(e,t,n)=>{n.d(t,{A:()=>i});const i='{\n  "$id": "kilt:ctype:0x4f1d68ac46daf4613181b33b16faaf10cf94879dc2246d7485dc2ccbb843641d",\n  "$schema": "ipfs://bafybeiah66wbkhqbqn7idkostj2iqyan2tstc4tpqt65udlhimd7hcxjyq/",\n  "additionalProperties": false,\n  "properties": {\n    "age": {\n      "type": "integer"\n    },\n    "id": {\n      "type": "string"\n    },\n    "name": {\n      "type": "string"\n    }\n  },\n  "title": "Drivers License by did:kilt:4t9FPVbcN42UMxt3Z2Y4Wx38qPL8bLduAB11gLZSwn5hVEfH",\n  "type": "object"\n}'}}]);