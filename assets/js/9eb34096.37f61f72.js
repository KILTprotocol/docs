(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8777],{5764:e=>{function t(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=()=>[],t.resolve=t,t.id=5764,e.exports=t},7351:(e,t,i)=>{"use strict";i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>f,frontMatter:()=>a,metadata:()=>c,toc:()=>h});var n=i(4848),r=i(8453),s=i(3172);const o="import * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function verifyPresentation(\n  presentation: Kilt.ICredentialPresentation,\n  {\n    challenge,\n    trustedAttesterUris = []\n  }: {\n    challenge?: string\n    trustedAttesterUris?: Kilt.DidUri[]\n  } = {}\n): Promise<void> {\n  // Verify the presentation with the provided challenge.\n  const { revoked, attester } = await Kilt.Credential.verifyPresentation(\n    presentation,\n    { challenge }\n  )\n\n  if (revoked) {\n    throw new Error(\"Credential has been revoked and hence it's not valid.\")\n  }\n  if (!trustedAttesterUris.includes(attester)) {\n    throw `Credential was issued by ${attester} which is not in the provided list of trusted attesters: ${trustedAttesterUris}.`\n  }\n}\n",a={id:"presentation-verification",title:"Verify a Credential or a Presentation"},l=void 0,c={id:"develop/sdk/cookbook/claiming/presentation-verification",title:"Verify a Credential or a Presentation",description:"Whether a presentation involves selective disclosure or a whole credential is not technically relevant to Verifiers.",source:"@site/docs/develop/01_sdk/02_cookbook/04_claiming/05_presentation_verification.md",sourceDirName:"develop/01_sdk/02_cookbook/04_claiming",slug:"/develop/sdk/cookbook/claiming/presentation-verification",permalink:"/docs/develop/sdk/cookbook/claiming/presentation-verification",draft:!1,unlisted:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/01_sdk/02_cookbook/04_claiming/05_presentation_verification.md",tags:[],version:"current",lastUpdatedAt:1733496053e3,sidebarPosition:5,frontMatter:{id:"presentation-verification",title:"Verify a Credential or a Presentation"},sidebar:"sdk",previous:{title:"Present a Credential",permalink:"/docs/develop/sdk/cookbook/claiming/presentation-creation"},next:{title:"Revoke a Credential",permalink:"/docs/develop/sdk/cookbook/claiming/attestation-removal"}},d={},h=[];function p(e){const t={admonition:"admonition",p:"p",strong:"strong",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["Whether a presentation involves selective disclosure or a whole credential is not technically relevant to Verifiers.\nThis is because in KILT a presentation ",(0,n.jsx)(t.strong,{children:"is"})," a credential.\nThis means that the logic for Verifiers does not change depending on the case, thus verifying a presentation is as easy as calling one SDK function, like the following code snippet:"]}),"\n",(0,n.jsx)(s.A,{children:o}),"\n",(0,n.jsx)(t.admonition,{title:"Check if the presenter is the credential subject",type:"warning",children:(0,n.jsx)(t.p,{children:"Verifying a presentation provides proof that all the information is correct and authentic, and that the credential has not been revoked.\nVerifiers still need to match the subject of the credential to the entity that is presenting it.\nOne way of achieving this is by asking the Claimer to include a challenge in the presentation signature, as shown in the snippet above.\nWithout a challenge, Verifiers must implement other measures to be certain about the identity of the presenter."})}),"\n",(0,n.jsx)(t.admonition,{title:"Evaluation of the attester's trust is up to the Verifiers",type:"warning",children:(0,n.jsx)(t.p,{children:"Verifiers must also have a registry of attesters they trust, and verify that the issuer of the credential they are verifying belongs to such list and, where necessary, whether it is still in operation or not, i.e., whether its DID still exists or has been deleted."})})]})}function f(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},3172:(e,t,i)=>{"use strict";i.d(t,{A:()=>f});var n=i(6540),r=i(4586),s=i(6352),o=i(8463),a=i(5283),l=i(6745),c=i(1470),d=i(9365),h=i(1432),p=i(4848);const f=e=>{let{children:t,fileName:i,...f}=e;const u=t,[m,g]=(0,n.useState)("# loading code..."),{siteConfig:{customFields:{prettierConfig:v}}}=(0,r.A)(),k=(0,n.useMemo)((()=>{const{code:e}=(0,s.transform)(u,{plugins:["transform-typescript"],retainLines:!0}),t=["./generateAccount","./generateKeypairs","./ctypeSchema","./createClaim","./generateLightDid","../attester/ctypeSchema","../claimer/generateLightDid","../claimer/generateCredential","./claimer/createPresentation","./claimer/generateKeypairs","./claimer/generateLightDid"];let i=e.replace(/from\s+['"](.+)['"]/g,((e,i)=>t.includes(i)?`from '${i}.js'`:e));return i=i.replace("if (require.main === module)","if (process.argv[1] === new URL(import.meta.url).pathname)"),i}),[u]);(0,n.useEffect)((()=>{o.GP(k,{parser:"babel",plugins:[a.A,l.Ay],...v}).then(g)}),[v,k]);const y=[{fileName:i?`${i}.ts`:void 0,fileContents:u,fileID:"ts",fileLabel:"Typescript"},{fileName:i?`${i}.js`:void 0,fileContents:m,fileID:"js",fileLabel:"Javascript"}];return(0,p.jsx)(p.Fragment,{children:(0,p.jsx)(c.A,{groupId:"ts-js-choice",children:y.map((e=>(0,p.jsx)(d.A,{value:e.fileID,label:e.fileLabel,default:!0,children:(0,p.jsx)(h.A,{...f,className:"language-"+e.fileID,title:e.fileName,children:e.fileContents})})))})})}}}]);