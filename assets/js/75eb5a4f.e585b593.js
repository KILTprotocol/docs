(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3437],{25380:function(e){function n(e){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}n.keys=function(){return[]},n.resolve=n,n.id=25380,e.exports=n},51909:function(e,n,t){"use strict";var i=t(83117),o=t(67294),r=t(52263),l=t(73945),a=t(28182),s=t(12175),d=t(65488),c=t(85162),u=t(90814);n.Z=e=>{let{children:n,fileName:t,...p}=e;const m=n,{code:b}=(0,s.transform)(m,{plugins:["transform-typescript"],retainLines:!0}),{siteConfig:{customFields:{prettierConfig:h}}}=(0,r.Z)(),f=(0,l.format)(b,{parser:a.parsers.babel.parse,...h}),k=t?`${t}.ts`:void 0,y=t?`${t}.js`:void 0;return o.createElement(d.Z,{groupId:"ts-js-choice"},o.createElement(c.Z,{value:"ts",label:"Typescript",default:!0},o.createElement(u.Z,(0,i.Z)({},p,{className:"language-ts",title:k}),m)),o.createElement(c.Z,{value:"js",label:"Javascript"},o.createElement(u.Z,(0,i.Z)({},p,{className:"language-js",title:y}),f)))}},50490:function(e,n,t){"use strict";t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return a},default:function(){return p},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return c}});var i=t(83117),o=(t(67294),t(3905)),r=t(51909);const l={id:"credential-query",title:"Query Public Credentials for a web3name"},a=void 0,s={unversionedId:"develop/sdk/cookbook/web3names/credential-query",id:"develop/sdk/cookbook/web3names/credential-query",title:"Query Public Credentials for a web3name",description:"web3names are linked to KILT DIDs, and KILT DIDs can define service endpoints to expose additional service/information.",source:"@site/docs/develop/01_sdk/02_cookbook/02_web3names/02_credential_query.md",sourceDirName:"develop/01_sdk/02_cookbook/02_web3names",slug:"/develop/sdk/cookbook/web3names/credential-query",permalink:"/docs/develop/sdk/cookbook/web3names/credential-query",draft:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/01_sdk/02_cookbook/02_web3names/02_credential_query.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"credential-query",title:"Query Public Credentials for a web3name"},sidebar:"sdk",previous:{title:"Claim a web3name",permalink:"/docs/develop/sdk/cookbook/web3names/web3name-claim"},next:{title:"Release a web3name",permalink:"/docs/develop/sdk/cookbook/web3names/web3name-release"}},d={},c=[],u={toc:c};function p(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"web3names are linked to KILT DIDs, and KILT DIDs can define service endpoints to expose additional service/information.\nOne of the possible endpoint types is the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/KILTprotocol/spec-KiltPublishedCredentialCollectionV1/blob/main/README.md"},(0,o.kt)("inlineCode",{parentName:"a"},"KiltPublishedCredentialCollectionV1"))," type.\nThe type defines the structure to make KILT credentials public and accessible to anyone."),(0,o.kt)("p",null,"Because of the relationship between web3names and DIDs, it is possible, given a certain web3name, to retrieve all public credentials that the DID subject identified by that web3name has made available.\nBelow is a code snippet showing how to do that using the KILT SDK, and how to perform the needed security checks/validation as recommended by the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/KILTprotocol/spec-KiltPublishedCredentialCollectionV1/blob/main/README.md"},"specification"),"."),(0,o.kt)(r.Z,{mdxType:"TsJsBlock"},"import fetch from 'node-fetch'\n\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function queryPublishedCredentials(\n  web3Name: Kilt.Did.Web3Name\n): Promise<Kilt.KiltPublishedCredentialCollectionV1> {\n  const api = Kilt.ConfigService.get('api')\n\n  const encodedDidForWeb3Name = await api.call.did.queryByWeb3Name(web3Name)\n  const {\n    document: { uri }\n  } = Kilt.Did.linkedInfoFromChain(encodedDidForWeb3Name)\n\n  console.log(`DID for \"${web3Name}\": ${uri}`)\n\n  const resolutionResult = await Kilt.Did.resolve(uri)\n  if (!resolutionResult) {\n    throw 'The DID does not exist on the KILT blockchain.'\n  }\n\n  const { document } = resolutionResult\n  // If no details are returned but resolutionResult is not null, the DID has been deleted.\n  // This information is present in `resolutionResult.metadata.deactivated`.\n  if (!document) {\n    throw 'The DID has already been deleted.'\n  }\n\n  // Filter the endpoints by their type.\n  const credentialEndpoints = document.service?.filter((service) =>\n    service.type.includes(Kilt.KiltPublishedCredentialCollectionV1Type)\n  )\n\n  console.log(\n    `Endpoints of type \"${Kilt.KiltPublishedCredentialCollectionV1Type}\" for the retrieved DID:`\n  )\n  console.log(JSON.stringify(credentialEndpoints, null, 2))\n\n  // For demonstration, only the first endpoint and its first URL are considered.\n  const firstCredentialCollectionEndpointUrl =\n    credentialEndpoints?.[0]?.serviceEndpoint[0]\n  if (!firstCredentialCollectionEndpointUrl) {\n    console.log(\n      `The DID has no service endpoints of type \"${Kilt.KiltPublishedCredentialCollectionV1Type}\".`\n    )\n  }\n\n  // Retrieve the credentials pointed at by the endpoint.\n  // Being an IPFS endpoint, the fetching can take an arbitrarily long time or even fail if the timeout is reached.\n  // In production settings, error cases including those where the result is not a correct JSON should be handled accordingly.\n  const response = await fetch(firstCredentialCollectionEndpointUrl as string)\n  const credentialCollection: Kilt.KiltPublishedCredentialCollectionV1 =\n    await response.json()\n  console.log(`Credential collection behind the endpoint:`)\n  console.log(JSON.stringify(credentialCollection, null, 2))\n\n  // Verify that all credentials are valid and that they all refer to the same subject DID.\n  await Promise.all(\n    credentialCollection.map(async ({ credential }) => {\n      await Kilt.Credential.verifyCredential(credential)\n\n      // Verify that the credential refers to the intended subject.\n      if (!Kilt.Did.isSameSubject(credential.claim.owner, uri)) {\n        throw 'One of the credentials refers to a different subject than expected.'\n      }\n    })\n  )\n\n  // If none of the above operations throw, the credentials are valid.\n  console.log('All retrieved credentials are valid! \u2705!')\n\n  return credentialCollection\n}\n"))}p.isMDXComponent=!0}}]);