(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2417],{25380:e=>{function t(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=()=>[],t.resolve=t,t.id=25380,e.exports=t},51909:(e,t,n)=>{"use strict";n.d(t,{Z:()=>p});var i=n(87462),o=n(67294),a=n(52263),r=n(73945),l=n(28182),s=n(12175),c=n(65488),d=n(85162),m=n(90814);const p=e=>{let{children:t,fileName:n,...p}=e;const u=t,{code:h}=(0,s.transform)(u,{plugins:["transform-typescript"],retainLines:!0}),{siteConfig:{customFields:{prettierConfig:k}}}=(0,a.Z)(),g=(0,r.format)(h,{parser:l.parsers.babel.parse,...k}),y=n?`${n}.ts`:void 0,D=n?`${n}.js`:void 0;return o.createElement(c.Z,{groupId:"ts-js-choice"},o.createElement(d.Z,{value:"ts",label:"Typescript",default:!0},o.createElement(m.Z,(0,i.Z)({},p,{className:"language-ts",title:y}),u)),o.createElement(d.Z,{value:"js",label:"Javascript"},o.createElement(m.Z,(0,i.Z)({},p,{className:"language-js",title:D}),g)))}},75917:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>p});var i=n(87462),o=(n(67294),n(3905)),a=(n(90814),n(51909)),r=n(65488),l=n(85162);const s={id:"did",title:"DID"},c=void 0,d={unversionedId:"develop/workshop/claimer/did",id:"develop/workshop/claimer/did",title:"DID",description:"Time to make a light DID using the previously created account for the Claimer.",source:"@site/docs/develop/03_workshop/05_claimer/01_did.md",sourceDirName:"develop/03_workshop/05_claimer",slug:"/develop/workshop/claimer/did",permalink:"/docs/develop/workshop/claimer/did",draft:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/03_workshop/05_claimer/01_did.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"did",title:"DID"},sidebar:"workshop",previous:{title:"\ud83d\udc64 Claimer",permalink:"/docs/develop/workshop/claimer/"},next:{title:"Request an Attestation",permalink:"/docs/develop/workshop/claimer/request"}},m={},p=[{value:"Generate Keys",id:"generate-keys",level:2},{value:"Generate Light DID",id:"generate-light-did",level:2},{value:"Run",id:"run",level:2}],u={toc:p};function h(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Time to make a light DID using the previously created account for the ",(0,o.kt)("span",{className:"label-role claimer"},"Claimer"),".\nSince a light DID is not registered on the blockchain, you don't need funds for creating one.\nRemember light DIDs can:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Sign attestation requests and presentation with the authentication keys"),(0,o.kt)("li",{parentName:"ul"},"Encrypt messages with the encryption keys")),(0,o.kt)("p",null,"Take a look at our ",(0,o.kt)("a",{parentName:"p",href:"/docs/develop/sdk/cookbook/dids/light-did-creation"},"DID documentation")," to learn more about DIDs and the difference between their light and full versions."),(0,o.kt)("h2",{id:"generate-keys"},"Generate Keys"),(0,o.kt)("p",null,"Similar to the Attester, the Claimer must set up the DID keys."),(0,o.kt)(a.Z,{fileName:"claimer/generateKeypairs",mdxType:"TsJsBlock"},"import { mnemonicGenerate, mnemonicToMiniSecret } from '@polkadot/util-crypto'\n\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nexport function generateKeypairs(mnemonic = mnemonicGenerate()) {\n  const authentication = Kilt.Utils.Crypto.makeKeypairFromSeed(\n    mnemonicToMiniSecret(mnemonic)\n  )\n  const encryption = Kilt.Utils.Crypto.makeEncryptionKeypairFromSeed(\n    mnemonicToMiniSecret(mnemonic)\n  )\n\n  return {\n    authentication,\n    encryption\n  }\n}\n"),(0,o.kt)("p",null,"The Claimer only needs an authentication key and an encryption key.\nHere the keys are both derived from the same seed, but they could also have two different seeds."),(0,o.kt)("h2",{id:"generate-light-did"},"Generate Light DID"),(0,o.kt)("p",null,"Once our ",(0,o.kt)("inlineCode",{parentName:"p"},"keypairs")," are generated we can create our light DID.\nBecause it's off-chain we can just create the DID object every time, we don't need to resolve them before using it.\nBut we'll still accept the ",(0,o.kt)("inlineCode",{parentName:"p"},"mnemonic")," and prompt to save it in ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," for our reference."),(0,o.kt)(a.Z,{fileName:"claimer/generateLightDid",mdxType:"TsJsBlock"},"import { config as envConfig } from 'dotenv'\n\nimport { mnemonicGenerate } from '@polkadot/util-crypto'\n\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nimport { generateKeypairs } from './generateKeypairs'\n\nexport function generateLightDid(mnemonic: string): Kilt.DidDocument {\n  const { authentication, encryption } = generateKeypairs(mnemonic)\n  return Kilt.Did.createLightDidDocument({\n    authentication: [authentication],\n    keyAgreement: [encryption]\n  })\n}\n\n// Don't execute if this is imported by another file.\nif (require.main === module) {\n  ;(async () => {\n    envConfig()\n\n    try {\n      await Kilt.init()\n\n      const mnemonic = mnemonicGenerate()\n      console.log('\\nsave following to .env to continue\\n')\n      console.log(`CLAIMER_DID_MNEMONIC=\"${mnemonic}\"`)\n    } catch (e) {\n      console.log('Error while setting up claimer DID')\n      throw e\n    }\n  })()\n}\n"),(0,o.kt)("p",null,"After everything is initialized, we create a mnemonic that will be used to create the light DID.\nAs you may have noticed the Claimer doesn't have an ",(0,o.kt)("inlineCode",{parentName:"p"},"account"),".\nThe Claimer doesn't need to hold funds and also doesn't need a blockchain account."),(0,o.kt)("h2",{id:"run"},"Run"),(0,o.kt)(r.Z,{groupId:"ts-js-choice",mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"ts",label:"Typescript",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn ts-node ./claimer/generateLightDid.ts\n"))),(0,o.kt)(l.Z,{value:"js",label:"Javascript",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"node ./claimer/generateLightDid.js\n")))),(0,o.kt)("p",null,"Your output will provide you with ",(0,o.kt)("inlineCode",{parentName:"p"},"CLAIMER_DID_MNEMONIC"),".\nBe sure to save it in your ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," file, it should now look similar to this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-env",metastring:'title=".env"',title:'".env"'},'WSS_ADDRESS=wss://peregrine.kilt.io/parachain-public-ws\n\nATTESTER_ACCOUNT_MNEMONIC="warrior icon use cry...\nATTESTER_ACCOUNT_ADDRESS=4ohMvUHsyeDhMVZF...\nATTESTER_DID_MNEMONIC="beyond large galaxy...\n\nCLAIMER_DID_MNEMONIC="danger awkward wrestle snap...\n')),(0,o.kt)("p",null,"Well done - You've successfully generated a light DID!"))}h.isMDXComponent=!0}}]);