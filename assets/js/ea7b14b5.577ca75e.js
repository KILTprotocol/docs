(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1036],{25380:function(e){function t(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=function(){return[]},t.resolve=t,t.id=25380,e.exports=t},46793:function(e,t,n){"use strict";var r=n(67294),i=n(90814);t.Z=e=>{let{children:t,funcName:n="main",funcEnd:s="}",snippets:a,leadingSpaces:l=2,...c}=e;const o=t.split(/\r?\n/);let d="";if(a)d=JSON.parse(a).map((e=>Array.isArray(e)?o.slice(e[0],e[1]).map((e=>e.slice(l))).join("\n"):e)).join("\n");else if(n){let e,t;for(let r=0;r<o.length;r++)if(o[r].includes(n)){if(e=r,o[r].includes(" {"))break}else if(o[r].includes(" {")&&void 0!==e){e=r;break}for(let n=o.length-1;n>0;n--)if(o[n].includes(s)){t=n;break}d=o.slice(e+1,t).map((e=>e.slice(l))).join("\n")}return r.createElement(i.Z,c,d)}},51909:function(e,t,n){"use strict";var r=n(83117),i=n(67294),s=n(52263),a=n(73945),l=n(28182),c=n(12175),o=n(65488),d=n(85162),p=n(90814);t.Z=e=>{let{children:t,fileName:n,...u}=e;const f=t,{code:m}=(0,c.transform)(f,{plugins:["transform-typescript"],retainLines:!0}),{siteConfig:{customFields:{prettierConfig:y}}}=(0,s.Z)(),v=(0,a.format)(m,{parser:l.parsers.babel.parse,...y}),g=n?`${n}.ts`:void 0,h=n?`${n}.js`:void 0;return i.createElement(o.Z,{groupId:"ts-js-choice"},i.createElement(d.Z,{value:"ts",label:"Typescript",default:!0},i.createElement(p.Z,(0,r.Z)({},u,{className:"language-ts",title:g}),f)),i.createElement(d.Z,{value:"js",label:"Javascript"},i.createElement(p.Z,(0,r.Z)({},u,{className:"language-js",title:h}),v)))}},89747:function(e,t,n){"use strict";var r=n(83117),i=n(67294),s=n(52263),a=n(73945),l=n(28182),c=n(12175),o=n(65488),d=n(85162),p=n(46793);t.Z=e=>{let{children:t,fileName:n,...u}=e;const f=t,{code:m}=(0,c.transform)(f,{plugins:["transform-typescript"],retainLines:!0}),{siteConfig:{customFields:{prettierConfig:y}}}=(0,s.Z)(),v=(0,a.format)(m,{parser:l.parsers.babel.parse,...y}),g=n?`${n}.ts`:void 0,h=n?`${n}.js`:void 0;return i.createElement(o.Z,{groupId:"ts-js-choice"},i.createElement(d.Z,{value:"ts",label:"Typescript",default:!0},i.createElement(p.Z,(0,r.Z)({},u,{className:"language-ts",title:g}),f)),i.createElement(d.Z,{value:"js",label:"Javascript"},i.createElement(p.Z,(0,r.Z)({},u,{className:"language-js",title:h}),v)))}},20486:function(e,t,n){"use strict";n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return l},metadata:function(){return o},toc:function(){return p}});var r=n(83117),i=(n(67294),n(3905)),s=n(89747),a=n(51909);const l={id:"verify",title:"Verifier Verifies a Credential"},c=void 0,o={unversionedId:"develop/dApp/verifier/verify",id:"develop/dApp/verifier/verify",title:"Verifier Verifies a Credential",description:"After sending the request-credential message to the extension, the verifier listens for a message of type submit-credential in response.",source:"@site/docs/develop/07_dApp/04_verifier/03_verifyCrendentials.md",sourceDirName:"develop/07_dApp/04_verifier",slug:"/develop/dApp/verifier/verify",permalink:"/docs/develop/dApp/verifier/verify",draft:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/07_dApp/04_verifier/03_verifyCrendentials.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"verify",title:"Verifier Verifies a Credential"},sidebar:"dApp",previous:{title:"Verifier Requests a Credential",permalink:"/docs/develop/dApp/verifier/request"}},d={},p=[],u={toc:p};function f(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"After sending the ",(0,i.kt)("inlineCode",{parentName:"p"},"request-credential")," message to the extension, the verifier listens for a message of type ",(0,i.kt)("inlineCode",{parentName:"p"},"submit-credential")," in response."),(0,i.kt)("p",null,"When a message is received, decrypt it and check that it has the expected type:"),(0,i.kt)(s.Z,{mdxType:"TsJsSnippet"},"import * as Kilt from '@kiltprotocol/sdk-js'\n\nimport { verify } from './verifyCredential'\n\ntype ListenCallback = (message: Kilt.IEncryptedMessage) => Promise<void>\n\nlet session: { listen: (call: ListenCallback) => ReturnType<ListenCallback> }\nlet receiverSecretKey: Kilt.Utils.Crypto.CryptoInput\n\nexport async function main() {\n  await session.listen(async (message: Kilt.IEncryptedMessage) => {\n    // Create a callback that uses the DID encryption key to decrypt the message.\n    const decryptCallback: Kilt.DecryptCallback = async ({\n      data,\n      nonce,\n      peerPublicKey\n    }) => {\n      const result = Kilt.Utils.Crypto.decryptAsymmetric(\n        { box: data, nonce },\n        peerPublicKey,\n        receiverSecretKey\n      )\n      if (!result) {\n        throw 'Cannot decrypt'\n      }\n      return {\n        data: result\n      }\n    }\n\n    const decryptedMessage = await Kilt.Message.decrypt(\n      message,\n      decryptCallback\n    )\n\n    if (decryptedMessage.body.type !== 'submit-credential') {\n      throw 'Unexpected message type'\n    }\n\n    await verify(decryptedMessage.body.content)\n  })\n}\n"),(0,i.kt)("p",null,"Finally the message content (the credential that was requested) can be verified using the request challenge that was previously stored on the server side.\nThis function will throw if the verification is not successful."),(0,i.kt)(a.Z,{mdxType:"TsJsBlock"},"import * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function verify(credentials: Kilt.ICredentialPresentation[]) {\n  return Kilt.Credential.verifyPresentation(credentials[0])\n}\n"),(0,i.kt)("p",null,"That's it! Your verifier has successfully requested and verified a credential."))}f.isMDXComponent=!0}}]);