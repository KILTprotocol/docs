(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7152],{48952:e=>{function i(e){var i=new Error("Cannot find module '"+e+"'");throw i.code="MODULE_NOT_FOUND",i}i.keys=()=>[],i.resolve=i,i.id=48952,e.exports=i},78408:(e,i,t)=>{"use strict";t.r(i),t.d(i,{assets:()=>h,contentTitle:()=>s,default:()=>f,frontMatter:()=>r,metadata:()=>u,toc:()=>D});var n=t(17624),a=t(4552),o=t(96020);const l="import * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function createSimpleFullDid(\n  submitterAccount: Kilt.KiltKeyringPair,\n  {\n    authentication\n  }: {\n    authentication: Kilt.NewDidVerificationKey\n  },\n  signCallback: Kilt.Did.GetStoreTxSignCallback\n): Promise<Kilt.DidDocument> {\n  const api = Kilt.ConfigService.get('api')\n\n  // Generate the DID-signed creation tx and submit it to the blockchain with the specified account.\n  // The submitter account parameter, ensures that only an entity authorized by the DID subject\n  // can submit the tx to the KILT blockchain.\n  const fullDidCreationTx = await Kilt.Did.getStoreTx(\n    {\n      authentication: [authentication]\n    },\n    submitterAccount.address,\n    signCallback\n  )\n\n  await Kilt.Blockchain.signAndSubmitTx(fullDidCreationTx, submitterAccount)\n\n  // The new information is fetched from the blockchain and returned.\n  const fullDid = Kilt.Did.getFullDidUriFromKey(authentication)\n  const encodedUpdatedDidDetails = await api.call.did.query(\n    Kilt.Did.toChain(fullDid)\n  )\n  return Kilt.Did.linkedInfoFromChain(encodedUpdatedDidDetails).document\n}\n",d="import * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function createCompleteFullDid(\n  submitterAccount: Kilt.KiltKeyringPair,\n  {\n    authentication,\n    keyAgreement,\n    assertionMethod,\n    capabilityDelegation\n  }: {\n    authentication: Kilt.NewDidVerificationKey\n    keyAgreement: Kilt.NewDidEncryptionKey\n    assertionMethod: Kilt.NewDidVerificationKey\n    capabilityDelegation: Kilt.NewDidVerificationKey\n  },\n  signCallback: Kilt.SignExtrinsicCallback\n): Promise<Kilt.DidDocument> {\n  const api = Kilt.ConfigService.get('api')\n\n  const fullDidCreationTx = await Kilt.Did.getStoreTx(\n    {\n      authentication: [authentication],\n      keyAgreement: [keyAgreement],\n      assertionMethod: [assertionMethod],\n      capabilityDelegation: [capabilityDelegation],\n      // Example service.\n      service: [\n        {\n          id: '#my-service',\n          type: ['service-type'],\n          serviceEndpoint: ['https://www.example.com']\n        }\n      ]\n    },\n    submitterAccount.address,\n    signCallback\n  )\n\n  await Kilt.Blockchain.signAndSubmitTx(fullDidCreationTx, submitterAccount)\n\n  // The new information is fetched from the blockchain and returned.\n  const fullDid = Kilt.Did.getFullDidUriFromKey(authentication)\n  const encodedUpdatedDidDetails = await api.call.did.query(\n    Kilt.Did.toChain(fullDid)\n  )\n  return Kilt.Did.linkedInfoFromChain(encodedUpdatedDidDetails).document\n}\n",c="import * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function migrateLightDid(\n  lightDid: Kilt.DidDocument,\n  submitterAccount: Kilt.KiltKeyringPair,\n  signCallback: Kilt.SignExtrinsicCallback\n): Promise<Kilt.DidDocument> {\n  const api = Kilt.ConfigService.get('api')\n\n  // Generate the DID migration tx.\n  const migrationTx = await Kilt.Did.getStoreTx(\n    lightDid,\n    submitterAccount.address,\n    signCallback\n  )\n\n  // The tx can then be submitted by the authorized account as usual.\n  await Kilt.Blockchain.signAndSubmitTx(migrationTx, submitterAccount)\n\n  // The new information is fetched from the blockchain and returned.\n  const migratedFullDidUri = Kilt.Did.getFullDidUri(lightDid.uri)\n  const encodedUpdatedDidDetails = await api.call.did.query(\n    Kilt.Did.toChain(migratedFullDidUri)\n  )\n  return Kilt.Did.linkedInfoFromChain(encodedUpdatedDidDetails).document\n}\n",r={id:"full-did-creation",title:"Create a Full DID"},s=void 0,u={id:"develop/sdk/cookbook/dids/full-did-creation",title:"Create a Full DID",description:"The following is an example of how to create and write on the blockchain a full DID that specifies only an authentication key.",source:"@site/docs/develop/01_sdk/02_cookbook/01_dids/02_full_did_creation.md",sourceDirName:"develop/01_sdk/02_cookbook/01_dids",slug:"/develop/sdk/cookbook/dids/full-did-creation",permalink:"/docs/develop/sdk/cookbook/dids/full-did-creation",draft:!1,unlisted:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/01_sdk/02_cookbook/01_dids/02_full_did_creation.md",tags:[],version:"current",lastUpdatedAt:1713371933,formattedLastUpdatedAt:"Apr 17, 2024",sidebarPosition:2,frontMatter:{id:"full-did-creation",title:"Create a Full DID"},sidebar:"sdk",previous:{title:"Create a Light DID",permalink:"/docs/develop/sdk/cookbook/dids/light-did-creation"},next:{title:"Update a Full DID keys and service endpoints",permalink:"/docs/develop/sdk/cookbook/dids/full-did-update"}},h={},D=[{value:"Upgrade a Light DID to a Full DID",id:"upgrade-a-light-did-to-a-full-did",level:2}];function p(e){const i={h2:"h2",p:"p",...(0,a.M)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.p,{children:"The following is an example of how to create and write on the blockchain a full DID that specifies only an authentication key."}),"\n",(0,n.jsx)(o.c,{children:l}),"\n",(0,n.jsx)(i.p,{children:"If additional keys or services are to be specified, they can be passed as parameters to the creation transaction."}),"\n",(0,n.jsx)(o.c,{children:d}),"\n",(0,n.jsx)(i.h2,{id:"upgrade-a-light-did-to-a-full-did",children:"Upgrade a Light DID to a Full DID"}),"\n",(0,n.jsx)(i.p,{children:"Another way to obtain a full DID is by upgrading a previously-created light DID.\nKILT supports this operation in a way that does not invalidate any credentials that had been issued to the light DID before being upgraded."}),"\n",(0,n.jsx)(i.p,{children:"The following code shows how to migrate a light DID to a full DID.\nCredentials, presentations, and verifications remain unchanged and remain valid."}),"\n",(0,n.jsx)(o.c,{children:c})]})}function f(e={}){const{wrapper:i}={...(0,a.M)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},96020:(e,i,t)=>{"use strict";t.d(i,{c:()=>D});var n=t(11504),a=t(28264),o=t(46352),l=t(58440),d=t(14300),c=t(28168),r=t(61268),s=t(87768),u=t(1608),h=t(17624);const D=e=>{let{children:i,fileName:t,...D}=e;const p=i,[f,m]=(0,n.useState)("# loading code..."),{siteConfig:{customFields:{prettierConfig:g}}}=(0,a.c)(),k=(0,n.useMemo)((()=>{const{code:e}=(0,o.transform)(p,{plugins:["transform-typescript"],retainLines:!0});return e}),[p]);(0,n.useEffect)((()=>{l.E9(k,{parser:"babel",plugins:[d.c,c.cp],...g}).then(m)}),[g,k]);const b=[{fileName:t?`${t}.ts`:void 0,fileContents:p,fileID:"ts",fileLabel:"Typescript"},{fileName:t?`${t}.js`:void 0,fileContents:f,fileID:"js",fileLabel:"Javascript"}];return(0,h.jsx)(h.Fragment,{children:(0,h.jsx)(r.c,{groupId:"ts-js-choice",children:b.map((e=>(0,h.jsx)(s.c,{value:e.fileID,label:e.fileLabel,default:!0,children:(0,h.jsx)(u.c,{...D,className:"language-"+e.fileID,title:e.fileName,children:e.fileContents})})))})})}}}]);