(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7159],{5764:e=>{function n(e){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}n.keys=()=>[],n.resolve=n,n.id=5764,e.exports=n},6229:(e,n,o)=>{"use strict";o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>m});var t=o(4848),a=o(8453),i=o(3172);const r="import * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function queryDidDocument(\n  web3Name: Kilt.Did.Web3Name\n): Promise<Kilt.DidDocument> {\n  const api = Kilt.ConfigService.get('api')\n\n  console.log(`Querying the blockchain for the web3name \"${web3Name}\"`)\n  // Query the owner of the provided web3name.\n  const encodedWeb3NameOwner = await api.call.did.queryByWeb3Name(web3Name)\n\n  // Extract the DidDocument and other linked information from the encodedWeb3NameOwner.\n  const { document } = Kilt.Did.linkedInfoFromChain(encodedWeb3NameOwner)\n\n  return document\n}\n",s={id:"web3name-query",title:"Resolve a web3name"},c=void 0,d={id:"develop/sdk/cookbook/web3names/web3name-query",title:"Resolve a web3name",description:"A web3name can be resolved in a similar manner to how a DID is resolved.",source:"@site/docs/develop/01_sdk/02_cookbook/02_web3names/04_query.md",sourceDirName:"develop/01_sdk/02_cookbook/02_web3names",slug:"/develop/sdk/cookbook/web3names/web3name-query",permalink:"/docs/develop/sdk/cookbook/web3names/web3name-query",draft:!1,unlisted:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/01_sdk/02_cookbook/02_web3names/04_query.md",tags:[],version:"current",lastUpdatedAt:1733496053e3,sidebarPosition:4,frontMatter:{id:"web3name-query",title:"Resolve a web3name"},sidebar:"sdk",previous:{title:"Release a web3name",permalink:"/docs/develop/sdk/cookbook/web3names/web3name-release"},next:{title:"Link an Account to a KILT DID",permalink:"/docs/develop/sdk/cookbook/account_linking/account-link"}},l={},m=[];function u(e){const n={a:"a",code:"code",p:"p",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["A web3name can be resolved in a similar manner to ",(0,t.jsx)(n.a,{href:"/docs/develop/sdk/cookbook/dids/did-query",children:"how a DID is resolved"}),".\nResolving the web3name will provide the same information as resolving a DID does."]}),"\n",(0,t.jsx)(n.p,{children:"To query and retrieve the DID document associated with a web3name, you can use the following code example:"}),"\n",(0,t.jsx)(i.A,{children:r}),"\n",(0,t.jsxs)(n.p,{children:["In the code example above, the ",(0,t.jsx)(n.code,{children:"queryDidDocument"})," function takes a web3Name parameter, which represents the web3name to be resolved.\nIt internally uses the ",(0,t.jsx)(n.code,{children:"api.call.did.queryByWeb3Name"})," method to query the information of the provided web3name from the blockchain."]}),"\n",(0,t.jsxs)(n.p,{children:["The function then decodes the result using ",(0,t.jsx)(n.code,{children:"Kilt.Did.linkedInfoFromChain"})," to extract the associated DID document and any other linked blockchain accounts. Finally, it returns the resolved DID document."]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},3172:(e,n,o)=>{"use strict";o.d(n,{A:()=>h});var t=o(6540),a=o(4586),i=o(6352),r=o(8463),s=o(5283),c=o(6745),d=o(1470),l=o(9365),m=o(1432),u=o(4848);const h=e=>{let{children:n,fileName:o,...h}=e;const p=n,[b,f]=(0,t.useState)("# loading code..."),{siteConfig:{customFields:{prettierConfig:k}}}=(0,a.A)(),w=(0,t.useMemo)((()=>{const{code:e}=(0,i.transform)(p,{plugins:["transform-typescript"],retainLines:!0}),n=["./generateAccount","./generateKeypairs","./ctypeSchema","./createClaim","./generateLightDid","../attester/ctypeSchema","../claimer/generateLightDid","../claimer/generateCredential","./claimer/createPresentation","./claimer/generateKeypairs","./claimer/generateLightDid"];let o=e.replace(/from\s+['"](.+)['"]/g,((e,o)=>n.includes(o)?`from '${o}.js'`:e));return o=o.replace("if (require.main === module)","if (process.argv[1] === new URL(import.meta.url).pathname)"),o}),[p]);(0,t.useEffect)((()=>{r.GP(w,{parser:"babel",plugins:[s.A,c.Ay],...k}).then(f)}),[k,w]);const v=[{fileName:o?`${o}.ts`:void 0,fileContents:p,fileID:"ts",fileLabel:"Typescript"},{fileName:o?`${o}.js`:void 0,fileContents:b,fileID:"js",fileLabel:"Javascript"}];return(0,u.jsx)(u.Fragment,{children:(0,u.jsx)(d.A,{groupId:"ts-js-choice",children:v.map((e=>(0,u.jsx)(l.A,{value:e.fileID,label:e.fileLabel,default:!0,children:(0,u.jsx)(m.A,{...h,className:"language-"+e.fileID,title:e.fileName,children:e.fileContents})})))})})}}}]);