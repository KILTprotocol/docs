(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[779],{5380:e=>{function t(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=()=>[],t.resolve=t,t.id=5380,e.exports=t},6586:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>c,metadata:()=>p,toc:()=>h});var i=n(5893),o=n(1151),r=n(1909);const s="import * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function createDriversLicenseCType(\n  creator: Kilt.DidUri,\n  submitterAccount: Kilt.KiltKeyringPair,\n  signCallback: Kilt.SignExtrinsicCallback\n): Promise<Kilt.ICType> {\n  const api = Kilt.ConfigService.get('api')\n\n  // Create a new CType definition.\n  const ctype = Kilt.CType.fromProperties(`Drivers License by ${creator}`, {\n    name: {\n      type: 'string'\n    },\n    age: {\n      type: 'integer'\n    },\n    id: {\n      type: 'string'\n    }\n  })\n\n  // Generate a creation tx.\n  const encodedCtype = Kilt.CType.toChain(ctype)\n  const ctypeCreationTx = api.tx.ctype.add(encodedCtype)\n  // Sign it with the right DID key.\n  const authorizedCtypeCreationTx = await Kilt.Did.authorizeTx(\n    creator,\n    ctypeCreationTx,\n    signCallback,\n    submitterAccount.address\n  )\n  // Submit the creation tx to the KILT blockchain\n  // using the KILT account specified in the creation operation.\n  await Kilt.Blockchain.signAndSubmitTx(\n    authorizedCtypeCreationTx,\n    submitterAccount\n  )\n\n  return ctype\n}\n",a="import * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function fetchCType(\n  ctypeId: Kilt.ICType['$id']\n): Promise<Kilt.CType.ICTypeDetails> {\n  // Example CType ID: kilt:ctype:0x329a2a5861ea63c250763e5e4c4d4a18fe4470a31e541365c7fb831e5432b940\n  return Kilt.CType.fetchFromChain(ctypeId)\n}\n",c={id:"ctype-creation",title:"Create a CType"},l=void 0,p={id:"develop/sdk/cookbook/claiming/ctype-creation",title:"Create a CType",description:"Every KILT credential has to conform to a CType.",source:"@site/docs/develop/01_sdk/02_cookbook/04_claiming/01_ctype_creation.md",sourceDirName:"develop/01_sdk/02_cookbook/04_claiming",slug:"/develop/sdk/cookbook/claiming/ctype-creation",permalink:"/docs/develop/sdk/cookbook/claiming/ctype-creation",draft:!1,unlisted:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/01_sdk/02_cookbook/04_claiming/01_ctype_creation.md",tags:[],version:"current",lastUpdatedAt:1707906150,formattedLastUpdatedAt:"Feb 14, 2024",sidebarPosition:1,frontMatter:{id:"ctype-creation",title:"Create a CType"},sidebar:"sdk",previous:{title:"Unlink an Account From a KILT DID",permalink:"/docs/develop/sdk/cookbook/account_linking/account-unlink"},next:{title:"Request an Attestation",permalink:"/docs/develop/sdk/cookbook/claiming/attestation-request"}},d={},h=[{value:"Retrieve a CType from its ID",id:"retrieve-a-ctype-from-its-id",level:2}];function y(e){const t={a:"a",admonition:"admonition",h2:"h2",p:"p",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["Every KILT credential has to conform to a CType.\nA CType describes which properties a credential has and what type these properties have.\nCTypes must be registered on the Spiritnet blockchain.\nTo learn more about CTypes, see the ",(0,i.jsx)(t.a,{href:"/docs/concepts/credentials/ctypes",children:"CType concept section"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"The creation of a CType in KILT involves two steps: the definition of a CType and the anchoring of its hash on the KILT blockchain."}),"\n",(0,i.jsx)(t.admonition,{title:"DID required",type:"info",children:(0,i.jsxs)(t.p,{children:["The creator of a CType is required to have a full DID with an attestation key.\nTo see how to manage DIDs, please refer to the ",(0,i.jsx)(t.a,{href:"/docs/develop/sdk/cookbook/dids/full-did-update",children:"DID section"}),"."]})}),"\n",(0,i.jsxs)(t.admonition,{title:"CTypes are unique",type:"info",children:[(0,i.jsx)(t.p,{children:"The creation of a new CType requires the CType hash to be unique.\nBefore writing a new CType, Attesters should check whether there is already an existing CType which matches their requirements."}),(0,i.jsxs)(t.p,{children:["Visit our ",(0,i.jsx)(t.a,{href:"https://github.com/KILTprotocol/ctype-index",children:"CType index repository"})," for a non-exhaustive list of existing CTypes."]})]}),"\n",(0,i.jsx)(t.p,{children:"The following snippets show how to create a CType:"}),"\n",(0,i.jsx)(r.Z,{children:s}),"\n",(0,i.jsx)(t.h2,{id:"retrieve-a-ctype-from-its-id",children:"Retrieve a CType from its ID"}),"\n",(0,i.jsx)(t.p,{children:"CTypes can be queried directly from any KILT archive nodes.\nThe following example shows how to query a CType using the SDK:"}),"\n",(0,i.jsx)(r.Z,{children:a})]})}function u(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(y,{...e})}):y(e)}},1909:(e,t,n)=>{"use strict";n.d(t,{Z:()=>y});var i=n(7294),o=n(2263),r=n(2175),s=n(4935),a=n(4990),c=n(9966),l=n(4866),p=n(5162),d=n(9286),h=n(5893);const y=e=>{let{children:t,fileName:n,...y}=e;const u=t,[f,m]=(0,i.useState)("# loading code..."),{siteConfig:{customFields:{prettierConfig:C}}}=(0,o.Z)(),T=(0,i.useMemo)((()=>{const{code:e}=(0,r.transform)(u,{plugins:["transform-typescript"],retainLines:!0});return e}),[u]);(0,i.useEffect)((()=>{s.WU(T,{parser:"babel",plugins:[a.Z,c.ZP],...C}).then(m)}),[C,T]);const k=[{fileName:n?`${n}.ts`:void 0,fileContents:u,fileID:"ts",fileLabel:"Typescript"},{fileName:n?`${n}.js`:void 0,fileContents:f,fileID:"js",fileLabel:"Javascript"}];return(0,h.jsx)(h.Fragment,{children:(0,h.jsx)(l.Z,{groupId:"ts-js-choice",children:k.map((e=>(0,h.jsx)(p.Z,{value:e.fileID,label:e.fileLabel,default:!0,children:(0,h.jsx)(d.Z,{...y,className:"language-"+e.fileID,title:e.fileName,children:e.fileContents})})))})})}}}]);