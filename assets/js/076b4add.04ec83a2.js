(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9170],{5380:e=>{function t(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=()=>[],t.resolve=t,t.id=5380,e.exports=t},1909:(e,t,n)=>{"use strict";n.d(t,{Z:()=>p});var a=n(7462),i=n(7294),o=n(2263),r=n(3945),s=n(8182),l=n(2175),c=n(4866),d=n(5162),u=n(814);const p=e=>{let{children:t,fileName:n,...p}=e;const h=t,{code:m}=(0,l.transform)(h,{plugins:["transform-typescript"],retainLines:!0}),{siteConfig:{customFields:{prettierConfig:k}}}=(0,o.Z)(),y=(0,r.format)(m,{parser:s.parsers.babel.parse,...k}),D=n?`${n}.ts`:void 0,g=n?`${n}.js`:void 0;return i.createElement(c.Z,{groupId:"ts-js-choice"},i.createElement(d.Z,{value:"ts",label:"Typescript",default:!0},i.createElement(u.Z,(0,a.Z)({},p,{className:"language-ts",title:D}),h)),i.createElement(d.Z,{value:"js",label:"Javascript"},i.createElement(u.Z,(0,a.Z)({},p,{className:"language-js",title:g}),y)))}},8995:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>u,default:()=>D,frontMatter:()=>d,metadata:()=>p,toc:()=>m});var a=n(7462),i=(n(7294),n(3905)),o=(n(814),n(1909)),r=n(4866),s=n(5162);const l="import * as Kilt from '@kiltprotocol/sdk-js'\n\nimport { mnemonicGenerate } from '@polkadot/util-crypto'\n\nexport function generateKeypairs(mnemonic = mnemonicGenerate()): {\n  authentication: Kilt.KiltKeyringPair\n  keyAgreement: Kilt.KiltEncryptionKeypair\n  assertionMethod: Kilt.KiltKeyringPair\n  capabilityDelegation: Kilt.KiltKeyringPair\n} {\n  const authentication = Kilt.Utils.Crypto.makeKeypairFromUri(mnemonic)\n\n  const assertionMethod = Kilt.Utils.Crypto.makeKeypairFromUri(mnemonic)\n\n  const capabilityDelegation = Kilt.Utils.Crypto.makeKeypairFromUri(mnemonic)\n\n  const keyAgreement = Kilt.Utils.Crypto.makeEncryptionKeypairFromSeed(\n    Kilt.Utils.Crypto.mnemonicToMiniSecret(mnemonic)\n  )\n\n  return {\n    authentication: authentication,\n    keyAgreement: keyAgreement,\n    assertionMethod: assertionMethod,\n    capabilityDelegation: capabilityDelegation\n  }\n}\n",c="import { config as envConfig } from 'dotenv'\n\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nimport { generateAccount } from './generateAccount'\nimport { generateKeypairs } from './generateKeypairs'\n\nexport async function createFullDid(\n  submitterAccount: Kilt.KiltKeyringPair\n): Promise<{\n  mnemonic: string\n  fullDid: Kilt.DidDocument\n}> {\n  const api = Kilt.ConfigService.get('api')\n\n  const mnemonic = Kilt.Utils.Crypto.mnemonicGenerate()\n  const {\n    authentication,\n    keyAgreement,\n    assertionMethod,\n    capabilityDelegation\n  } = generateKeypairs(mnemonic)\n  // Get tx that will create the DID on chain and DID-URI that can be used to resolve the DID Document.\n  const fullDidCreationTx = await Kilt.Did.getStoreTx(\n    {\n      authentication: [authentication],\n      keyAgreement: [keyAgreement],\n      assertionMethod: [assertionMethod],\n      capabilityDelegation: [capabilityDelegation]\n    },\n    submitterAccount.address,\n    async ({ data }) => ({\n      signature: authentication.sign(data),\n      keyType: authentication.type\n    })\n  )\n\n  await Kilt.Blockchain.signAndSubmitTx(fullDidCreationTx, submitterAccount)\n\n  const didUri = Kilt.Did.getFullDidUriFromKey(authentication)\n  const encodedFullDid = await api.call.did.query(Kilt.Did.toChain(didUri))\n  const { document } = Kilt.Did.linkedInfoFromChain(encodedFullDid)\n\n  if (!document) {\n    throw new Error('Full DID was not successfully created.')\n  }\n\n  return { mnemonic, fullDid: document }\n}\n\n// Don't execute if this is imported by another file.\nif (require.main === module) {\n  ;(async () => {\n    envConfig()\n\n    try {\n      await Kilt.connect(process.env.WSS_ADDRESS as string)\n\n      // Load attester account\n      const accountMnemonic = process.env.ATTESTER_ACCOUNT_MNEMONIC as string\n      const { account } = generateAccount(accountMnemonic)\n      const { mnemonic, fullDid } = await createFullDid(account)\n\n      console.log('\\nsave following to .env to continue\\n')\n      console.error(`ATTESTER_DID_MNEMONIC=\"${mnemonic}\"\\n`)\n      console.error(`ATTESTER_DID_URI=\"${fullDid.uri}\"\\n`)\n    } catch (e) {\n      console.log('Error while creating attester DID')\n      throw e\n    }\n  })()\n}\n",d={id:"did",title:"DID"},u=void 0,p={unversionedId:"develop/workshop/attester/did",id:"develop/workshop/attester/did",title:"DID",description:"The next step is to generate a KILT decentralized identifier (DID) using the account you created for the Attester in the previous step.",source:"@site/docs/develop/03_workshop/04_attester/02_did.md",sourceDirName:"develop/03_workshop/04_attester",slug:"/develop/workshop/attester/did",permalink:"/docs/develop/workshop/attester/did",draft:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/03_workshop/04_attester/02_did.md",tags:[],version:"current",lastUpdatedAt:1701504096,formattedLastUpdatedAt:"Dec 2, 2023",sidebarPosition:2,frontMatter:{id:"did",title:"DID"},sidebar:"workshop",previous:{title:"Account",permalink:"/docs/develop/workshop/attester/account"},next:{title:"CType",permalink:"/docs/develop/workshop/attester/ctype"}},h={},m=[{value:"Light and full DIDs",id:"light-and-full-dids",level:2},{value:"What&#39;s the difference between a DID and an account?",id:"whats-the-difference-between-a-did-and-an-account",level:2},{value:"Create a DID",id:"create-a-did",level:2},{value:"Generate key pairs",id:"generate-key-pairs",level:3},{value:"Write DID to chain",id:"write-did-to-chain",level:3},{value:"Run the code",id:"run-the-code",level:2}],k={toc:m},y="wrapper";function D(e){let{components:t,...n}=e;return(0,i.kt)(y,(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The next step is to generate a KILT decentralized identifier (DID) using the account you created for the ",(0,i.kt)("span",{className:"label-role attester"},"Attester")," in ",(0,i.kt)("a",{parentName:"p",href:"/docs/develop/workshop/attester/account"},"the previous step"),"."),(0,i.kt)("p",null,"A DID may represent any entity, such as a person, an organization, or a machine."),(0,i.kt)("p",null,"A DID is a string uniquely identifying each KILT user.\nYou can store information about a DID on the KILT chain, which is useful for different use cases."),(0,i.kt)("p",null,"One use case is messaging.\nYou could store a public encryption key and a service on chain, and a user can query both using a DID.\nOther users can now encrypt messages using your public encryption key and send a message to your service."),(0,i.kt)("h2",{id:"light-and-full-dids"},"Light and full DIDs"),(0,i.kt)("p",null,"Kilt supports two DID types: ",(0,i.kt)("strong",{parentName:"p"},"light")," and ",(0,i.kt)("strong",{parentName:"p"},"full"),"."),(0,i.kt)("p",null,"There are many differences between the two types, but the most crucial is that you can use a light DID offline, but a full DID needs access to the blockchain to work.\nRead the ",(0,i.kt)("a",{parentName:"p",href:"/docs/develop/sdk/cookbook/dids/light-did-creation"},"DID documentation")," to learn more about the difference between the light and full types."),(0,i.kt)("admonition",{title:"KILT DID",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"There are four different key types that a DID supports:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"An ",(0,i.kt)("em",{parentName:"li"},"authentication key pair"),", used to sign claims and present authenticated credentials "),(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("em",{parentName:"li"},"key-agreement key pair"),", used to encrypt/decrypt messages"),(0,i.kt)("li",{parentName:"ul"},"An ",(0,i.kt)("em",{parentName:"li"},"assertion-method key pair"),", used to write CTypes and attestations on chain"),(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("em",{parentName:"li"},"capability-delegation key pair"),", used to write delegations on chain")),(0,i.kt)("p",{parentName:"admonition"},"You can replace keys over time, e.g., if a key becomes compromised.")),(0,i.kt)("h2",{id:"whats-the-difference-between-a-did-and-an-account"},"What's the difference between a DID and an account?"),(0,i.kt)("p",null,"A DID and an account sound quite similar, but there are some differences:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"You record both to chain"),(0,i.kt)("li",{parentName:"ul"},"You can have a DID without an account"),(0,i.kt)("li",{parentName:"ul"},"You can have an account without a DID"),(0,i.kt)("li",{parentName:"ul"},"Only an account can pay deposits and fees and attest claims"),(0,i.kt)("li",{parentName:"ul"},"DIDs don't hold any coins")),(0,i.kt)("p",null,"In summary, you register a DID on the blockchain by an account submitting the DID creation transaction and paying the fees."),(0,i.kt)("h2",{id:"create-a-did"},"Create a DID"),(0,i.kt)("p",null,"As an ",(0,i.kt)("span",{className:"label-role attester"},"Attester")," needs to interact with the chain, you must create a full DID."),(0,i.kt)("h3",{id:"generate-key-pairs"},"Generate key pairs"),(0,i.kt)("p",null,"An ",(0,i.kt)("span",{className:"label-role attester"},"Attester")," needs an authentication and attestation key at minimum.\nSince three of the key types sign transactions, you can use the same key for them using the default KILT keyring to generate them, which is the same keyring used to generate accounts."),(0,i.kt)("p",null,"Add the following code to the ",(0,i.kt)("inlineCode",{parentName:"p"},"attester/generateKeypairs")," file."),(0,i.kt)(o.Z,{fileName:"attester/generateKeypairs",mdxType:"TsJsBlock"},l),(0,i.kt)("p",null,"Throughout the code are ",(0,i.kt)("inlineCode",{parentName:"p"},"account.derive")," methods that use key derivation syntax. You can read more about this syntax in ",(0,i.kt)("a",{parentName:"p",href:"https://docs.substrate.io/reference/command-line-tools/subkey/#working-with-derived-keys"},"the Substrate documentation"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"generateKeypairs")," function code derives base and sub keys from a particular path relevant to the use case for each key.\nIt uses the sr25519 key type, which is the default key type for KILT."),(0,i.kt)("p",null,"This method works for three of the four key types needed, so the ",(0,i.kt)("inlineCode",{parentName:"p"},"generateKeyAgreement")," function helps generate the key-agreement key pair using the mnemonic.\nThe function takes the mnemonic and creates another key pair from it using the ",(0,i.kt)("inlineCode",{parentName:"p"},"sr25519PairFromSeed(mnemonicToMiniSecret(mnemonic))")," combination of functions.\nThe function then creates a secret key based on the earlier temporary key pair and a derivation path relevant to key agreement."),(0,i.kt)("p",null,"The function returns the key pair needed by generating one more key pair suitable for encryption and decryption using the secret key."),(0,i.kt)("h3",{id:"write-did-to-chain"},"Write DID to chain"),(0,i.kt)("p",null,"Once you have created all the necessary keys for a DID, you can create the on-chain DID.\nTo create a DID, load the account created in the ",(0,i.kt)("a",{parentName:"p",href:"/docs/develop/workshop/attester/account"},"last section")," and use it to pay for the DID registration.\nCreate and submit the extrinsic (aka transaction) that registers the DID."),(0,i.kt)(o.Z,{fileName:"attester/generateDid",mdxType:"TsJsBlock"},c),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"createFullDid")," function takes the key pair generated for the submitter in the previous step and creates a full DID. It returns a mnemonic as a string and DID document.\nInside the function, the ",(0,i.kt)("inlineCode",{parentName:"p"},"getStoreTx")," method creates a DID creation operation based on the four key pairs created earlier.\nIt returns the extrinsic (aka transaction) that registers the DID."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"signAndSubmitTx")," method takes that extrinsic and submits it to the chain, also passing the submitter's account."),(0,i.kt)("h2",{id:"run-the-code"},"Run the code"),(0,i.kt)("p",null,"Now run the code with:"),(0,i.kt)(r.Z,{groupId:"ts-js-choice",mdxType:"Tabs"},(0,i.kt)(s.Z,{value:"ts",label:"Typescript",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn ts-node ./attester/generateDid.ts\n"))),(0,i.kt)(s.Z,{value:"js",label:"Javascript",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"node ./attester/generateDid.js\n")))),(0,i.kt)("p",null,"Once you have run the script, the output should provide you with your ",(0,i.kt)("inlineCode",{parentName:"p"},"ATTESTER_DID_MNEMONIC")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"ATTESTER_DID_URI"),".\nThe output should look like the following, but not identical since the DIDs are constructed from your account:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'ATTESTER_DID_MNEMONIC="beyond large galaxy\u2026\nATTESTER_DID_URI="did:kilt:4ohMvUHsyeD\u2026"\n')),(0,i.kt)("p",null,"Save it in the ",(0,i.kt)("inlineCode",{parentName:"p"},".env")," file, which should now look like the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-env",metastring:'title=".env"',title:'".env"'},'WSS_ADDRESS=wss://peregrine.kilt.io\n\nATTESTER_ACCOUNT_MNEMONIC="warrior icon use cry...\nATTESTER_ACCOUNT_ADDRESS=4ohMvUHsyeDhMVZF...\nATTESTER_DID_MNEMONIC="beyond large galaxy...\nATTESTER_DID_URI="did:kilt:4ohMvUHsyeD..."\n')),(0,i.kt)("p",null,"Well done - You've generated a full DID! The next step is to create a CType!"))}D.isMDXComponent=!0}}]);