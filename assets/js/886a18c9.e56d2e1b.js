(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4823],{5764:n=>{function e(n){var e=new Error("Cannot find module '"+n+"'");throw e.code="MODULE_NOT_FOUND",e}e.keys=()=>[],e.resolve=e,e.id=5764,n.exports=e},2054:(n,e,t)=>{"use strict";t.r(e),t.d(e,{assets:()=>k,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>u,toc:()=>p});var i=t(4848),o=t(8453),c=t(3172);const a="import * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function unlinkAccountFromDid(\n  did: Kilt.DidUri,\n  submitterAccount: Kilt.KiltKeyringPair,\n  linkedAccountAddress: Kilt.KiltAddress,\n  signCallback: Kilt.SignExtrinsicCallback\n): Promise<void> {\n  const api = Kilt.ConfigService.get('api')\n\n  // The DID owner removes the link between itself and the specified account.\n  const accountUnlinkTx = api.tx.didLookup.removeAccountAssociation({\n    AccountId32: linkedAccountAddress\n  })\n  const authorizedAccountUnlinkTx = await Kilt.Did.authorizeTx(\n    did,\n    accountUnlinkTx,\n    signCallback,\n    submitterAccount.address\n  )\n\n  await Kilt.Blockchain.signAndSubmitTx(\n    authorizedAccountUnlinkTx,\n    submitterAccount\n  )\n}\n",s="import * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function unlinkDidFromAccount(\n  linkOwnerAccount: Kilt.KeyringPair\n): Promise<void> {\n  const api = Kilt.ConfigService.get('api')\n\n  // The tx does not need to be authorized by a DID, but the submitter account removes its own link.\n  const accountUnlinkTx = api.tx.didLookup.removeSenderAssociation()\n\n  await Kilt.Blockchain.signAndSubmitTx(accountUnlinkTx, linkOwnerAccount)\n}\n",r="import * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function reclaimLinkDeposit(\n  submitterAddress: Kilt.KeyringPair,\n  linkedAccountAddress: Kilt.KiltAddress\n): Promise<void> {\n  const api = Kilt.ConfigService.get('api')\n\n  // The tx does not need to be authorized by a DID, but the deposit payer's account claims the deposit and removes the link.\n  const accountUnlinkTx = api.tx.didLookup.reclaimDeposit({\n    AccountId32: linkedAccountAddress\n  })\n\n  await Kilt.Blockchain.signAndSubmitTx(accountUnlinkTx, submitterAddress)\n}\n",l={id:"account-unlink",title:"Unlink an Account From a KILT DID"},d=void 0,u={id:"develop/sdk/cookbook/account_linking/account-unlink",title:"Unlink an Account From a KILT DID",description:"Similar to the way a new account to DID link is created, removing a link can happen in one of three ways:",source:"@site/docs/develop/01_sdk/02_cookbook/03_account_linking/03_unlink.md",sourceDirName:"develop/01_sdk/02_cookbook/03_account_linking",slug:"/develop/sdk/cookbook/account_linking/account-unlink",permalink:"/docs/develop/sdk/cookbook/account_linking/account-unlink",draft:!1,unlisted:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/01_sdk/02_cookbook/03_account_linking/03_unlink.md",tags:[],version:"current",lastUpdatedAt:1733496053e3,sidebarPosition:3,frontMatter:{id:"account-unlink",title:"Unlink an Account From a KILT DID"},sidebar:"sdk",previous:{title:"Query the web3name of an Account",permalink:"/docs/develop/sdk/cookbook/account_linking/account-name"},next:{title:"Create a CType",permalink:"/docs/develop/sdk/cookbook/claiming/ctype-creation"}},k={},p=[];function m(n){const e={li:"li",ol:"ol",p:"p",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.p,{children:"Similar to the way a new account to DID link is created, removing a link can happen in one of three ways:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"The DID owner submits a transaction indicating which account to unlink:"}),"\n"]}),"\n",(0,i.jsx)(c.A,{children:a}),"\n",(0,i.jsxs)(e.ol,{start:"2",children:["\n",(0,i.jsx)(e.li,{children:"The linked account submits a transaction indicating that the link with the DID should be removed:"}),"\n"]}),"\n",(0,i.jsx)(c.A,{children:s}),"\n",(0,i.jsxs)(e.ol,{start:"3",children:["\n",(0,i.jsx)(e.li,{children:"The deposit payer submits a transaction indicating that they want to reclaim their deposit, which in turn removes the existing link between the specified account and DID:"}),"\n"]}),"\n",(0,i.jsx)(c.A,{children:r})]})}function h(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(m,{...n})}):m(n)}},3172:(n,e,t)=>{"use strict";t.d(e,{A:()=>p});var i=t(6540),o=t(4586),c=t(6352),a=t(8463),s=t(5283),r=t(6745),l=t(1470),d=t(9365),u=t(1432),k=t(4848);const p=n=>{let{children:e,fileName:t,...p}=n;const m=e,[h,g]=(0,i.useState)("# loading code..."),{siteConfig:{customFields:{prettierConfig:f}}}=(0,o.A)(),A=(0,i.useMemo)((()=>{const{code:n}=(0,c.transform)(m,{plugins:["transform-typescript"],retainLines:!0}),e=["./generateAccount","./generateKeypairs","./ctypeSchema","./createClaim","./generateLightDid","../attester/ctypeSchema","../claimer/generateLightDid","../claimer/generateCredential","./claimer/createPresentation","./claimer/generateKeypairs","./claimer/generateLightDid"];let t=n.replace(/from\s+['"](.+)['"]/g,((n,t)=>e.includes(t)?`from '${t}.js'`:n));return t=t.replace("if (require.main === module)","if (process.argv[1] === new URL(import.meta.url).pathname)"),t}),[m]);(0,i.useEffect)((()=>{a.GP(A,{parser:"babel",plugins:[s.A,r.Ay],...f}).then(g)}),[f,A]);const b=[{fileName:t?`${t}.ts`:void 0,fileContents:m,fileID:"ts",fileLabel:"Typescript"},{fileName:t?`${t}.js`:void 0,fileContents:h,fileID:"js",fileLabel:"Javascript"}];return(0,k.jsx)(k.Fragment,{children:(0,k.jsx)(l.A,{groupId:"ts-js-choice",children:b.map((n=>(0,k.jsx)(d.A,{value:n.fileID,label:n.fileLabel,default:!0,children:(0,k.jsx)(u.A,{...p,className:"language-"+n.fileID,title:n.fileName,children:n.fileContents})})))})})}}}]);