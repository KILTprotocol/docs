(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1830],{5380:t=>{function e(t){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}e.keys=()=>[],e.resolve=e,e.id=5380,t.exports=e},1909:(t,e,i)=>{"use strict";i.d(e,{Z:()=>p});var n=i(7462),o=i(7294),a=i(2263),s=i(3945),d=i(8182),c=i(2175),l=i(5488),r=i(5162),u=i(6823);const p=t=>{let{children:e,fileName:i,...p}=t;const h=e,{code:m}=(0,c.transform)(h,{plugins:["transform-typescript"],retainLines:!0}),{siteConfig:{customFields:{prettierConfig:b}}}=(0,a.Z)(),k=(0,s.format)(m,{parser:d.parsers.babel.parse,...b}),f=i?`${i}.ts`:void 0,g=i?`${i}.js`:void 0;return o.createElement(l.Z,{groupId:"ts-js-choice"},o.createElement(r.Z,{value:"ts",label:"Typescript",default:!0},o.createElement(u.Z,(0,n.Z)({},p,{className:"language-ts",title:f}),h)),o.createElement(r.Z,{value:"js",label:"Javascript"},o.createElement(u.Z,(0,n.Z)({},p,{className:"language-js",title:g}),k)))}},8632:(t,e,i)=>{"use strict";i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>d,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>r});var n=i(7462),o=(i(7294),i(3905)),a=i(1909);const s={id:"full-did-batch",title:"Sign Extrinsics With a Full DID"},d=void 0,c={unversionedId:"develop/sdk/cookbook/dids/full-did-batch",id:"develop/sdk/cookbook/dids/full-did-batch",title:"Sign Extrinsics With a Full DID",description:"Full DIDs can also be used to batch multiple extrinsics that require the signature of the DID subject.",source:"@site/docs/develop/01_sdk/02_cookbook/01_dids/04_full_did_batch.md",sourceDirName:"develop/01_sdk/02_cookbook/01_dids",slug:"/develop/sdk/cookbook/dids/full-did-batch",permalink:"/docs/develop/sdk/cookbook/dids/full-did-batch",draft:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/01_sdk/02_cookbook/01_dids/04_full_did_batch.md",tags:[],version:"current",lastUpdatedAt:1673884454,formattedLastUpdatedAt:"Jan 16, 2023",sidebarPosition:4,frontMatter:{id:"full-did-batch",title:"Sign Extrinsics With a Full DID"},sidebar:"sdk",previous:{title:"Update a Full DID",permalink:"/docs/develop/sdk/cookbook/dids/full-did-update"},next:{title:"Resolve a DID",permalink:"/docs/develop/sdk/cookbook/dids/did-query"}},l={},r=[],u={toc:r};function p(t){let{components:e,...i}=t;return(0,o.kt)("wrapper",(0,n.Z)({},u,i,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Full DIDs can also be used to batch multiple extrinsics that require the signature of the DID subject.\nFor instance, a batch could include the creation of two different CTypes in the same operation.\nThis would save the user the time of producing one additional block and generating one additional signature, as multiple extrinsics are batched and signed at once, and they are submitted and executed in the same block.\nFor more information, see the ",(0,o.kt)("a",{parentName:"p",href:"https://paritytech.github.io/substrate/master/pallet_utility/pallet/struct.Pallet.html"},"official Substrate documentation"),"."),(0,o.kt)("p",null,"An example of a batched creation of two CTypes using the ",(0,o.kt)("inlineCode",{parentName:"p"},"authorizeBatch")," is provided below."),(0,o.kt)(a.Z,{mdxType:"TsJsBlock"},"import * as Kilt from '@kiltprotocol/sdk-js'\n\nfunction getRandomCType(): Kilt.ICType {\n  // Random factor ensures that each created CType is unique and does not already exist on chain.\n  const randomFactor = Kilt.Utils.UUID.generate()\n  return Kilt.CType.fromProperties(`CType ${randomFactor}`, {\n    name: {\n      type: 'string'\n    },\n    age: {\n      type: 'integer'\n    }\n  })\n}\n\nexport async function batchCTypeCreationExtrinsics(\n  submitterAccount: Kilt.KiltKeyringPair,\n  fullDid: Kilt.DidUri,\n  signCallback: Kilt.SignExtrinsicCallback\n): Promise<void> {\n  const api = Kilt.ConfigService.get('api')\n\n  // Create two random demo CTypes.\n  const ctype1 = getRandomCType()\n  const ctype1CreationTx = api.tx.ctype.add(Kilt.CType.toChain(ctype1))\n  const ctype2 = getRandomCType()\n  const ctype2CreationTx = api.tx.ctype.add(Kilt.CType.toChain(ctype2))\n\n  // Create the DID-signed batch.\n  const authorizedBatch = await Kilt.Did.authorizeBatch({\n    batchFunction: api.tx.utility.batchAll,\n    did: fullDid,\n    extrinsics: [ctype1CreationTx, ctype2CreationTx],\n    sign: signCallback,\n    submitter: submitterAccount.address\n  })\n\n  // The authorized account submits the batch to the chain.\n  await Kilt.Blockchain.signAndSubmitTx(authorizedBatch, submitterAccount)\n}\n"))}p.isMDXComponent=!0}}]);