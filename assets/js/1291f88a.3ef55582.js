"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7112],{17584:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>h});var i=t(17624),o=t(4552),r=t(61268),a=t(87768);const s={id:"dapp-developer",title:"Dapp developer"},c=void 0,l={id:"concepts/dip/dapp-developer",title:"Dapp developer",description:"The Decentralized Identity Provider (DIP) SDK helps Dapp developers build DIP functionality into their apps.",source:"@site/docs/concepts/07_dip/05_dapp_developer.md",sourceDirName:"concepts/07_dip",slug:"/concepts/dip/dapp-developer",permalink:"/docs/concepts/dip/dapp-developer",draft:!1,unlisted:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/concepts/07_dip/05_dapp_developer.md",tags:[],version:"current",lastUpdatedAt:1717145747,formattedLastUpdatedAt:"May 31, 2024",sidebarPosition:5,frontMatter:{id:"dapp-developer",title:"Dapp developer"},sidebar:"concepts",previous:{title:"Enabling DIP for user accounts on the KILT blockchain",permalink:"/docs/concepts/dip/dip-accounts-kilt"},next:{title:"KILT Messaging",permalink:"/docs/concepts/messaging"}},d={},h=[{value:"Installation",id:"installation",level:2},{value:"Example application",id:"example-application",level:2},{value:"1. Generate a base proof",id:"1-generate-a-base-proof",level:3},{value:"2. Generate a submittable extrinsic",id:"2-generate-a-submittable-extrinsic",level:3},{value:"3. Linking accounts (optional)",id:"3-linking-accounts-optional",level:3},{value:"Creating extensions for specific proofs",id:"creating-extensions-for-specific-proofs",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.admonition,{title:"DIP",type:"version-label"}),"\n",(0,i.jsx)(n.p,{children:"The Decentralized Identity Provider (DIP) SDK helps Dapp developers build DIP functionality into their apps."}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(n.p,{children:"Add the SDK as a dependency:"}),"\n",(0,i.jsxs)(r.c,{groupId:"npm2yarn",children:[(0,i.jsx)(a.c,{value:"npm",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install @kiltprotocol/dip-sdk\n"})})}),(0,i.jsx)(a.c,{value:"yarn",label:"Yarn",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"yarn add @kiltprotocol/dip-sdk\n"})})}),(0,i.jsx)(a.c,{value:"pnpm",label:"pnpm",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pnpm add @kiltprotocol/dip-sdk\n"})})})]}),"\n",(0,i.jsx)(n.p,{children:"Import the SDK into your code:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { * } from '@kiltprotocol/dip-sdk'\n"})}),"\n",(0,i.jsx)(n.h2,{id:"example-application",children:"Example application"}),"\n",(0,i.jsx)(n.p,{children:"This example application walks through the code you can find in the tests for the DIP SDK."}),"\n",(0,i.jsx)(n.h3,{id:"1-generate-a-base-proof",children:"1. Generate a base proof"}),"\n",(0,i.jsxs)(n.p,{children:["Start by generating the base proof for the DIP using the ",(0,i.jsx)(n.code,{children:"[generateDipSiblingBaseProof](https://kiltprotocol.github.io/dip-sdk/functions/generateDipSiblingBaseProof.html)"})," method and passing the desired configuration:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const baseDipProof = await DipSdk.generateDipSiblingBaseProof(config)\n"})}),"\n",(0,i.jsx)(n.admonition,{title:"What's a base proof?",type:"info",children:(0,i.jsx)(n.p,{children:"A base proof is a cross-chain state proof, revealing the parts of a DID Document stored on the KILT blockchain."})}),"\n",(0,i.jsx)(n.p,{children:"The configuration for the base proof takes the following parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"didUri"}),": (Required) The DID URI of the DIP subject performing the cross-chain operation.\nFor example, ",(0,i.jsx)(n.code,{children:"did:kilt:4q4QzFTs9hKh4QizLB3B7zuGYCG3QPamiBFEgwM6gTM7gK3g"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"keyIds"}),": (Required) An array of verification method IDs of the DID revealed in the cross-chain operation."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"proofVersion"}),": (Required) The version of the DIP proof to generate.\nCurrently only supports version 1."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"blockNumber"}),": The block number of the relay chain to use for the generation of the DIP proof.\nIf not provided, uses the last finalized block."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"linkedAccounts"}),": An array of ",(0,i.jsx)(n.a,{href:"/docs/develop/sdk/cookbook/account_linking/account-link##linking-an-account-to-a-did",children:"account addresses linked to the DID"})," to reveal in the generated proof."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"web3Name"}),": Whether to reveal ",(0,i.jsx)(n.a,{href:"/docs/develop/sdk/cookbook/web3names/web3name-claim",children:"the web3name of the DID subject"})," in the generated proof."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["In the example code, the configuration also has extra parameters for the time-bound DID signature extension ",(0,i.jsx)(n.a,{href:"#creating-extensions-for-specific-proofs",children:"mentioned below"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"The configuration also has details of the provider, which in this case uses a value populated from an environment variable:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const providerAddress = `ws://127.0.0.1:${process.env['PROVIDER_ALICE_RPC']}`\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-generate-a-submittable-extrinsic",children:"2. Generate a submittable extrinsic"}),"\n",(0,i.jsxs)(n.p,{children:["The method returns the DID base proof.\nYou have to call a second method, the ",(0,i.jsx)(n.code,{children:"[generateDipSubmittableExtrinsic](https://kiltprotocol.github.io/dip-sdk/functions/generateDipSubmittableExtrinsic.html)"})," method to generate a submittable extrinsic that includes the generated proof."]}),"\n",(0,i.jsx)(n.p,{children:"You need to pass the following parameters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The API of the consumer chain."}),"\n",(0,i.jsx)(n.li,{children:"The base proof."}),"\n",(0,i.jsx)(n.li,{children:"The call to the consumer chain."}),"\n",(0,i.jsx)(n.li,{children:"The DID URI."}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{title:"Submittable extrinsics",type:"info",children:(0,i.jsx)(n.p,{children:"A transaction that originates from an external account and affects the state of the blockchain.\nAn extrinisc executes actions on the network, such as transferring funds, making governance decisions, using functionality of the parachain, or interacting with smart contracts."})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const dipSubmittable = DipSdk.generateDipSubmittableExtrinsic({\n    api: consumerApi,\n    baseDipProof,\n    call,\n    didUri: did.uri,\n})\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The method returns the different components of the proof, ",(0,i.jsx)(n.a,{href:"https://github.com/KILTprotocol/dip-sdk/blob/9ad141b3757e076744ab8b2d29bcf10bbeaddd9f/tests/dip-provider-template-dip-consumer-template/develop.test.ts#L219",children:"which you can see in the example code"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The provider head proof, which is proof of the provider parachain header on the relay chain."}),"\n",(0,i.jsx)(n.li,{children:"The commitment proof, which proves the DIP commitment for the subject of the action, which is the DID URI."}),"\n",(0,i.jsx)(n.li,{children:"The DID proof, which reveals parts of the DID document as specified by key IDs, proof version, and whether to include the web3name and any of its linked accounts."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Behind the scenes, the method uses the ",(0,i.jsx)(n.code,{children:"dispatchAs"})," method (",(0,i.jsx)(n.a,{href:"https://github.com/KILTprotocol/kilt-node/blob/4ddb8a0ef6258873458f19d3ee9dcb6d7c24e645/pallets/did/src/lib.rs#L1152",children:"and corresponding chain method"}),") to pass the extrinsic following the consumer's type registry.\nYou can now sign and submit to the consumer chain."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"await signAndSubmitTx(consumerApi, dipSubmittable, submitterKeypair)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-linking-accounts-optional",children:"3. Linking accounts (optional)"}),"\n",(0,i.jsx)(n.p,{children:"Linked accounts let you specify which accounts you want to prove that you control when you make the cross-chain proof.\nAs part of the proof provided, you can also include other values, such as the web3name."}),"\n",(0,i.jsxs)(n.p,{children:["For all the accounts you want to link, use the ",(0,i.jsx)(n.code,{children:"associateAccountToChainArgs"})," method, ",(0,i.jsx)(n.a,{href:"/docs/develop/sdk/cookbook/account_linking/account-link##linking-an-account-to-a-did",children:"as detailed in this guide"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["You can then batch all the linked account transactions and authorize them using the ",(0,i.jsx)(n.code,{children:"authorizeTx"})," method."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const signedLinkedAccounts = await Kilt.Did.authorizeTx(\n    newFullDidUri,\n    providerApi.tx.utility.batchAll(linkAccountTxs),\n    signCallback,\n    newSubmitterKeypair.address as KiltAddress,\n    { txCounter: new BN(4) }\n)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"creating-extensions-for-specific-proofs",children:"Creating extensions for specific proofs"}),"\n",(0,i.jsxs)(n.p,{children:["If you need a specific proof type for a consumer chain, then a chain developer needs to submit a PR to the SDK repository in the ",(0,i.jsx)(n.code,{children:"src > dipProof > extensions"})," folder.\nThe extension included with the SDK adds support for a time-bound DID signature, i.e., a signature which is valid only until a certain block number on the consumer chain."]}),"\n",(0,i.jsxs)(n.p,{children:["The extension can take any form, but must return ",(0,i.jsx)(n.a,{href:"https://docs.substrate.io/reference/scale-codec/",children:"a SCALE encoded"})," object.\nThere's an example of how the extension does this ",(0,i.jsx)(n.a,{href:"https://github.com/KILTprotocol/dip-sdk/blob/9ad141b3757e076744ab8b2d29bcf10bbeaddd9f/src/dipProof/extensions/timeBoundDidSignature.ts#L113",children:"on GitHub"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["To add the extension, use the ",(0,i.jsx)(n.code,{children:"generateDipSubmittableExtrinsic"})," method and pass the additional proof elements along with consumer chain specific components."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const dipSubmittable = DipSdk.generateDipSubmittableExtrinsic({\n    additionalProofElements:\n        DipSdk.dipProof.extensions.timeBoundDidSignature.toChain(\n            crossChainDidSignature\n        ),\n    api: consumerApi,\n    baseDipProof,\n    call,\n    didUri: did.uri,\n})\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Read the auto-generated ",(0,i.jsx)(n.a,{href:"https://kiltprotocol.github.io/dip-sdk",children:"API documentation"})," for more details on the methods the SDK provides."]})})]})}function p(e={}){const{wrapper:n}={...(0,o.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},87768:(e,n,t)=>{t.d(n,{c:()=>a});t(11504);var i=t(65456);const o={tabItem:"tabItem_Ymn6"};var r=t(17624);function a(e){let{children:n,hidden:t,className:a}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,i.c)(o.tabItem,a),hidden:t,children:n})}},61268:(e,n,t)=>{t.d(n,{c:()=>D});var i=t(11504),o=t(65456),r=t(53943),a=t(55592),s=t(95288),c=t(10632),l=t(27128),d=t(21148);function h(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:o}}=e;return{value:n,label:t,attributes:i,default:o}}))}(t);return function(e){const n=(0,l.w)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:t}=e;const o=(0,a.Uz)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c._M)(r),(0,i.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(o.location.search);n.set(r,e),o.replace({...o.location,search:n.toString()})}),[r,o])]}function m(e){const{defaultValue:n,queryString:t=!1,groupId:o}=e,r=u(e),[a,c]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=t.find((e=>e.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:r}))),[l,h]=f({queryString:t,groupId:o}),[m,b]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[o,r]=(0,d.IN)(t);return[o,(0,i.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:o}),x=(()=>{const e=l??m;return p({value:e,tabValues:r})?e:null})();(0,s.c)((()=>{x&&c(x)}),[x]);return{selectedValue:a,selectValue:(0,i.useCallback)((e=>{if(!p({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);c(e),h(e),b(e)}),[h,b,r]),tabValues:r}}var b=t(93664);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=t(17624);function j(e){let{className:n,block:t,selectedValue:i,selectValue:a,tabValues:s}=e;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,r.MV)(),d=e=>{const n=e.currentTarget,t=c.indexOf(n),o=s[t].value;o!==i&&(l(n),a(o))},h=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.c)("tabs",{"tabs--block":t},n),children:s.map((e=>{let{value:n,label:t,attributes:r}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>c.push(e),onKeyDown:h,onClick:d,...r,className:(0,o.c)("tabs__item",x.tabItem,r?.className,{"tabs__item--active":i===n}),children:t??n},n)}))})}function v(e){let{lazy:n,children:t,selectedValue:o}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===o));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==o})))})}function k(e){const n=m(e);return(0,g.jsxs)("div",{className:(0,o.c)("tabs-container",x.tabList),children:[(0,g.jsx)(j,{...e,...n}),(0,g.jsx)(v,{...e,...n})]})}function D(e){const n=(0,b.c)();return(0,g.jsx)(k,{...e,children:h(e.children)},String(n))}},4552:(e,n,t)=>{t.d(n,{I:()=>s,M:()=>a});var i=t(11504);const o={},r=i.createContext(o);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);