(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4057],{5380:e=>{function t(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=()=>[],t.resolve=t,t.id=5380,e.exports=t},1909:(e,t,n)=>{"use strict";n.d(t,{Z:()=>m});var i=n(7462),a=n(7294),r=n(2263),l=n(3945),o=n(8182),s=n(2175),c=n(4866),d=n(5162),p=n(814);const m=e=>{let{children:t,fileName:n,...m}=e;const u=t,{code:h}=(0,s.transform)(u,{plugins:["transform-typescript"],retainLines:!0}),{siteConfig:{customFields:{prettierConfig:f}}}=(0,r.Z)(),v=(0,l.format)(h,{parser:o.parsers.babel.parse,...f}),k=n?`${n}.ts`:void 0,g=n?`${n}.js`:void 0;return a.createElement(c.Z,{groupId:"ts-js-choice"},a.createElement(d.Z,{value:"ts",label:"Typescript",default:!0},a.createElement(p.Z,(0,i.Z)({},m,{className:"language-ts",title:k}),u)),a.createElement(d.Z,{value:"js",label:"Javascript"},a.createElement(p.Z,(0,i.Z)({},m,{className:"language-js",title:g}),v)))}},8847:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>p,default:()=>k,frontMatter:()=>d,metadata:()=>m,toc:()=>h});var i=n(7462),a=(n(7294),n(3905)),r=(n(814),n(1909)),l=n(4866),o=n(5162);const s="import { config as envConfig } from 'dotenv'\n\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nimport { createPresentation } from './claimer/createPresentation'\nimport { generateKeypairs } from './claimer/generateKeypairs'\nimport { generateLightDid } from './claimer/generateLightDid'\n\nfunction getChallenge(): string {\n  return Kilt.Utils.UUID.generate()\n}\n\n// Verifies validity, ownership & attestation.\nasync function verifyPresentation(\n  presentation: Kilt.ICredentialPresentation,\n  challenge: string,\n  trustedAttesterUris: Kilt.DidUri[]\n): Promise<boolean> {\n  Kilt.ConfigService.get('api')\n\n  try {\n    const { revoked, attester } = await Kilt.Credential.verifyPresentation(\n      presentation,\n      { challenge }\n    )\n\n    if (revoked) {\n      return false\n    }\n    // Returns true if no trusted attester URI is provided or, if it is, if it matches the one that issued the presented credential.\n    return trustedAttesterUris.includes(attester)\n  } catch {\n    return false\n  }\n}\n\nexport async function verificationFlow(\n  credential: Kilt.ICredential,\n  signCallback: Kilt.SignCallback,\n  trustedAttesterUris: Kilt.DidUri[] = []\n) {\n  // Verifier sends a unique challenge to the claimer \ud83d\udd4a\n  const challenge = getChallenge()\n\n  // Create a presentation and send it to the verifier \ud83d\udd4a\n  const presentation = await createPresentation(\n    credential,\n    signCallback,\n    challenge\n  )\n\n  // The verifier checks the presentation.\n  const isValid = await verifyPresentation(\n    presentation,\n    challenge,\n    trustedAttesterUris\n  )\n\n  if (isValid) {\n    console.log('Verification successful! You are allowed to enter the club \ud83c\udf89')\n  } else {\n    console.log('Verification failed! \ud83d\udeab')\n  }\n}\n\n// Don't execute if this is imported by another file.\nif (require.main === module) {\n  ;(async () => {\n    envConfig()\n\n    try {\n      await Kilt.connect(process.env.WSS_ADDRESS as string)\n      const claimerDidMnemonic = process.env.CLAIMER_DID_MNEMONIC as string\n      const { authentication } = generateKeypairs(claimerDidMnemonic)\n      const claimerDid = generateLightDid(claimerDidMnemonic)\n      const attesterDid = process.env.ATTESTER_DID_URI as Kilt.DidUri\n      // Load credential and claimer DID\n      const credential = JSON.parse(process.env.CLAIMER_CREDENTIAL as string)\n      await verificationFlow(\n        credential,\n        async ({ data }) => ({\n          signature: authentication.sign(data),\n          keyType: authentication.type,\n          keyUri: `${claimerDid.uri}${claimerDid.authentication[0].id}`\n        }),\n        [attesterDid]\n      )\n    } catch (e) {\n      console.log('Error in the verification flow')\n      throw e\n    }\n  })()\n}\n",c="import * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function createPresentation(\n  credential: Kilt.ICredential,\n  signCallback: Kilt.SignCallback,\n  challenge?: string\n): Promise<Kilt.ICredentialPresentation> {\n  // Create the presentation from credential, DID and challenge.\n  return Kilt.Credential.createPresentation({\n    credential,\n    signCallback,\n    challenge\n  })\n}\n",d={id:"verification",title:"\ud83e\udd1d Verification"},p=void 0,m={unversionedId:"develop/workshop/verification",id:"develop/workshop/verification",title:"\ud83e\udd1d Verification",description:"In this section, you'll play the role of a Verifier:",source:"@site/docs/develop/03_workshop/07_verification.md",sourceDirName:"develop/03_workshop",slug:"/develop/workshop/verification",permalink:"/docs/develop/workshop/verification",draft:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/03_workshop/07_verification.md",tags:[],version:"current",lastUpdatedAt:1699368097,formattedLastUpdatedAt:"Nov 7, 2023",sidebarPosition:7,frontMatter:{id:"verification",title:"\ud83e\udd1d Verification"},sidebar:"workshop",previous:{title:"\ud83e\uddfe Attestation",permalink:"/docs/develop/workshop/attestation"},next:{title:"\ud83d\ude80 Done",permalink:"/docs/develop/workshop/done"}},u={},h=[{value:"Create Presentation",id:"create-presentation",level:2},{value:"Verify",id:"verify",level:2},{value:"Run",id:"run",level:2}],f={toc:h},v="wrapper";function k(e){let{components:t,...n}=e;return(0,a.kt)(v,(0,i.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In this section, you'll play the role of a ",(0,a.kt)("span",{className:"label-role verifier"},"Verifier"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"You'll take an ",(0,a.kt)("inlineCode",{parentName:"li"},"Presentation")," object given to you by a ",(0,a.kt)("span",{className:"label-role claimer"},"Claimer"),";"),(0,a.kt)("li",{parentName:"ul"},"You'll verify that its data is correct;"),(0,a.kt)("li",{parentName:"ul"},"You'll verify that the attestation is valid, i.e., its hash exists on-chain and the attestation has not been revoked."),(0,a.kt)("li",{parentName:"ul"},"You'll verify that the ",(0,a.kt)("inlineCode",{parentName:"li"},"Credential")," is owned by the ",(0,a.kt)("span",{className:"label-role claimer"},"Claimer")," sending it")),(0,a.kt)("admonition",{title:"Presentation",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"A Credential is used to create the ",(0,a.kt)("inlineCode",{parentName:"p"},"Presentation")," object by the ",(0,a.kt)("span",{className:"label-role claimer"},"claimer"),".\nUnlike the credential, a ",(0,a.kt)("inlineCode",{parentName:"p"},"presentation")," can hide some attributes that are not required by the ",(0,a.kt)("span",{className:"label-role verifier"},"verifiers")," and can contain a claimer-signed challenge.\nA ",(0,a.kt)("inlineCode",{parentName:"p"},"presentation")," also contains a proof that the ",(0,a.kt)("span",{className:"label-role claimer"},"claimer")," owns the credential.")),(0,a.kt)("h2",{id:"create-presentation"},"Create Presentation"),(0,a.kt)("p",null,"It's not enough to just send our credential as a ",(0,a.kt)("span",{className:"label-role claimer"},"Claimer")," as we also need to prove ownership of it.\nThis is done by creating a presentation and signing the ",(0,a.kt)("span",{className:"label-role verifier"},"Verifier"),"'s challenge."),(0,a.kt)(r.Z,{fileName:"claimer/createPresentation",mdxType:"TsJsBlock"},c),(0,a.kt)("h2",{id:"verify"},"Verify"),(0,a.kt)("p",null,"Let's write our verification script.\nHere we'll expose ",(0,a.kt)("inlineCode",{parentName:"p"},"getChallenge")," which returns a random and unique\nchallenge for the ",(0,a.kt)("span",{className:"label-role claimer"},"Claimer")," to sign; this is used to prove ownership.\nWe'll also expose ",(0,a.kt)("inlineCode",{parentName:"p"},"verifyPresentation")," which will do the actual verification.\nCopy the code below, this completes the ",(0,a.kt)("span",{className:"label-role verifier"},"Verifier")," code!"),(0,a.kt)(r.Z,{fileName:"verify",mdxType:"TsJsBlock"},s),(0,a.kt)("h2",{id:"run"},"Run"),(0,a.kt)("p",null,"Run the verification flow on command line:"),(0,a.kt)(l.Z,{groupId:"ts-js-choice",mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"ts",label:"Typescript",default:!0,mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn ts-node verify.ts\n"))),(0,a.kt)(o.Z,{value:"js",label:"Javascript",default:!0,mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"node verify.js\n")))),(0,a.kt)("p",null,"That's it! All done :-)"))}k.isMDXComponent=!0}}]);