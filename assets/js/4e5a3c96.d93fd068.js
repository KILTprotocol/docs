(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9277],{25380:e=>{function t(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=()=>[],t.resolve=t,t.id=25380,e.exports=t},46793:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var i=n(67294),r=n(90814);const s=e=>{let{children:t,funcName:n="main",funcEnd:s="}",snippets:a,leadingSpaces:o=2,...l}=e;const d=t.split(/\r?\n/);let p="";if(a)p=JSON.parse(a).map((e=>Array.isArray(e)?d.slice(e[0],e[1]).map((e=>e.slice(o))).join("\n"):e)).join("\n");else if(n){let e,t;for(let i=0;i<d.length;i++)if(d[i].includes(n)){if(e=i,d[i].includes(" {"))break}else if(d[i].includes(" {")&&void 0!==e){e=i;break}for(let n=d.length-1;n>0;n--)if(d[n].includes(s)){t=n;break}p=d.slice(e+1,t).map((e=>e.slice(o))).join("\n")}return i.createElement(r.Z,l,p)}},89747:(e,t,n)=>{"use strict";n.d(t,{Z:()=>u});var i=n(87462),r=n(67294),s=n(52263),a=n(73945),o=n(28182),l=n(12175),d=n(65488),p=n(85162),c=n(46793);const u=e=>{let{children:t,fileName:n,...u}=e;const m=t,{code:y}=(0,l.transform)(m,{plugins:["transform-typescript"],retainLines:!0}),{siteConfig:{customFields:{prettierConfig:f}}}=(0,s.Z)(),v=(0,a.format)(y,{parser:o.parsers.babel.parse,...f}),g=n?`${n}.ts`:void 0,h=n?`${n}.js`:void 0;return r.createElement(d.Z,{groupId:"ts-js-choice"},r.createElement(p.Z,{value:"ts",label:"Typescript",default:!0},r.createElement(c.Z,(0,i.Z)({},u,{className:"language-ts",title:g}),m)),r.createElement(p.Z,{value:"js",label:"Javascript"},r.createElement(c.Z,(0,i.Z)({},u,{className:"language-js",title:h}),v)))}},12165:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var i=n(87462),r=(n(67294),n(3905)),s=n(89747);const a={id:"request",title:"Verifier Requests a Credential"},o=void 0,l={unversionedId:"develop/dApp/verifier/request",id:"develop/dApp/verifier/request",title:"Verifier Requests a Credential",description:"The job of the verifier is to request and verify credentials.",source:"@site/docs/develop/07_dApp/04_verifier/02_requestCredential.md",sourceDirName:"develop/07_dApp/04_verifier",slug:"/develop/dApp/verifier/request",permalink:"/docs/develop/dApp/verifier/request",draft:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/07_dApp/04_verifier/02_requestCredential.md",tags:[],version:"current",lastUpdatedAt:1666946848,formattedLastUpdatedAt:"Oct 28, 2022",sidebarPosition:2,frontMatter:{id:"request",title:"Verifier Requests a Credential"},sidebar:"dApp",previous:{title:"Overview",permalink:"/docs/develop/dApp/verifier/welcome"},next:{title:"Verifier Verifies a Credential",permalink:"/docs/develop/dApp/verifier/verify"}},d={},p=[],c={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The job of the verifier is to request and verify credentials.\nYour verifier can request one or more credentials of a specific CType.\nFor example, if you want to verify an email credential, you would use the email CType:"),(0,r.kt)(s.Z,{mdxType:"TsJsSnippet"},"/* eslint-disable @typescript-eslint/no-unused-vars */\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nexport function main() {\n  const emailCType: Kilt.ICType = {\n    $id: 'kilt:ctype:0x3291bb126e33b4862d421bfaa1d2f272e6cdfc4f96658988fbcffea8914bd9ac',\n    $schema: 'http://kilt-protocol.org/draft-01/ctype#',\n    title: 'Email',\n    properties: {\n      Email: {\n        type: 'string'\n      }\n    },\n    type: 'object'\n  }\n}\n"),(0,r.kt)("p",null,"First, generate a request challenge and store it on the server side:"),(0,r.kt)(s.Z,{mdxType:"TsJsSnippet"},"/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { randomAsHex } from '@polkadot/util-crypto'\n\nexport function main() {\n  // Store somewhere in the backend.\n  const requestChallenge = randomAsHex(24)\n}\n"),(0,r.kt)("p",null,"Then construct the ",(0,r.kt)("inlineCode",{parentName:"p"},"request-credential")," message using the message body, sender DID and receiver DID:"),(0,r.kt)(s.Z,{mdxType:"TsJsSnippet"},"/* eslint-disable @typescript-eslint/no-unused-vars */\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nlet encryptionKeyUri: Kilt.DidResourceUri\nlet emailCtype: Kilt.CTypeHash\nlet requestChallenge: string\n\nexport function main() {\n  const did = 'did:kilt:4smcAoiTiCLaNrGhrAM4wZvt5cMKEGm8f3Cu9aFrpsh5EiNV'\n  const { did: receiverDid } = Kilt.Did.parse(encryptionKeyUri)\n\n  const message = Kilt.Message.fromBody(\n    {\n      content: {\n        cTypes: [{ cTypeHash: emailCtype }],\n        challenge: requestChallenge\n      },\n      type: 'request-credential'\n    },\n    did,\n    receiverDid\n  )\n}\n"),(0,r.kt)("p",null,"Next, encrypt the message:"),(0,r.kt)(s.Z,{mdxType:"TsJsSnippet"},"/* eslint-disable @typescript-eslint/no-unused-vars */\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nlet message: Kilt.IMessage\nlet session: {\n  encryptionKeyUri: Kilt.DidResourceUri\n  send: (message: Kilt.IEncryptedMessage) => Promise<void>\n}\nlet senderDid: Kilt.DidDocument\nlet senderSecretKey: Kilt.Utils.Crypto.CryptoInput\n\nexport async function main() {\n  const senderEncryptionKey = senderDid.keyAgreement?.[0]\n  if (!senderEncryptionKey) {\n    return\n  }\n\n  // Create a callback that uses the DID encryption key to encrypt the message.\n  const encryptCallback: Kilt.EncryptCallback = async ({\n    data,\n    peerPublicKey\n  }) => {\n    const { box, nonce } = Kilt.Utils.Crypto.encryptAsymmetric(\n      data,\n      peerPublicKey,\n      senderSecretKey\n    )\n    return {\n      data: box,\n      nonce,\n      keyUri: `${senderDid.uri}${senderEncryptionKey.id}`\n    }\n  }\n\n  const encryptedMesage = await Kilt.Message.encrypt(\n    message,\n    encryptCallback,\n    session.encryptionKeyUri\n  )\n\n  // Finally, send the encrypted message to the extension.\n  await session.send(encryptedMesage)\n}\n"))}u.isMDXComponent=!0}}]);