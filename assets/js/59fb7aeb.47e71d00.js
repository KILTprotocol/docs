(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7602],{5380:e=>{function t(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=()=>[],t.resolve=t,t.id=5380,e.exports=t},1909:(e,t,n)=>{"use strict";n.d(t,{Z:()=>m});var a=n(7462),o=n(7294),i=n(2263),r=n(3945),s=n(8182),l=n(2175),c=n(4866),p=n(5162),d=n(814);const m=e=>{let{children:t,fileName:n,...m}=e;const u=t,{code:h}=(0,l.transform)(u,{plugins:["transform-typescript"],retainLines:!0}),{siteConfig:{customFields:{prettierConfig:k}}}=(0,i.Z)(),f=(0,r.format)(h,{parser:s.parsers.babel.parse,...k}),N=n?`${n}.ts`:void 0,g=n?`${n}.js`:void 0;return o.createElement(c.Z,{groupId:"ts-js-choice"},o.createElement(p.Z,{value:"ts",label:"Typescript",default:!0},o.createElement(d.Z,(0,a.Z)({},m,{className:"language-ts",title:N}),u)),o.createElement(p.Z,{value:"js",label:"Javascript"},o.createElement(d.Z,(0,a.Z)({},m,{className:"language-js",title:g}),f)))}},3671:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>f,frontMatter:()=>c,metadata:()=>d,toc:()=>u});var a=n(7462),o=(n(7294),n(3905)),i=n(1909),r=n(4866),s=n(5162);const l="import { config as envConfig } from 'dotenv'\n\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nexport function generateAccount(\n  mnemonic = Kilt.Utils.Crypto.mnemonicGenerate()\n): {\n  account: Kilt.KiltKeyringPair\n  mnemonic: string\n} {\n  return {\n    account: Kilt.Utils.Crypto.makeKeypairFromUri(mnemonic),\n    mnemonic\n  }\n}\n\n// Don't execute if this is imported by another file.\nif (require.main === module) {\n  ;(async () => {\n    envConfig()\n\n    try {\n      await Kilt.init()\n\n      const { mnemonic, account } = generateAccount()\n      console.log('save to mnemonic and address to .env to continue!\\n\\n')\n      console.log(`ATTESTER_ACCOUNT_MNEMONIC=\"${mnemonic}\"`)\n      console.log(`ATTESTER_ACCOUNT_ADDRESS=\"${account.address}\"\\n\\n`)\n    } catch (e) {\n      console.log('Error while setting up attester account')\n      throw e\n    }\n  })()\n}\n",c={id:"account",title:"Account"},p=void 0,d={unversionedId:"develop/workshop/attester/account",id:"develop/workshop/attester/account",title:"Account",description:"With the project structure setup in the last step, you can create your Attester account.",source:"@site/docs/develop/03_workshop/04_attester/01_account.md",sourceDirName:"develop/03_workshop/04_attester",slug:"/develop/workshop/attester/account",permalink:"/docs/develop/workshop/attester/account",draft:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/03_workshop/04_attester/01_account.md",tags:[],version:"current",lastUpdatedAt:1701504096,formattedLastUpdatedAt:"Dec 2, 2023",sidebarPosition:1,frontMatter:{id:"account",title:"Account"},sidebar:"workshop",previous:{title:"\ud83c\udfe2 Attester",permalink:"/docs/develop/workshop/attester/"},next:{title:"DID",permalink:"/docs/develop/workshop/attester/did"}},m={},u=[{value:"Create the Account",id:"create-the-account",level:2},{value:"Run code",id:"run-code",level:2}],h={toc:u},k="wrapper";function f(e){let{components:t,...n}=e;return(0,o.kt)(k,(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"With the ",(0,o.kt)("a",{parentName:"p",href:"./"},"project structure setup")," in the last step, you can create your ",(0,o.kt)("span",{className:"label-role attester"},"Attester")," account."),(0,o.kt)("p",null,"With KILT, an account is an object that interacts with the blockchain."),(0,o.kt)("admonition",{title:"KILT Account",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"A KILT account is a set of cryptographic elements:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"The address, generated from the public key, is the entity's unique and public on-chain identifier, used to pay fees and deposits."),(0,o.kt)("li",{parentName:"ul"},"A signing key pair to write transactions on-chain"))),(0,o.kt)("p",null,"To create an account, you need a mnemonic."),(0,o.kt)("admonition",{title:"Mnemonic",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"In cryptography, a mnemonic consists of a series of 12 or 24 random words."),(0,o.kt)("p",{parentName:"admonition"},"For example, ",(0,o.kt)("inlineCode",{parentName:"p"},"waste frown beach save hidden bar inmate oil mind member junk famous")," is a mnemonic."),(0,o.kt)("p",{parentName:"admonition"},"You use a mnemonic to generate signing key pairs.\nWhat's great about a mnemonic is that it's ",(0,o.kt)("strong",{parentName:"p"},"human-readable"),", and a person could memorize it to later re-generate their key pairs and address.\nA mnemonic is critical for security, so it's crucial to keep it safe!")),(0,o.kt)("h2",{id:"create-the-account"},"Create the Account"),(0,o.kt)("p",null,"To generate an account, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"addFromMnemonic()")," function on the ",(0,o.kt)("a",{parentName:"p",href:"https://kiltprotocol.github.io/sdk-js/interfaces/types_src.KiltKeyringPair.html"},(0,o.kt)("inlineCode",{parentName:"a"},"KiltKeyringPair"))," interface of the SDK.\nThe function uses the underlying polkadot ",(0,o.kt)("inlineCode",{parentName:"p"},"mnemonicGenerate()")," function to generate a 12-word mnemonic."),(0,o.kt)("admonition",{title:"polkadot.js",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The KILT SDK is built on top of the ",(0,o.kt)("a",{parentName:"p",href:"https://polkadot.js.org/"},"polkadot.js")," library, so this workshop uses several functions from the library."),(0,o.kt)("p",{parentName:"admonition"},"The library provides tools to interact with the KILT blockchain and other Substrate-based blockchains."),(0,o.kt)("p",{parentName:"admonition"},"In addition, the polkadot.js library offers cryptographic primitives and a serialization framework to encode/decode data sent to and received from the blockchain.\nRead the ",(0,o.kt)("a",{parentName:"p",href:"https://polkadot.js.org/docs/"},"API documentation")," to learn more about the functions available.")),(0,o.kt)("p",null,"Add the following code to the ",(0,o.kt)("inlineCode",{parentName:"p"},"generateAccount")," file."),(0,o.kt)(i.Z,{fileName:"attester/generateAccount",mdxType:"TsJsBlock"},l),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"generateAccount")," method returns an object with the following two properties:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A key ",(0,o.kt)("inlineCode",{parentName:"li"},"account")," with the type ",(0,o.kt)("inlineCode",{parentName:"li"},"Kilt.KiltKeyringPair"),"."),(0,o.kt)("li",{parentName:"ul"},"A key ",(0,o.kt)("inlineCode",{parentName:"li"},"mnemonic")," with the type ",(0,o.kt)("inlineCode",{parentName:"li"},"string"),".")),(0,o.kt)("p",null,"Generating these values takes two steps:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create the ",(0,o.kt)("inlineCode",{parentName:"p"},"mnemonic")," value using the ",(0,o.kt)("inlineCode",{parentName:"p"},"mnemonicGenerate()")," method from the ",(0,o.kt)("inlineCode",{parentName:"p"},"Utils.Crypto")," package.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"account")," value first needs a ",(0,o.kt)("inlineCode",{parentName:"p"},"keyring")," value defined, which is a data structure for defining the key pair type with the following parameters:"),(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"ss58Format"),": Specifies the encoding format for the key. Substrate-based blockchains commonly use ",(0,o.kt)("a",{parentName:"li",href:"https://docs.substrate.io/reference/address-formats/"},"SS58"),".\nThe value ",(0,o.kt)("inlineCode",{parentName:"li"},"38")," represents the KILT blockchain prefix."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"type"),": Specifies the user's cryptographic algorithm.\nSubstrate-based blockchains commonly use sr25519.")),(0,o.kt)("p",{parentName:"li"},"The function then returns the value using the ",(0,o.kt)("inlineCode",{parentName:"p"},"addFromMnemonic()")," method to create a key pair for the address using the given mnemonic."))),(0,o.kt)("p",null,"The rest of the code runs the ",(0,o.kt)("inlineCode",{parentName:"p"},"generateAccount")," function and logs the results to the console."),(0,o.kt)("h2",{id:"run-code"},"Run code"),(0,o.kt)("p",null,"Run the code above to receive your ",(0,o.kt)("span",{className:"label-role attester"},"Attester")," ",(0,o.kt)("inlineCode",{parentName:"p"},"<address>")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"<mnenomic>"),"."),(0,o.kt)(r.Z,{groupId:"ts-js-choice",mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"ts",label:"Typescript",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn ts-node ./attester/generateAccount.ts\n"))),(0,o.kt)(s.Z,{value:"js",label:"Javascript",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"node ./attester/generateAccount.js\n")))),(0,o.kt)("p",null,"The output provides you with an ",(0,o.kt)("inlineCode",{parentName:"p"},"ATTESTER_ACCOUNT_MNEMONIC")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"ATTESTER_ACCOUNT_ADDRESS"),".\nSave both values in your ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," file, which should look similar to the below."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-env",metastring:'title=".env"',title:'".env"'},'WSS_ADDRESS=wss://peregrine.kilt.io\n\nATTESTER_ACCOUNT_MNEMONIC="warrior icon use cry..."\nATTESTER_ACCOUNT_ADDRESS="4ohMvUHsyeDhMVZF..."\n')),(0,o.kt)("admonition",{title:"Get PILT coins!",type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"You now have a blockchain account to use to pay fees and deposits.\nIf you haven't already requested PILT, go to the ",(0,o.kt)("a",{parentName:"p",href:"https://faucet.peregrine.kilt.io"},"faucet")," and request tokens for your ",(0,o.kt)("inlineCode",{parentName:"p"},"<address>"),".")))}f.isMDXComponent=!0}}]);