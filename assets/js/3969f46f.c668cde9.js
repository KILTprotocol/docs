"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2096],{5162:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(7294),r=a(6010);const i="tabItem_Ymn6";function o(e){let{children:t,hidden:a,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,o),hidden:a},t)}},5488:(e,t,a)=>{a.d(t,{Z:()=>u});var n=a(7462),r=a(7294),i=a(6010),o=a(2389),l=a(7392),s=a(7094),c=a(2466);const d="tabList__CuJ",p="tabItem_LNqP";function m(e){var t;const{lazy:a,block:o,defaultValue:m,values:u,groupId:h,className:k}=e,g=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),w=u??g.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),b=(0,l.l)(w,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===m?m:m??(null==(t=g.find((e=>e.props.default)))?void 0:t.props.value)??g[0].props.value;if(null!==f&&!w.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${w.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:y}=(0,s.U)(),[x,N]=(0,r.useState)(f),S=[],{blockElementScrollPositionUntilNextRender:T}=(0,c.o5)();if(null!=h){const e=v[h];null!=e&&e!==x&&w.some((t=>t.value===e))&&N(e)}const C=e=>{const t=e.currentTarget,a=S.indexOf(t),n=w[a].value;n!==x&&(T(t),N(n),null!=h&&y(h,String(n)))},R=e=>{var t;let a=null;switch(e.key){case"Enter":C(e);break;case"ArrowRight":{const t=S.indexOf(e.currentTarget)+1;a=S[t]??S[0];break}case"ArrowLeft":{const t=S.indexOf(e.currentTarget)-1;a=S[t]??S[S.length-1];break}}null==(t=a)||t.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",d)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":o},k)},w.map((e=>{let{value:t,label:a,attributes:o}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,key:t,ref:e=>S.push(e),onKeyDown:R,onClick:C},o,{className:(0,i.Z)("tabs__item",p,null==o?void 0:o.className,{"tabs__item--active":x===t})}),a??t)}))),a?(0,r.cloneElement)(g.filter((e=>e.props.value===x))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==x})))))}function u(e){const t=(0,o.Z)();return r.createElement(m,(0,n.Z)({key:String(t)},e))}},8578:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>g,contentTitle:()=>h,default:()=>f,frontMatter:()=>u,metadata:()=>k,toc:()=>w});var n=a(7462),r=(a(7294),a(3905)),i=a(6823),o=a(5488),l=a(5162),s=a(2635);const c={toc:[{value:"Prepare claiming",id:"prepare-claiming",level:3},{value:"Claim",id:"claim",level:3},{value:"Recommendation: Batched call",id:"recommendation-batched-call",level:3}]};function d(e){let{components:t,...s}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("div",{className:"nested-tab"},(0,r.kt)(o.Z,{groupId:"rewards-apps-code",defaultValue:"polkadot-apps",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"polkadot-apps",label:"Polkadot Apps",attributes:{"data-value":"magenta"},mdxType:"TabItem"},(0,r.kt)("h3",{id:"prepare-claiming"},"Prepare claiming"),(0,r.kt)("p",null,"First, you need to convert your ",(0,r.kt)("em",{parentName:"p"},"reward points")," into balance."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Select the collator account for which you want to claim the rewards.\nIt should have enough balance to cover the transaction fee which is around 0.0001 KILT (the ",(0,r.kt)("em",{parentName:"li"},"using the selected account")," field)"),(0,r.kt)("li",{parentName:"ol"},"Select the appropriate extrinsic: ",(0,r.kt)("inlineCode",{parentName:"li"},"parachainStaking -> incrementCollatorRewards()")),(0,r.kt)("li",{parentName:"ol"},"Sign and submit the extrinsic (the ",(0,r.kt)("em",{parentName:"li"},"Submit Transaction")," button)")),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(2299).Z,width:"1420",height:"467"})),(0,r.kt)("h3",{id:"claim"},"Claim"),(0,r.kt)("p",null,"Finally, you can claim your well deserved staking rewards."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Select the collator account for which you want to claim the rewards.\nIt should have enough balance to cover the transaction fee which is around 0.0001 KILT (the ",(0,r.kt)("em",{parentName:"li"},"using the selected account")," field)"),(0,r.kt)("li",{parentName:"ol"},"Select the appropriate extrinsic: ",(0,r.kt)("inlineCode",{parentName:"li"},"parachainStaking -> claimRewards()")),(0,r.kt)("li",{parentName:"ol"},"Sign and submit the extrinsic (the ",(0,r.kt)("em",{parentName:"li"},"Submit Transaction")," button)")),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(6201).Z,width:"1420",height:"438"})),(0,r.kt)("h3",{id:"recommendation-batched-call"},"Recommendation: Batched call"),(0,r.kt)("p",null,"We recommend to execute both extrinsics in a single batch to save on transaction fees:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Select the collator account for which you want to claim the rewards.\nIt should have enough balance to cover the transaction fee which is around 0.000112 KILT (the ",(0,r.kt)("em",{parentName:"li"},"using the selected account")," field)"),(0,r.kt)("li",{parentName:"ol"},"Select the batch extrinsic: ",(0,r.kt)("inlineCode",{parentName:"li"},"utility -> batch()")),(0,r.kt)("li",{parentName:"ol"},"Select the reward increment extrinsic: ",(0,r.kt)("inlineCode",{parentName:"li"},"parachainStaking -> incrementCollatorRewards()")),(0,r.kt)("li",{parentName:"ol"},"Press the ",(0,r.kt)("inlineCode",{parentName:"li"},"+")," button and add the reward claiming extrinsic: ",(0,r.kt)("inlineCode",{parentName:"li"},"parachainStaking -> claimRewards()")),(0,r.kt)("li",{parentName:"ol"},"Sign and submit the extrinsic (the ",(0,r.kt)("em",{parentName:"li"},"Submit Transaction")," button)")),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(4182).Z,width:"1421",height:"658"}))),(0,r.kt)(l.Z,{value:"polkadot-js",label:"Polkadot JS",attributes:{"data-value":"magenta"},mdxType:"TabItem"},(0,r.kt)(i.Z,{className:"language-ts",mdxType:"CodeBlock"},"import { ApiPromise } from '@polkadot/api'\nimport type { KeyringPair } from '@polkadot/keyring/types'\n\nexport async function claimCollatorStakingRewards(\n  api: ApiPromise,\n  submitterAccount: KeyringPair\n) {\n  const tx = api.tx.utility.batch([\n    // convert collator participation points into rewards\n    api.tx.parachainStaking.incrementCollatorRewards(),\n    // mint rewards for collator address\n    api.tx.parachainStaking.claimRewards()\n  ])\n\n  // boilerplate to sign and send tx to websocket\n  return new Promise((resolve, reject) =>\n    tx.signAndSend(submitterAccount, ({ status, dispatchError }) => {\n      if (status.isFinalized && !dispatchError) {\n        onSuccess(\n          submitterAccount.address,\n          status.asFinalized.toString(),\n          resolve\n        )\n      }\n      if (dispatchError) {\n        if (dispatchError.isModule) {\n          // for module errors, we have the section indexed, lookup\n          const decoded = api.registry.findMetaError(dispatchError.asModule)\n          const { docs, name, section } = decoded\n\n          const error = new Error(`${section}.${name}: ${docs.join(' ')}`)\n          onError(error, reject)\n        } else {\n          // Other, CannotLookup, BadOrigin, no extra info\n          const error = new Error(dispatchError.toString())\n          onError(error, reject)\n        }\n      }\n    })\n  )\n}\n\n// boilerplate handlers\nconst onSuccess = (\n  address: string,\n  txHash: string,\n  resolve: (res: string) => void\n) => {\n  console.log(\n    `Claimed collator staking rewards for ${address} with tx hash ${txHash}`\n  )\n  resolve(txHash)\n}\nconst onError = (error: Error, reject: (err: Error) => void) => {\n  console.error(`Failed to claim collator staking rewards due to ${error}`)\n  reject(error)\n}\n")))))}d.isMDXComponent=!0;const p={toc:[{value:"Prepare claiming",id:"prepare-claiming",level:3},{value:"Claim",id:"claim",level:3},{value:"Recommendation: Batched call",id:"recommendation-batched-call",level:3}]};function m(e){let{components:t,...s}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("div",{className:"nested-tab"},(0,r.kt)(o.Z,{groupId:"rewards-apps-code",defaultValue:"polkadot-apps",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"polkadot-apps",label:"Polkadot Apps",attributes:{"data-value":"magenta"},mdxType:"TabItem"},(0,r.kt)("h3",{id:"prepare-claiming"},"Prepare claiming"),(0,r.kt)("p",null,"First, you need to convert your ",(0,r.kt)("em",{parentName:"p"},"reward points")," into balance."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Select the delegator account for which you want to claim the rewards. It should have enough balance to cover the transaction fee which is around 0.0001 KILT (the ",(0,r.kt)("em",{parentName:"li"},"using the selected account")," field)"),(0,r.kt)("li",{parentName:"ol"},"Select the appropriate extrinsic: ",(0,r.kt)("inlineCode",{parentName:"li"},"parachainStaking -> incrementDelegatorRewards()")),(0,r.kt)("li",{parentName:"ol"},"Sign and submit the extrinsic (the ",(0,r.kt)("em",{parentName:"li"},"Submit Transaction")," button)")),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(8786).Z,width:"1420",height:"459"})),(0,r.kt)("h3",{id:"claim"},"Claim"),(0,r.kt)("p",null,"Finally, you can claim your well deserved staking rewards."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Select the delegator account for which you want to claim the rewards. It should have enough balance to cover the transaction fee which is around 0.0001 KILT (the ",(0,r.kt)("em",{parentName:"li"},"using the selected account")," field)"),(0,r.kt)("li",{parentName:"ol"},"Select the appropriate extrinsic: ",(0,r.kt)("inlineCode",{parentName:"li"},"parachainStaking -> claimRewards()")),(0,r.kt)("li",{parentName:"ol"},"Sign and submit the extrinsic (the ",(0,r.kt)("em",{parentName:"li"},"Submit Transaction")," button)")),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(6201).Z,width:"1420",height:"438"})),(0,r.kt)("h3",{id:"recommendation-batched-call"},"Recommendation: Batched call"),(0,r.kt)("p",null,"We recommend to execute both extrinsics in a single batch to save on transaction fees:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Select the delegator account for which you want to claim the rewards.\nIt should have enough balance to cover the transaction fee which is around 0.000112 KILT (the ",(0,r.kt)("em",{parentName:"li"},"using the selected account")," field)"),(0,r.kt)("li",{parentName:"ol"},"Select the batch extrinsic: ",(0,r.kt)("inlineCode",{parentName:"li"},"utility -> batch()")),(0,r.kt)("li",{parentName:"ol"},"Select the reward increment extrinsic: ",(0,r.kt)("inlineCode",{parentName:"li"},"parachainStaking -> incrementDelegatorRewards()")),(0,r.kt)("li",{parentName:"ol"},"Press the ",(0,r.kt)("inlineCode",{parentName:"li"},"+")," button and add the reward claiming extrinsic: ",(0,r.kt)("inlineCode",{parentName:"li"},"parachainStaking -> claimRewards()")),(0,r.kt)("li",{parentName:"ol"},"Sign and submit the extrinsic (the ",(0,r.kt)("em",{parentName:"li"},"Submit Transaction")," button)")),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(8050).Z,width:"1419",height:"649"}))),(0,r.kt)(l.Z,{value:"polkadot-js",label:"Polkadot JS",attributes:{"data-value":"magenta"},mdxType:"TabItem"},(0,r.kt)(i.Z,{className:"language-ts",mdxType:"CodeBlock"},"import { ApiPromise } from '@polkadot/api'\nimport type { KeyringPair } from '@polkadot/keyring/types'\n\nexport async function claimDelegatorStakingRewards(\n  api: ApiPromise,\n  submitterAccount: KeyringPair\n) {\n  const tx = api.tx.utility.batch([\n    // convert delegator participation points into rewards\n    api.tx.parachainStaking.incrementDelegatorRewards(),\n    // mint rewards for delegator address\n    api.tx.parachainStaking.claimRewards()\n  ])\n\n  // boilerplate to sign and send tx to websocket\n  return new Promise((resolve, reject) =>\n    tx.signAndSend(submitterAccount, ({ status, dispatchError }) => {\n      if (status.isFinalized && !dispatchError) {\n        onSuccess(\n          submitterAccount.address,\n          status.asFinalized.toString(),\n          resolve\n        )\n      }\n      if (dispatchError) {\n        if (dispatchError.isModule) {\n          // for module errors, we have the section indexed, lookup\n          const decoded = api.registry.findMetaError(dispatchError.asModule)\n          const { docs, name, section } = decoded\n\n          const error = new Error(`${section}.${name}: ${docs.join(' ')}`)\n          onError(error, reject)\n        } else {\n          // Other, CannotLookup, BadOrigin, no extra info\n          const error = new Error(dispatchError.toString())\n          onError(error, reject)\n        }\n      }\n    })\n  )\n}\n\n// boilerplate handlers\nconst onSuccess = (\n  address: string,\n  txHash: string,\n  resolve: (res: string) => void\n) => {\n  console.log(\n    `Claimed delegator staking rewards for ${address} with tx hash ${txHash}`\n  )\n  resolve(txHash)\n}\nconst onError = (error: Error, reject: (err: Error) => void) => {\n  console.error(`Failed to claim delegator staking rewards due to ${error}`)\n  reject(error)\n}\n")))))}m.isMDXComponent=!0;const u={id:"claim-rewards",title:"Claim Staking Rewards"},h=void 0,k={unversionedId:"participate/staking/claim-rewards",id:"participate/staking/claim-rewards",title:"Claim Staking Rewards",description:"Until runtime version 1.7.5 (spiritnet-10750), staking rewards were automatically minted.",source:"@site/docs/participate/01_staking/04_claim_rewards.md",sourceDirName:"participate/01_staking",slug:"/participate/staking/claim-rewards",permalink:"/docs/participate/staking/claim-rewards",draft:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/participate/01_staking/04_claim_rewards.md",tags:[],version:"current",lastUpdatedAt:1680704096,formattedLastUpdatedAt:"Apr 5, 2023",sidebarPosition:4,frontMatter:{id:"claim-rewards",title:"Claim Staking Rewards"},sidebar:"staking",previous:{title:"Lifecycle of a Delegator",permalink:"/docs/participate/staking/delegate/lifecycle"},next:{title:"Unlock Unstaked Tokens",permalink:"/docs/participate/staking/unlock-unstaked"}},g={},w=[{value:"How to check the reward amount",id:"how-to-check-the-reward-amount",level:2},{value:"How to claim",id:"how-to-claim",level:2}],b={toc:w};function f(e){let{components:t,...c}=e;return(0,r.kt)("wrapper",(0,n.Z)({},b,c,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Until runtime version 1.7.5 (",(0,r.kt)("inlineCode",{parentName:"p"},"spiritnet-10750"),"), staking rewards were automatically minted.\nIn 1.8.0 (",(0,r.kt)("inlineCode",{parentName:"p"},"spiritnet-10801"),") this will change:\nHereafter, the rewards are still accounted to the collators and their delegators in each block.\nHowever, they need to be actively claimed by calling an extrinsic, similar to the pull-based approach on Polkadot.\nSince the rewards never expire, one does not need to rush to do so."),(0,r.kt)("p",null,"This change improves the scalability of our LDPoS by orders of magnitude because it removes the ",(0,r.kt)("inlineCode",{parentName:"p"},"Rewarded")," events for a collator and all their delegators in each block.\nThis reduces the number of taxable events from many thousands per year to any number a user might find suitable.\nPlease check our blogpost for more details."),(0,r.kt)("h2",{id:"how-to-check-the-reward-amount"},"How to check the reward amount"),(0,r.kt)("p",null,"Unfortunately, the amount of accumulated rewards are not directly stored on the chain but divided into multiple storage entries.\nLuckily, you can easily query your current reward status by performing a runtime API call which we created for that specific purpose.\nSince this is just a simple query, it does not cost any transaction fees."),(0,r.kt)(o.Z,{groupId:"rewards-apps-code",defaultValue:"polkadot-apps",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"polkadot-apps",label:"Polkadot Apps",mdxType:"TabItem"},(0,r.kt)("p",null,"In the Polkadot JS Apps (",(0,r.kt)("a",{parentName:"p",href:"https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkilt-rpc.dwellir.com#/explorer"},"wss://spiritnet.kilt.io"),", or ",(0,r.kt)("a",{parentName:"p",href:"https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fperegrine-stg.kilt.io%2Fpara-public-ws#/explorer"},"wss://peregrine.kilt.io/parachain-public-ws"),") go to ",(0,r.kt)("inlineCode",{parentName:"p"},"Developer -> Runtime calls"),". "),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Select the ",(0,r.kt)("inlineCode",{parentName:"li"},"parachainStaking")," endpoint."),(0,r.kt)("li",{parentName:"ol"},"Select the ",(0,r.kt)("inlineCode",{parentName:"li"},"getUnclaimedStakingRewards(account)")," call."),(0,r.kt)("li",{parentName:"ol"},"Select your KILT address (the ",(0,r.kt)("em",{parentName:"li"},"account: AccountId32")," field)"),(0,r.kt)("li",{parentName:"ol"},"Submit the runtime call (the ",(0,r.kt)("em",{parentName:"li"},"Submit Runtime call")," button). You do not need to sign or pay any fees.")),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(6593).Z,width:"1421",height:"415"}))),(0,r.kt)(l.Z,{value:"polkadot-js",label:"Polkadot JS",mdxType:"TabItem"},(0,r.kt)(i.Z,{className:"language-ts",mdxType:"CodeBlock"},"import { ApiPromise } from '@polkadot/api'\nimport { Balance } from '@polkadot/types/interfaces'\n\nexport async function getUnclaimedStakingRewards(\n  api: ApiPromise,\n  account: string\n) {\n  const rewards = await api.call.staking.getUnclaimedStakingRewards<Balance>(\n    account\n  )\n  return rewards.toBigInt()\n}\n"))),(0,r.kt)("h2",{id:"how-to-claim"},"How to claim"),(0,r.kt)("p",null,"In order to move the staking rewards into your wallet, you need to call two different extrinsics: ",(0,r.kt)("inlineCode",{parentName:"p"},"increment{Collator, Delegator}Rewards")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"claimRewards"),".\nThis can be done sequentially or in a batch.\nTo save transaction fees, we recommend the latter ",(0,r.kt)("a",{parentName:"p",href:"#recommendation-batched-call"},"batched call"),"."),(0,r.kt)("div",{className:"kilt-mermaid"},(0,r.kt)("mermaid",{value:'\ngraph TD\nAlice("Alice holds free KILT") ---\x3e |"call joinCandidates"| C("Active Collator")\nAlice ---\x3e |"call joinDelegators"| D("Active Delegator")\nC ---\x3e |"build block"| R\nD ---\x3e |"delegated collator \\n builds block"| R("Reward counter is \\n internally increased")\nR ---\x3e |"call increment...Rewards"| R2("Rewards are \\n converted into Balance")\nR2 ---\x3e |"call claimRewards"| R3("Rewards are moved \\n into Alice\'s wallet")\n'})),(0,r.kt)(s.ZP,{mdxType:"StakingTxDisclaimer"}),(0,r.kt)(o.Z,{groupId:"collator-delegator",defaultValue:"Collator",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"Collator",label:"Collator",mdxType:"TabItem"},(0,r.kt)(d,{mdxType:"ClaimRewardsCollator"})),(0,r.kt)(l.Z,{value:"Delegator",label:"Delegator",mdxType:"TabItem"},(0,r.kt)(m,{mdxType:"ClaimRewardsDelegator"}))))}f.isMDXComponent=!0},2635:(e,t,a)=>{a.d(t,{ZP:()=>o});var n=a(7462),r=(a(7294),a(3905));const i={toc:[]};function o(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},i,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"You can either execute this transaction in Polkadot JS Apps or the ",(0,r.kt)("a",{parentName:"p",href:"/docs/develop/builtonkilt#web-apps"},(0,r.kt)("strong",{parentName:"a"},"KILT Stakeboard")),", which serves as an in-house developed Frontend for all KILT staking activity.\nBelow, we outline the steps for Polkadot JS Apps.\nThe process for KILT Stakeboard is described in detail in the ",(0,r.kt)("a",{parentName:"p",href:"https://support.kilt.io/support/solutions/80000442174"},(0,r.kt)("strong",{parentName:"a"},"BOTLabs Trusted Entity support hub")),".")),(0,r.kt)("p",null,"In the Polkadot JS Apps (",(0,r.kt)("a",{parentName:"p",href:"https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkilt-rpc.dwellir.com#/explorer"},"wss://spiritnet.kilt.io"),", or ",(0,r.kt)("a",{parentName:"p",href:"https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fperegrine-stg.kilt.io%2Fpara-public-ws#/explorer"},"wss://peregrine.kilt.io/parachain-public-ws"),") go to ",(0,r.kt)("inlineCode",{parentName:"p"},"Developer -> Extrinsics -> Submission"),"."))}o.isMDXComponent=!0},4182:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/parachainStaking-batch-incrementCollatorRewards-claimRewards-cf9d1be88767ac8a9fe4e1f354fedc66.png"},8050:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/parachainStaking-batch-incrementDelegatorRewards-claimRewards-52eda11f9fc6c1f6e59e553c16830421.png"},6201:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/parachainStaking-claimRewards-0ac5ca4fccb9cacf7299444aa349cefb.png"},6593:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/parachainStaking-getUnclaimedStakingRewards-46b8e3d6ece765477c75ec3c40bcc2c3.png"},2299:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/parachainStaking-incrementCollatorRewards-e604fbe81682f3a4b13b2befd28829a5.png"},8786:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/parachainStaking-incrementDelegatorRewards-701363b804c4b0d666abc9afc9107a0f.png"}}]);