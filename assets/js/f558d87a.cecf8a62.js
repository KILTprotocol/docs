(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2417],{5380:e=>{function t(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=()=>[],t.resolve=t,t.id=5380,e.exports=t},1909:(e,t,n)=>{"use strict";n.d(t,{Z:()=>p});var i=n(7462),a=n(7294),o=n(2263),r=n(3945),l=n(8182),s=n(2175),d=n(4866),c=n(5162),m=n(814);const p=e=>{let{children:t,fileName:n,...p}=e;const u=t,{code:h}=(0,s.transform)(u,{plugins:["transform-typescript"],retainLines:!0}),{siteConfig:{customFields:{prettierConfig:k}}}=(0,o.Z)(),g=(0,r.format)(h,{parser:l.parsers.babel.parse,...k}),y=n?`${n}.ts`:void 0,f=n?`${n}.js`:void 0;return a.createElement(d.Z,{groupId:"ts-js-choice"},a.createElement(c.Z,{value:"ts",label:"Typescript",default:!0},a.createElement(m.Z,(0,i.Z)({},p,{className:"language-ts",title:y}),u)),a.createElement(c.Z,{value:"js",label:"Javascript"},a.createElement(m.Z,(0,i.Z)({},p,{className:"language-js",title:f}),g)))}},2100:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>m,default:()=>y,frontMatter:()=>c,metadata:()=>p,toc:()=>h});var i=n(7462),a=(n(7294),n(3905)),o=(n(814),n(1909)),r=n(4866),l=n(5162);const s="import * as Kilt from '@kiltprotocol/sdk-js'\nimport { mnemonicGenerate } from '@polkadot/util-crypto'\n\nexport function generateKeypairs(mnemonic = mnemonicGenerate()) {\n  const authentication = Kilt.Utils.Crypto.makeKeypairFromUri(mnemonic)\n\n  const keyAgreement = Kilt.Utils.Crypto.makeEncryptionKeypairFromSeed(\n    Kilt.Utils.Crypto.mnemonicToMiniSecret(mnemonic)\n  )\n\n  return {\n    authentication: authentication,\n    keyAgreement: keyAgreement\n  }\n}\n",d="import { config as envConfig } from 'dotenv'\n\nimport { mnemonicGenerate } from '@polkadot/util-crypto'\n\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nimport { generateKeypairs } from './generateKeypairs'\n\nexport function generateLightDid(mnemonic: string): Kilt.DidDocument {\n  const { authentication, keyAgreement } = generateKeypairs(mnemonic)\n  return Kilt.Did.createLightDidDocument({\n    authentication: [authentication as Kilt.NewLightDidVerificationKey],\n    keyAgreement: [keyAgreement]\n  })\n}\n\n// Don't execute if this is imported by another file.\nif (require.main === module) {\n  ;(async () => {\n    envConfig()\n\n    try {\n      await Kilt.init()\n\n      const mnemonic = mnemonicGenerate()\n      console.log('\\nsave following to .env to continue\\n')\n      console.log(`CLAIMER_DID_MNEMONIC=\"${mnemonic}\"`)\n    } catch (e) {\n      console.log('Error while setting up claimer DID')\n      throw e\n    }\n  })()\n}\n",c={id:"did",title:"DID"},m=void 0,p={unversionedId:"develop/workshop/claimer/did",id:"develop/workshop/claimer/did",title:"DID",description:"This section covers creating a light DID using the account you created for the Claimer.",source:"@site/docs/develop/03_workshop/05_claimer/01_did.md",sourceDirName:"develop/03_workshop/05_claimer",slug:"/develop/workshop/claimer/did",permalink:"/docs/develop/workshop/claimer/did",draft:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/03_workshop/05_claimer/01_did.md",tags:[],version:"current",lastUpdatedAt:1705572792,formattedLastUpdatedAt:"Jan 18, 2024",sidebarPosition:1,frontMatter:{id:"did",title:"DID"},sidebar:"workshop",previous:{title:"\ud83d\udc64 Claimer",permalink:"/docs/develop/workshop/claimer/"},next:{title:"Request an Attestation",permalink:"/docs/develop/workshop/claimer/request"}},u={},h=[{value:"Generate Keys",id:"generate-keys",level:2},{value:"Generate Light DID",id:"generate-light-did",level:2},{value:"Run",id:"run",level:2}],k={toc:h},g="wrapper";function y(e){let{components:t,...n}=e;return(0,a.kt)(g,(0,i.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This section covers creating a light DID using the account you created for the ",(0,a.kt)("span",{className:"label-role claimer"},"Claimer"),"."),(0,a.kt)("p",null,"Since a light DID is not registered on the blockchain, you don't need funds to create one."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Remember, light DIDs can do the following:"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"Sign attestation requests and presentation with the authentication keys"),(0,a.kt)("li",{parentName:"ul"},"Encrypt messages with the encryption keys")),(0,a.kt)("p",{parentName:"admonition"},"Read the ",(0,a.kt)("a",{parentName:"p",href:"/docs/develop/sdk/cookbook/dids/light-did-creation"},"DID documentation")," to learn more about DIDs and the difference between their light and full versions.")),(0,a.kt)("h2",{id:"generate-keys"},"Generate Keys"),(0,a.kt)("p",null,"Like the Attester, the Claimer must also set up the DID keys."),(0,a.kt)(o.Z,{fileName:"claimer/generateKeypairs",mdxType:"TsJsBlock"},s),(0,a.kt)("p",null,"The code above is similar to the ",(0,a.kt)("inlineCode",{parentName:"p"},"generateKeyAgreement")," function used in the Attester section but simpler, as the Claimer only needs an authentication key and an encryption key."),(0,a.kt)("p",null,"Both the keys are derived from the same seed, but they could also have two different seeds."),(0,a.kt)("h2",{id:"generate-light-did"},"Generate Light DID"),(0,a.kt)("p",null,"With the ",(0,a.kt)("inlineCode",{parentName:"p"},"keypairs")," generated, you can create the light DID.\nBecause it's off-chain you can create the DID object every time, but you still need to save the mnemonic to the ",(0,a.kt)("inlineCode",{parentName:"p"},".env")," file with a different variable name."),(0,a.kt)(o.Z,{fileName:"claimer/generateLightDid",mdxType:"TsJsBlock"},d),(0,a.kt)("p",null,"The Claimer doesn't have an ",(0,a.kt)("inlineCode",{parentName:"p"},"account"),", as the Claimer doesn't need to hold funds."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"generateKeypairs")," function takes the ",(0,a.kt)("inlineCode",{parentName:"p"},"mnemonic")," value and generates the ",(0,a.kt)("inlineCode",{parentName:"p"},"authentication")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"keyAgreement")," keys."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"createLightDidDocument")," method takes these two values and generates the light DID."),(0,a.kt)("h2",{id:"run"},"Run"),(0,a.kt)(r.Z,{groupId:"ts-js-choice",mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"ts",label:"Typescript",default:!0,mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn ts-node ./claimer/generateLightDid.ts\n"))),(0,a.kt)(l.Z,{value:"js",label:"Javascript",default:!0,mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"node ./claimer/generateLightDid.js\n")))),(0,a.kt)("p",null,"Well done - You successfully generated a light DID!"))}y.isMDXComponent=!0}}]);