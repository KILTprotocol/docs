(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[678],{5380:n=>{function t(n){var t=new Error("Cannot find module '"+n+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=()=>[],t.resolve=t,t.id=5380,n.exports=t},1909:(n,t,i)=>{"use strict";i.d(t,{Z:()=>k});var e=i(7462),o=i(7294),a=i(2263),c=i(3945),s=i(8182),l=i(2175),r=i(5488),d=i(5162),u=i(6823);const k=n=>{let{children:t,fileName:i,...k}=n;const g=t,{code:p}=(0,l.transform)(g,{plugins:["transform-typescript"],retainLines:!0}),{siteConfig:{customFields:{prettierConfig:m}}}=(0,a.Z)(),h=(0,c.format)(p,{parser:s.parsers.babel.parse,...m}),b=i?`${i}.ts`:void 0,D=i?`${i}.js`:void 0;return o.createElement(r.Z,{groupId:"ts-js-choice"},o.createElement(d.Z,{value:"ts",label:"Typescript",default:!0},o.createElement(u.Z,(0,e.Z)({},k,{className:"language-ts",title:b}),g)),o.createElement(d.Z,{value:"js",label:"Javascript"},o.createElement(u.Z,(0,e.Z)({},k,{className:"language-js",title:D}),h)))}},7602:(n,t,i)=>{"use strict";i.r(t),i.d(t,{assets:()=>r,contentTitle:()=>s,default:()=>k,frontMatter:()=>c,metadata:()=>l,toc:()=>d});var e=i(7462),o=(i(7294),i(3905)),a=i(1909);const c={id:"account-link",title:"Link an Account to a KILT DID"},s=void 0,l={unversionedId:"develop/sdk/cookbook/account_linking/account-link",id:"develop/sdk/cookbook/account_linking/account-link",title:"Link an Account to a KILT DID",description:"An account can be linked to a DID in one of two ways:",source:"@site/docs/develop/01_sdk/02_cookbook/03_account_linking/01_link.md",sourceDirName:"develop/01_sdk/02_cookbook/03_account_linking",slug:"/develop/sdk/cookbook/account_linking/account-link",permalink:"/docs/develop/sdk/cookbook/account_linking/account-link",draft:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/01_sdk/02_cookbook/03_account_linking/01_link.md",tags:[],version:"current",lastUpdatedAt:1673884454,formattedLastUpdatedAt:"Jan 16, 2023",sidebarPosition:1,frontMatter:{id:"account-link",title:"Link an Account to a KILT DID"},sidebar:"sdk",previous:{title:"Release a web3name",permalink:"/docs/develop/sdk/cookbook/web3names/web3name-release"},next:{title:"Query the web3name of an Account",permalink:"/docs/develop/sdk/cookbook/account_linking/account-name"}},r={},d=[],u={toc:d};function k(n){let{components:t,...i}=n;return(0,o.kt)("wrapper",(0,e.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"An account can be linked to a DID in one of two ways:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"The account to be linked generates a signature over the payload ",(0,o.kt)("inlineCode",{parentName:"li"},"<Bytes>(SubmitterDid, BlockNumberExpiration)</Bytes>"),", which is the default encoding of the PolkadotJS extension:")),(0,o.kt)(a.Z,{mdxType:"TsJsBlock"},"import type { KeyringPair } from '@polkadot/keyring/types'\n\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function linkAccountToDid(\n  did: Kilt.DidUri,\n  submitterAccount: Kilt.KiltKeyringPair,\n  linkedAccount: KeyringPair,\n  signCallback: Kilt.SignExtrinsicCallback\n): Promise<void> {\n  const api = Kilt.ConfigService.get('api')\n\n  // The account to be linked has to sign a specifically-crafted payload to prove\n  // willingness to be linked to the DID.\n  const linkingAccountSignatureGeneration = async (\n    signaturePayload: string | Uint8Array\n  ) => linkedAccount.sign(signaturePayload)\n\n  // Authorizing the tx with the full DID and including a signature of the linked account\n  // results in the provided account being linked to the DID authorizing the operation.\n  const accountLinkingParameters = await Kilt.Did.associateAccountToChainArgs(\n    linkedAccount.address,\n    did,\n    linkingAccountSignatureGeneration\n  )\n  const accountLinkingTx = await api.tx.didLookup.associateAccount(\n    ...accountLinkingParameters\n  )\n  const authorizedAccountLinkingTx = await Kilt.Did.authorizeTx(\n    did,\n    accountLinkingTx,\n    signCallback,\n    submitterAccount.address\n  )\n\n  await Kilt.Blockchain.signAndSubmitTx(\n    authorizedAccountLinkingTx,\n    submitterAccount\n  )\n}\n"),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"The account submitting the linking transaction is linked to the DID authorizing such transaction:")),(0,o.kt)(a.Z,{mdxType:"TsJsBlock"},"import * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function linkDidToAccount(\n  did: Kilt.DidUri,\n  submitterAccount: Kilt.KiltKeyringPair,\n  signCallback: Kilt.SignExtrinsicCallback\n): Promise<void> {\n  const api = Kilt.ConfigService.get('api')\n\n  // Authorizing the tx with the full DID and submitting it with the provided account\n  // results in the submitter's account being linked to the DID authorizing the operation.\n  const accountLinkingTx = api.tx.didLookup.associateSender()\n  const authorizedAccountLinkingTx = await Kilt.Did.authorizeTx(\n    did,\n    accountLinkingTx,\n    signCallback,\n    submitterAccount.address\n  )\n\n  await Kilt.Blockchain.signAndSubmitTx(\n    authorizedAccountLinkingTx,\n    submitterAccount\n  )\n}\n"))}k.isMDXComponent=!0}}]);