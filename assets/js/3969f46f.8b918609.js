"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2096],{8677:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>w,contentTitle:()=>j,default:()=>v,frontMatter:()=>x,metadata:()=>b,toc:()=>f});var r=n(5893),a=n(1151),i=n(9286),s=n(4866),o=n(5162),c=n(5720);const l="import * as Kilt from '@kiltprotocol/sdk-js'\nimport { Balance } from '@polkadot/types/interfaces'\n\nexport async function getUnclaimedStakingRewards(account: Kilt.KiltAddress) {\n  const api = Kilt.ConfigService.get('api')\n\n  const rewards =\n    await api.call.staking.getUnclaimedStakingRewards<Balance>(account)\n  return rewards.toBigInt()\n}\n",d="import * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function claimCollatorStakingRewards(\n  submitterAccount: Kilt.KeyringPair\n) {\n  const api = Kilt.ConfigService.get('api')\n\n  const tx = api.tx.utility.batch([\n    // convert collator participation points into rewards\n    api.tx.parachainStaking.incrementCollatorRewards(),\n    // mint rewards for collator address\n    api.tx.parachainStaking.claimRewards()\n  ])\n\n  // boilerplate to sign and send tx to websocket\n  return new Promise((resolve, reject) =>\n    tx.signAndSend(submitterAccount, ({ status, dispatchError }) => {\n      if (status.isFinalized && !dispatchError) {\n        onSuccess(\n          submitterAccount.address,\n          status.asFinalized.toString(),\n          resolve\n        )\n      }\n      if (dispatchError) {\n        if (dispatchError.isModule) {\n          // for module errors, we have the section indexed, lookup\n          const decoded = api.registry.findMetaError(dispatchError.asModule)\n          const { docs, name, section } = decoded\n\n          const error = new Error(`${section}.${name}: ${docs.join(' ')}`)\n          onError(error, reject)\n        } else {\n          // Other, CannotLookup, BadOrigin, no extra info\n          const error = new Error(dispatchError.toString())\n          onError(error, reject)\n        }\n      }\n    })\n  )\n}\n\n// boilerplate handlers\nconst onSuccess = (\n  address: string,\n  txHash: string,\n  resolve: (res: string) => void\n) => {\n  console.log(\n    `Claimed collator staking rewards for ${address} with tx hash ${txHash}`\n  )\n  resolve(txHash)\n}\nconst onError = (error: Error, reject: (err: Error) => void) => {\n  console.error(`Failed to claim collator staking rewards due to ${error}`)\n  reject(error)\n}\n";function h(e){const t={code:"code",em:"em",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",...(0,a.a)(),...e.components};return(0,r.jsx)("div",{className:"nested-tab",children:(0,r.jsxs)(s.Z,{groupId:"rewards-apps-code",defaultValue:"polkadot-apps",children:[(0,r.jsxs)(o.Z,{value:"polkadot-apps",label:"Polkadot Apps",attributes:{"data-value":"magenta"},children:[(0,r.jsx)(t.h3,{id:"prepare-claiming",children:"Prepare claiming"}),(0,r.jsxs)(t.p,{children:["First, you need to convert your ",(0,r.jsx)(t.em,{children:"reward points"})," into balance."]}),(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["Select the collator account for which you want to claim the rewards.\nIt should have enough balance to cover the transaction fee which is around 0.0001 KILT (the ",(0,r.jsx)(t.em,{children:"using the selected account"})," field)"]}),"\n",(0,r.jsxs)(t.li,{children:["Select the appropriate extrinsic: ",(0,r.jsx)(t.code,{children:"parachainStaking -> incrementCollatorRewards()"})]}),"\n",(0,r.jsxs)(t.li,{children:["Sign and submit the extrinsic (the ",(0,r.jsx)(t.em,{children:"Submit Transaction"})," button)"]}),"\n"]}),(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:n(2299).Z+"",width:"1420",height:"467"})}),(0,r.jsx)(t.h3,{id:"claim",children:"Claim"}),(0,r.jsx)(t.p,{children:"Finally, you can claim your well deserved staking rewards."}),(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["Select the collator account for which you want to claim the rewards.\nIt should have enough balance to cover the transaction fee which is around 0.0001 KILT (the ",(0,r.jsx)(t.em,{children:"using the selected account"})," field)"]}),"\n",(0,r.jsxs)(t.li,{children:["Select the appropriate extrinsic: ",(0,r.jsx)(t.code,{children:"parachainStaking -> claimRewards()"})]}),"\n",(0,r.jsxs)(t.li,{children:["Sign and submit the extrinsic (the ",(0,r.jsx)(t.em,{children:"Submit Transaction"})," button)"]}),"\n"]}),(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:n(6201).Z+"",width:"1420",height:"438"})}),(0,r.jsx)(t.h3,{id:"recommendation-batched-call",children:"Recommendation: Batched call"}),(0,r.jsx)(t.p,{children:"We recommend to execute both extrinsics in a single batch to save on transaction fees:"}),(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["Select the collator account for which you want to claim the rewards.\nIt should have enough balance to cover the transaction fee which is around 0.000112 KILT (the ",(0,r.jsx)(t.em,{children:"using the selected account"})," field)"]}),"\n",(0,r.jsxs)(t.li,{children:["Select the batch extrinsic: ",(0,r.jsx)(t.code,{children:"utility -> batch()"})]}),"\n",(0,r.jsxs)(t.li,{children:["Select the reward increment extrinsic: ",(0,r.jsx)(t.code,{children:"parachainStaking -> incrementCollatorRewards()"})]}),"\n",(0,r.jsxs)(t.li,{children:["Press the ",(0,r.jsx)(t.code,{children:"+"})," button and add the reward claiming extrinsic: ",(0,r.jsx)(t.code,{children:"parachainStaking -> claimRewards()"})]}),"\n",(0,r.jsxs)(t.li,{children:["Sign and submit the extrinsic (the ",(0,r.jsx)(t.em,{children:"Submit Transaction"})," button)"]}),"\n"]}),(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:n(4182).Z+"",width:"1421",height:"658"})})]}),(0,r.jsx)(o.Z,{value:"polkadot-js",label:"Polkadot JS",attributes:{"data-value":"magenta"},children:(0,r.jsx)(i.Z,{className:"language-ts",children:d})})]})})}function u(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}const p="import * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function claimDelegatorStakingRewards(\n  submitterAccount: Kilt.KeyringPair\n) {\n  const api = Kilt.ConfigService.get('api')\n\n  const tx = api.tx.utility.batch([\n    // convert delegator participation points into rewards\n    api.tx.parachainStaking.incrementDelegatorRewards(),\n    // mint rewards for delegator address\n    api.tx.parachainStaking.claimRewards()\n  ])\n\n  // boilerplate to sign and send tx to websocket\n  return new Promise((resolve, reject) =>\n    tx.signAndSend(submitterAccount, ({ status, dispatchError }) => {\n      if (status.isFinalized && !dispatchError) {\n        onSuccess(\n          submitterAccount.address,\n          status.asFinalized.toString(),\n          resolve\n        )\n      }\n      if (dispatchError) {\n        if (dispatchError.isModule) {\n          // for module errors, we have the section indexed, lookup\n          const decoded = api.registry.findMetaError(dispatchError.asModule)\n          const { docs, name, section } = decoded\n\n          const error = new Error(`${section}.${name}: ${docs.join(' ')}`)\n          onError(error, reject)\n        } else {\n          // Other, CannotLookup, BadOrigin, no extra info\n          const error = new Error(dispatchError.toString())\n          onError(error, reject)\n        }\n      }\n    })\n  )\n}\n\n// boilerplate handlers\nconst onSuccess = (\n  address: string,\n  txHash: string,\n  resolve: (res: string) => void\n) => {\n  console.log(\n    `Claimed delegator staking rewards for ${address} with tx hash ${txHash}`\n  )\n  resolve(txHash)\n}\nconst onError = (error: Error, reject: (err: Error) => void) => {\n  console.error(`Failed to claim delegator staking rewards due to ${error}`)\n  reject(error)\n}\n";function m(e){const t={code:"code",em:"em",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",...(0,a.a)(),...e.components};return(0,r.jsx)("div",{className:"nested-tab",children:(0,r.jsxs)(s.Z,{groupId:"rewards-apps-code",defaultValue:"polkadot-apps",children:[(0,r.jsxs)(o.Z,{value:"polkadot-apps",label:"Polkadot Apps",attributes:{"data-value":"magenta"},children:[(0,r.jsx)(t.h3,{id:"prepare-claiming",children:"Prepare claiming"}),(0,r.jsxs)(t.p,{children:["First, you need to convert your ",(0,r.jsx)(t.em,{children:"reward points"})," into balance."]}),(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["Select the delegator account for which you want to claim the rewards. It should have enough balance to cover the transaction fee which is around 0.0001 KILT (the ",(0,r.jsx)(t.em,{children:"using the selected account"})," field)"]}),"\n",(0,r.jsxs)(t.li,{children:["Select the appropriate extrinsic: ",(0,r.jsx)(t.code,{children:"parachainStaking -> incrementDelegatorRewards()"})]}),"\n",(0,r.jsxs)(t.li,{children:["Sign and submit the extrinsic (the ",(0,r.jsx)(t.em,{children:"Submit Transaction"})," button)"]}),"\n"]}),(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:n(8786).Z+"",width:"1420",height:"459"})}),(0,r.jsx)(t.h3,{id:"claim",children:"Claim"}),(0,r.jsx)(t.p,{children:"Finally, you can claim your well deserved staking rewards."}),(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["Select the delegator account for which you want to claim the rewards. It should have enough balance to cover the transaction fee which is around 0.0001 KILT (the ",(0,r.jsx)(t.em,{children:"using the selected account"})," field)"]}),"\n",(0,r.jsxs)(t.li,{children:["Select the appropriate extrinsic: ",(0,r.jsx)(t.code,{children:"parachainStaking -> claimRewards()"})]}),"\n",(0,r.jsxs)(t.li,{children:["Sign and submit the extrinsic (the ",(0,r.jsx)(t.em,{children:"Submit Transaction"})," button)"]}),"\n"]}),(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:n(6201).Z+"",width:"1420",height:"438"})}),(0,r.jsx)(t.h3,{id:"recommendation-batched-call",children:"Recommendation: Batched call"}),(0,r.jsx)(t.p,{children:"We recommend to execute both extrinsics in a single batch to save on transaction fees:"}),(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["Select the delegator account for which you want to claim the rewards.\nIt should have enough balance to cover the transaction fee which is around 0.000112 KILT (the ",(0,r.jsx)(t.em,{children:"using the selected account"})," field)"]}),"\n",(0,r.jsxs)(t.li,{children:["Select the batch extrinsic: ",(0,r.jsx)(t.code,{children:"utility -> batch()"})]}),"\n",(0,r.jsxs)(t.li,{children:["Select the reward increment extrinsic: ",(0,r.jsx)(t.code,{children:"parachainStaking -> incrementDelegatorRewards()"})]}),"\n",(0,r.jsxs)(t.li,{children:["Press the ",(0,r.jsx)(t.code,{children:"+"})," button and add the reward claiming extrinsic: ",(0,r.jsx)(t.code,{children:"parachainStaking -> claimRewards()"})]}),"\n",(0,r.jsxs)(t.li,{children:["Sign and submit the extrinsic (the ",(0,r.jsx)(t.em,{children:"Submit Transaction"})," button)"]}),"\n"]}),(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:n(8050).Z+"",width:"1419",height:"649"})})]}),(0,r.jsx)(o.Z,{value:"polkadot-js",label:"Polkadot JS",attributes:{"data-value":"magenta"},children:(0,r.jsx)(i.Z,{className:"language-ts",children:p})})]})})}function g(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}const x={id:"claim-rewards",title:"Claim Staking Rewards"},j=void 0,b={id:"participate/staking/claim-rewards",title:"Claim Staking Rewards",description:"Until runtime version 1.7.5 (spiritnet-10750), staking rewards were automatically minted.",source:"@site/docs/participate/01_staking/04_claim_rewards.md",sourceDirName:"participate/01_staking",slug:"/participate/staking/claim-rewards",permalink:"/docs/participate/staking/claim-rewards",draft:!1,unlisted:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/participate/01_staking/04_claim_rewards.md",tags:[],version:"current",lastUpdatedAt:1707216207,formattedLastUpdatedAt:"Feb 6, 2024",sidebarPosition:4,frontMatter:{id:"claim-rewards",title:"Claim Staking Rewards"},sidebar:"staking",previous:{title:"Lifecycle of a Delegator",permalink:"/docs/participate/staking/delegate/lifecycle"},next:{title:"Unlock Unstaked Tokens",permalink:"/docs/participate/staking/unlock-unstaked"}},w={},f=[{value:"How to check the reward amount",id:"how-to-check-the-reward-amount",level:2},{value:"How to claim",id:"how-to-claim",level:2}];function k(e){const t={a:"a",code:"code",em:"em",h2:"h2",img:"img",li:"li",mermaid:"mermaid",ol:"ol",p:"p",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["Until runtime version 1.7.5 (",(0,r.jsx)(t.code,{children:"spiritnet-10750"}),"), staking rewards were automatically minted.\nIn 1.8.0 (",(0,r.jsx)(t.code,{children:"spiritnet-10801"}),") this will change:\nHereafter, the rewards are still accounted to the collators and their delegators in each block.\nHowever, they need to be actively claimed by calling an extrinsic, similar to the pull-based approach on Polkadot.\nSince the rewards never expire, one does not need to rush to do so."]}),"\n",(0,r.jsxs)(t.p,{children:["This change improves the scalability of our LDPoS by orders of magnitude because it removes the ",(0,r.jsx)(t.code,{children:"Rewarded"})," events for a collator and all their delegators in each block.\nThis reduces the number of taxable events from many thousands per year to any number a user might find suitable.\nPlease check our blogpost for more details."]}),"\n",(0,r.jsx)(t.h2,{id:"how-to-check-the-reward-amount",children:"How to check the reward amount"}),"\n",(0,r.jsx)(t.p,{children:"Unfortunately, the amount of accumulated rewards are not directly stored on the chain but divided into multiple storage entries.\nLuckily, you can easily query your current reward status by performing a runtime API call which we created for that specific purpose.\nSince this is just a simple query, it does not cost any transaction fees."}),"\n",(0,r.jsxs)(s.Z,{groupId:"rewards-apps-code",defaultValue:"polkadot-apps",children:[(0,r.jsxs)(o.Z,{value:"polkadot-apps",label:"Polkadot Apps",children:[(0,r.jsxs)(t.p,{children:["In the Polkadot JS Apps (",(0,r.jsx)(t.a,{href:"https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkilt-rpc.dwellir.com#/explorer",children:"wss://spiritnet.kilt.io"}),", or ",(0,r.jsx)(t.a,{href:"https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fperegrine-stg.kilt.io#/explorer",children:"wss://peregrine.kilt.io"}),") go to ",(0,r.jsx)(t.code,{children:"Developer -> Runtime calls"}),"."]}),(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["Select the ",(0,r.jsx)(t.code,{children:"parachainStaking"})," endpoint."]}),"\n",(0,r.jsxs)(t.li,{children:["Select the ",(0,r.jsx)(t.code,{children:"getUnclaimedStakingRewards(account)"})," call."]}),"\n",(0,r.jsxs)(t.li,{children:["Select your KILT address (the ",(0,r.jsx)(t.em,{children:"account: AccountId32"})," field)"]}),"\n",(0,r.jsxs)(t.li,{children:["Submit the runtime call (the ",(0,r.jsx)(t.em,{children:"Submit Runtime call"})," button). You do not need to sign or pay any fees."]}),"\n"]}),(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:n(6593).Z+"",width:"1421",height:"415"})})]}),(0,r.jsx)(o.Z,{value:"polkadot-js",label:"Polkadot JS",children:(0,r.jsx)(i.Z,{className:"language-ts",children:l})})]}),"\n",(0,r.jsx)(t.h2,{id:"how-to-claim",children:"How to claim"}),"\n",(0,r.jsxs)(t.p,{children:["In order to move the staking rewards into your wallet, you need to call two different extrinsics: ",(0,r.jsx)(t.code,{children:"increment{Collator, Delegator}Rewards"})," and ",(0,r.jsx)(t.code,{children:"claimRewards"}),".\nThis can be done sequentially or in a batch.\nTo save transaction fees, we recommend the latter ",(0,r.jsx)(t.a,{href:"#recommendation-batched-call",children:"batched call"}),"."]}),"\n",(0,r.jsx)("div",{className:"kilt-mermaid",children:(0,r.jsx)(t.mermaid,{value:'\ngraph TD\nAlice("Alice holds free KILT") ---\x3e |"call joinCandidates"| C("Active Collator")\nAlice ---\x3e |"call joinDelegators"| D("Active Delegator")\nC ---\x3e |"build block"| R\nD ---\x3e |"delegated collator \\n builds block"| R("Reward counter is \\n internally increased")\nR ---\x3e |"call increment...Rewards"| R2("Rewards are \\n converted into Balance")\nR2 ---\x3e |"call claimRewards"| R3("Rewards are moved \\n into Alice\'s wallet")\n'})}),"\n",(0,r.jsx)(c.ZP,{}),"\n",(0,r.jsxs)(s.Z,{groupId:"collator-delegator",defaultValue:"Collator",children:[(0,r.jsx)(o.Z,{value:"Collator",label:"Collator",children:(0,r.jsx)(u,{})}),(0,r.jsx)(o.Z,{value:"Delegator",label:"Delegator",children:(0,r.jsx)(g,{})})]})]})}function v(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(k,{...e})}):k(e)}},5720:(e,t,n)=>{n.d(t,{ZP:()=>s});var r=n(5893),a=n(1151);function i(e){const t={a:"a",admonition:"admonition",code:"code",p:"p",strong:"strong",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsxs)(t.p,{children:["You can either execute this transaction in Polkadot JS Apps or the ",(0,r.jsx)(t.a,{href:"/docs/develop/builtonkilt#web-apps",children:(0,r.jsx)(t.strong,{children:"KILT Stakeboard"})}),", which serves as an in-house developed Frontend for all KILT staking activity.\nBelow, we outline the steps for Polkadot JS Apps.\nThe process for KILT Stakeboard is described in detail in the ",(0,r.jsx)(t.a,{href:"https://support.kilt.io/support/solutions/80000442174",children:(0,r.jsx)(t.strong,{children:"BOTLabs Trusted Entity support hub"})}),"."]})}),"\n",(0,r.jsxs)(t.p,{children:["In the Polkadot JS Apps (",(0,r.jsx)(t.a,{href:"https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkilt-rpc.dwellir.com#/explorer",children:"wss://spiritnet.kilt.io"}),", or ",(0,r.jsx)(t.a,{href:"https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fperegrine-stg.kilt.io#/explorer",children:"wss://peregrine.kilt.io"}),") go to ",(0,r.jsx)(t.code,{children:"Developer -> Extrinsics -> Submission"}),"."]})]})}function s(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(i,{...e})}):i(e)}},5162:(e,t,n)=>{n.d(t,{Z:()=>s});n(7294);var r=n(512);const a={tabItem:"tabItem_Ymn6"};var i=n(5893);function s(e){let{children:t,hidden:n,className:s}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,r.Z)(a.tabItem,s),hidden:n,children:t})}},4866:(e,t,n)=>{n.d(t,{Z:()=>v});var r=n(7294),a=n(512),i=n(2466),s=n(6550),o=n(469),c=n(1980),l=n(7392),d=n(12);function h(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??function(e){return h(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}(n);return function(e){const t=(0,l.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const a=(0,s.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,c._X)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(a.location.search);t.set(i,e),a.replace({...a.location,search:t.toString()})}),[i,a])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,i=u(e),[s,c]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:i}))),[l,h]=m({queryString:n,groupId:a}),[g,x]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,i]=(0,d.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:a}),j=(()=>{const e=l??g;return p({value:e,tabValues:i})?e:null})();(0,o.Z)((()=>{j&&c(j)}),[j]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);c(e),h(e),x(e)}),[h,x,i]),tabValues:i}}var x=n(2389);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=n(5893);function w(e){let{className:t,block:n,selectedValue:r,selectValue:s,tabValues:o}=e;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,i.o5)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),a=o[n].value;a!==r&&(l(t),s(a))},h=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":n},t),children:o.map((e=>{let{value:t,label:n,attributes:i}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>c.push(e),onKeyDown:h,onClick:d,...i,className:(0,a.Z)("tabs__item",j.tabItem,i?.className,{"tabs__item--active":r===t}),children:n??t},t)}))})}function f(e){let{lazy:t,children:n,selectedValue:a}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:i.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a})))})}function k(e){const t=g(e);return(0,b.jsxs)("div",{className:(0,a.Z)("tabs-container",j.tabList),children:[(0,b.jsx)(w,{...e,...t}),(0,b.jsx)(f,{...e,...t})]})}function v(e){const t=(0,x.Z)();return(0,b.jsx)(k,{...e,children:h(e.children)},String(t))}},4182:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/parachainStaking-batch-incrementCollatorRewards-claimRewards-cf9d1be88767ac8a9fe4e1f354fedc66.png"},8050:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/parachainStaking-batch-incrementDelegatorRewards-claimRewards-52eda11f9fc6c1f6e59e553c16830421.png"},6201:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/parachainStaking-claimRewards-0ac5ca4fccb9cacf7299444aa349cefb.png"},6593:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/parachainStaking-getUnclaimedStakingRewards-46b8e3d6ece765477c75ec3c40bcc2c3.png"},2299:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/parachainStaking-incrementCollatorRewards-e604fbe81682f3a4b13b2befd28829a5.png"},8786:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/parachainStaking-incrementDelegatorRewards-701363b804c4b0d666abc9afc9107a0f.png"}}]);