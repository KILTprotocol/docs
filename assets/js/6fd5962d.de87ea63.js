(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8275],{25380:function(t){function e(t){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}e.keys=function(){return[]},e.resolve=e,e.id=25380,t.exports=e},51909:function(t,e,i){"use strict";var n=i(83117),o=i(67294),d=i(52263),a=i(73945),s=i(28182),l=i(12175),c=i(65488),r=i(85162),u=i(90814);e.Z=t=>{let{children:e,fileName:i,...p}=t;const h=e,{code:k}=(0,l.transform)(h,{plugins:["transform-typescript"],retainLines:!0}),{siteConfig:{customFields:{prettierConfig:m}}}=(0,d.Z)(),f=(0,a.format)(k,{parser:s.parsers.babel.parse,...m}),D=i?`${i}.ts`:void 0,b=i?`${i}.js`:void 0;return o.createElement(c.Z,{groupId:"ts-js-choice"},o.createElement(r.Z,{value:"ts",label:"Typescript",default:!0},o.createElement(u.Z,(0,n.Z)({},p,{className:"language-ts",title:D}),h)),o.createElement(r.Z,{value:"js",label:"Javascript"},o.createElement(u.Z,(0,n.Z)({},p,{className:"language-js",title:b}),f)))}},28236:function(t,e,i){"use strict";i.r(e),i.d(e,{assets:function(){return c},contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return r}});var n=i(83117),o=(i(67294),i(3905)),d=i(51909);const a={id:"full-did-update",title:"Update a Full DID"},s=void 0,l={unversionedId:"develop/sdk/cookbook/dids/full-did-update",id:"develop/sdk/cookbook/dids/full-did-update",title:"Update a Full DID",description:"Once anchored to the KILT blockchain, a full DID can be updated.",source:"@site/docs/develop/01_sdk/02_cookbook/01_dids/03_full_did_update.md",sourceDirName:"develop/01_sdk/02_cookbook/01_dids",slug:"/develop/sdk/cookbook/dids/full-did-update",permalink:"/docs/develop/sdk/cookbook/dids/full-did-update",draft:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/01_sdk/02_cookbook/01_dids/03_full_did_update.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"full-did-update",title:"Update a Full DID"},sidebar:"sdk",previous:{title:"Create a Full DID",permalink:"/docs/develop/sdk/cookbook/dids/full-did-creation"},next:{title:"Sign Extrinsics With a Full DID",permalink:"/docs/develop/sdk/cookbook/dids/full-did-batch"}},c={},r=[],u={toc:r};function p(t){let{components:e,...i}=t;return(0,o.kt)("wrapper",(0,n.Z)({},u,i,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Once anchored to the KILT blockchain, a full DID can be updated.\nFor instance, the following snippet shows how to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"authorizeBatch")," function to update the authentication key ",(0,o.kt)("em",{parentName:"p"},"and")," remove a service endpoint for a full DID in the same transaction."),(0,o.kt)(d.Z,{mdxType:"TsJsBlock"},"import * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function updateFullDid(\n  newAuthKeypair: Kilt.KiltKeyringPair,\n  fullDid: Kilt.DidUri,\n  submitterAccount: Kilt.KiltKeyringPair,\n  signCallback: Kilt.SignExtrinsicCallback\n): Promise<Kilt.DidDocument> {\n  const api = Kilt.ConfigService.get('api')\n\n  // Create the tx to update the authentication key.\n  const didKeyUpdateTx = api.tx.did.setAuthenticationKey(\n    Kilt.Did.publicKeyToChain(newAuthKeypair)\n  )\n  // Create the tx to remove the service with ID `#my-service`.\n  const didServiceRemoveTx = api.tx.did.removeServiceEndpoint(\n    Kilt.Did.resourceIdToChain('#my-service')\n  )\n\n  // Create and sign the DID operation that contains the two (unsigned) txs.\n  // This results in a DID-signed tx that can be then signed and submitted to the KILT blockchain by the account\n  // authorized in this operation, Alice in this case.\n  const authorizedBatchedTxs = await Kilt.Did.authorizeBatch({\n    batchFunction: api.tx.utility.batchAll,\n    did: fullDid,\n    extrinsics: [didKeyUpdateTx, didServiceRemoveTx],\n    sign: signCallback,\n    submitter: submitterAccount.address\n  })\n\n  // Submit the DID update tx to the KILT blockchain after signing it with the authorized KILT account.\n  await Kilt.Blockchain.signAndSubmitTx(authorizedBatchedTxs, submitterAccount)\n\n  // Get the updated DID Document.\n  const encodedUpdatedDidDetails = await api.call.did.query(\n    Kilt.Did.toChain(fullDid)\n  )\n  return Kilt.Did.linkedInfoFromChain(encodedUpdatedDidDetails).document\n}\n"))}p.isMDXComponent=!0}}]);