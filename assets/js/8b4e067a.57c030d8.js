(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[378],{5380:e=>{function t(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=()=>[],t.resolve=t,t.id=5380,e.exports=t},1909:(e,t,n)=>{"use strict";n.d(t,{Z:()=>u});var i=n(7462),o=n(7294),a=n(2263),r=n(3945),l=n(8182),s=n(2175),p=n(4866),c=n(5162),d=n(814);const u=e=>{let{children:t,fileName:n,...u}=e;const m=t,{code:k}=(0,s.transform)(m,{plugins:["transform-typescript"],retainLines:!0}),{siteConfig:{customFields:{prettierConfig:h}}}=(0,a.Z)(),g=(0,r.format)(k,{parser:l.parsers.babel.parse,...h}),f=n?`${n}.ts`:void 0,y=n?`${n}.js`:void 0;return o.createElement(p.Z,{groupId:"ts-js-choice"},o.createElement(c.Z,{value:"ts",label:"Typescript",default:!0},o.createElement(d.Z,(0,i.Z)({},u,{className:"language-ts",title:f}),m)),o.createElement(c.Z,{value:"js",label:"Javascript"},o.createElement(d.Z,(0,i.Z)({},u,{className:"language-js",title:y}),g)))}},3299:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>K,contentTitle:()=>I,default:()=>L,frontMatter:()=>w,metadata:()=>D,toc:()=>x});var i=n(7462),o=n(7294),a=n(3905),r=n(814);const l=e=>{let{children:t,funcName:n="main",funcEnd:i="}",snippets:a,leadingSpaces:l=2,...s}=e;const p=t.split(/\r?\n/);let c="";if(a)c=JSON.parse(a).map((e=>Array.isArray(e)?p.slice(e[0],e[1]).map((e=>e.slice(l))).join("\n"):e)).join("\n");else if(n){let e,t;for(let i=0;i<p.length;i++)if(p[i].includes(n)){if(e=i,p[i].includes(" {"))break}else if(p[i].includes(" {")&&void 0!==e){e=i;break}for(let n=p.length-1;n>0;n--)if(p[n].includes(i)){t=n;break}c=p.slice(e+1,t).map((e=>e.slice(l))).join("\n")}return o.createElement(r.Z,s,c)};var s=n(2263),p=n(3945),c=n(8182),d=n(2175),u=n(4866),m=n(5162);const k=e=>{let{children:t,fileName:n,...a}=e;const r=t,{code:k}=(0,d.transform)(r,{plugins:["transform-typescript"],retainLines:!0}),{siteConfig:{customFields:{prettierConfig:h}}}=(0,s.Z)(),g=(0,p.format)(k,{parser:c.parsers.babel.parse,...h}),f=n?`${n}.ts`:void 0,y=n?`${n}.js`:void 0;return o.createElement(u.Z,{groupId:"ts-js-choice"},o.createElement(m.Z,{value:"ts",label:"Typescript",default:!0},o.createElement(l,(0,i.Z)({},a,{className:"language-ts",title:f}),r)),o.createElement(m.Z,{value:"js",label:"Javascript"},o.createElement(l,(0,i.Z)({},a,{className:"language-js",title:y}),g)))};n(1909);const h="export async function main() {\n  console.log('Hello, world!')\n}\n",g="import type { ApiPromise } from '@polkadot/api'\n\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function main(): Promise<ApiPromise> {\n  const api = await Kilt.connect('wss://spiritnet.kilt.io/')\n\n  return api\n}\n",f="import type { ApiPromise } from '@polkadot/api'\n\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function main(): Promise<ApiPromise> {\n  const api = await Kilt.connect('wss://peregrine.kilt.io/')\n\n  return api\n}\n",y="import type { ApiPromise } from '@polkadot/api'\n\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function main(api: ApiPromise): Promise<Kilt.DidUri | null> {\n  const encodedJohnDoeDetails = await api.call.did.queryByWeb3Name('john_doe')\n\n  // This function will throw if johnDoeOwner does not exist\n  const {\n    document: { uri }\n  } = Kilt.Did.linkedInfoFromChain(encodedJohnDoeDetails)\n  console.log(`My name is john_doe and this is my DID: \"${uri}\"`)\n\n  return uri\n}\n",b="import * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function main(\n  uri: Kilt.DidUri\n): Promise<Kilt.DidServiceEndpoint[]> {\n  const johnDoeDidDocument = await Kilt.Did.resolve(uri)\n  console.log(`John Doe's DID Document:`)\n  console.log(JSON.stringify(johnDoeDidDocument, null, 2))\n\n  const endpoints = johnDoeDidDocument?.document?.service\n  if (!endpoints) {\n    console.log('No endpoints for the DID.')\n    return []\n  }\n\n  console.log('Endpoints:')\n  console.log(JSON.stringify(endpoints, null, 2))\n\n  return endpoints\n}\n",v="import axios from 'axios'\n\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function main(\n  endpoints: Kilt.DidServiceEndpoint[]\n): Promise<Kilt.ICredential> {\n  const {\n    data: [{ credential }]\n  } = await axios.get<Kilt.KiltPublishedCredentialCollectionV1>(\n    endpoints[0].serviceEndpoint[0]\n  )\n\n  return credential\n}\n",N="import * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function main(credential: Kilt.ICredential): Promise<void> {\n  try {\n    const { attester, revoked } = await Kilt.Credential.verifyCredential(\n      credential\n    )\n\n    // Verify that the credential is not revoked. Exception caught by the catch {} block below.\n    if (revoked) {\n      throw new Error('The credential has been revoked, hence it is not valid.')\n    }\n    console.log(\n      `John Doe's credential is valid and has been attested by ${attester}!`,\n      JSON.stringify(credential, null, 2)\n    )\n  } catch {\n    console.log(\"John Doe's credential is not valid.\")\n  }\n}\n",T="import * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function main(): Promise<void> {\n  await Kilt.disconnect()\n}\n",w={id:"quickstart",title:"Quickstart"},I=void 0,D={unversionedId:"develop/sdk/quickstart",id:"develop/sdk/quickstart",title:"Quickstart",description:"Get started with KILT by following this guide.",source:"@site/docs/develop/01_sdk/01_quickstart.md",sourceDirName:"develop/01_sdk",slug:"/develop/sdk/quickstart",permalink:"/docs/develop/sdk/quickstart",draft:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/01_sdk/01_quickstart.md",tags:[],version:"current",lastUpdatedAt:1691149312,formattedLastUpdatedAt:"Aug 4, 2023",sidebarPosition:1,frontMatter:{id:"quickstart",title:"Quickstart"},sidebar:"sdk",next:{title:"Generate DID keys",permalink:"/docs/develop/sdk/cookbook/dids/key-generation"}},K={},x=[{value:"Setup",id:"setup",level:2},{value:"Import the KILT SDK",id:"import-the-kilt-sdk",level:3},{value:"Connect to the KILT Blockchain",id:"connect-to-the-kilt-blockchain",level:3},{value:"Query a KILT Identity",id:"query-a-kilt-identity",level:2},{value:"Retrieve and Verify a Credential",id:"retrieve-and-verify-a-credential",level:2}],j={toc:x},C="wrapper";function L(e){let{components:t,...n}=e;return(0,a.kt)(C,(0,i.Z)({},j,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Get started with KILT by following this guide.\nYou'll learn to:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Import the ",(0,a.kt)("strong",{parentName:"li"},"KILT SDK")," into your project"),(0,a.kt)("li",{parentName:"ol"},"Connect to the ",(0,a.kt)("strong",{parentName:"li"},"KILT blockchain")),(0,a.kt)("li",{parentName:"ol"},"Query a ",(0,a.kt)("strong",{parentName:"li"},"web3name")," to retrieve its ",(0,a.kt)("strong",{parentName:"li"},"DID")),(0,a.kt)("li",{parentName:"ol"},"Verify a ",(0,a.kt)("strong",{parentName:"li"},"credential")," using a ",(0,a.kt)("strong",{parentName:"li"},"DID service"))),(0,a.kt)("p",null,"This quickstart guide provides hands-on experience to enhance your understanding of KILT.\nBasic knowledge of JavaScript and command-line tools is recommended.\nFor more in-depth tutorials, we'll suggest additional guides."),(0,a.kt)("h2",{id:"setup"},"Setup"),(0,a.kt)("p",null,"Let's start by creating a new project from scratch.\nCreate a new project in a fresh directory by running ",(0,a.kt)("inlineCode",{parentName:"p"},"mkdir kilt-rocks && cd kilt-rocks"),"."),(0,a.kt)(u.Z,{groupId:"ts-js-choice",mdxType:"Tabs"},(0,a.kt)(m.Z,{value:"ts",label:"Typescript",default:!0,mdxType:"TabItem"},(0,a.kt)("p",null,"  From inside the ",(0,a.kt)("inlineCode",{parentName:"p"},"kilt-rocks")," project directory, install the ",(0,a.kt)("strong",{parentName:"p"},"KILT SDK"),", ",(0,a.kt)("strong",{parentName:"p"},"Typescript"),", ",(0,a.kt)("strong",{parentName:"p"},"ts-node")," and ",(0,a.kt)("strong",{parentName:"p"},"Axios"),":"),(0,a.kt)(u.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,a.kt)(m.Z,{value:"npm",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm init -y\nnpm install @kiltprotocol/sdk-js ts-node typescript axios\n"))),(0,a.kt)(m.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn init -y\nyarn add @kiltprotocol/sdk-js ts-node typescript axios\n"))),(0,a.kt)(m.Z,{value:"pnpm",label:"pnpm",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pnpm init -y\npnpm add @kiltprotocol/sdk-js ts-node typescript axios\n")))),(0,a.kt)("p",null,"  With all the required dependencies set, just create a new (empty) script file with ",(0,a.kt)("inlineCode",{parentName:"p"},"touch quickstart.ts"),".")),(0,a.kt)(m.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,a.kt)("p",null,"  From inside the ",(0,a.kt)("inlineCode",{parentName:"p"},"kilt-rocks")," project directory, install the ",(0,a.kt)("strong",{parentName:"p"},"KILT SDK"),", ",(0,a.kt)("strong",{parentName:"p"},"Node")," and ",(0,a.kt)("strong",{parentName:"p"},"Axios"),":"),(0,a.kt)(u.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,a.kt)(m.Z,{value:"npm",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm init -y\nnpm install @kiltprotocol/sdk-js node axios\n"))),(0,a.kt)(m.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn init -y\nyarn add @kiltprotocol/sdk-js node axios\n"))),(0,a.kt)(m.Z,{value:"pnpm",label:"pnpm",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pnpm init -y\npnpm add @kiltprotocol/sdk-js node axios\n")))),(0,a.kt)("p",null,"  With all the required dependencies set, just create a new (empty) script file with ",(0,a.kt)("inlineCode",{parentName:"p"},"touch quickstart.js"),"."))),(0,a.kt)(u.Z,{groupId:"ts-js-choice",mdxType:"Tabs"},(0,a.kt)(m.Z,{value:"ts",label:"Typescript",default:!0,mdxType:"TabItem"},(0,a.kt)("p",null,"  Once you've imported the SDK, you'll gain access to KILT's functionalities.\nNow, let's create a new file containing the TypeScript compiler configuration."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"touch tsconfig.json\n")),(0,a.kt)("p",null,"  Inside the ",(0,a.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," file, include the following configuration:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "compilerOptions": {\n      "module": "CommonJS"\n  }\n}\n')),(0,a.kt)("p",null,"  This will set the ",(0,a.kt)("inlineCode",{parentName:"p"},"module"),' option to "CommonJS" for TypeScript compilation.')),(0,a.kt)(m.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,a.kt)("p",null,"  After importing the SDK, you'll have access to KILT's functionalities.\nTo enable ES modules in your project, add ",(0,a.kt)("inlineCode",{parentName:"p"},'"type": "module"')," to the ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," file."))),(0,a.kt)("p",null,"Let's first declare our ",(0,a.kt)("inlineCode",{parentName:"p"},"main")," function that will execute our script:"),(0,a.kt)(r.Z,{className:"language-ts",mdxType:"CodeBlock"},h),(0,a.kt)("p",null,"If the setup is correct you can execute the script by calling the name of the file using Node."),(0,a.kt)(u.Z,{groupId:"ts-js-choice",mdxType:"Tabs"},(0,a.kt)(m.Z,{value:"ts",label:"Typescript",default:!0,mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn ts-node quickstart.ts\n"))),(0,a.kt)(m.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"node quickstart.js\n")))),(0,a.kt)("p",null,"As we will extend the code in this file, you can always execute it with the same command."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Let's get started! \ud83d\udd25")),(0,a.kt)("h3",{id:"import-the-kilt-sdk"},"Import the KILT SDK"),(0,a.kt)("p",null,"Let's begin by importing the ",(0,a.kt)("strong",{parentName:"p"},"KILT SDK")," and ",(0,a.kt)("strong",{parentName:"p"},"Axios"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import * as Kilt from '@kiltprotocol/sdk-js'\nimport axios from 'axios'\n")),(0,a.kt)("p",null,"Now you are able to access the SDK and all its functionality.\nWe will move onto connecting to the ",(0,a.kt)("strong",{parentName:"p"},"KILT blockchain"),"."),(0,a.kt)("h3",{id:"connect-to-the-kilt-blockchain"},"Connect to the KILT Blockchain"),(0,a.kt)("p",null,"To perform operations that rely on the KILT blockchain, such as querying and verifying a credential, it's essential to connect to the KILT blockchain.\nWithin the same ",(0,a.kt)("inlineCode",{parentName:"p"},"main")," function, configure the SDK to connect to a KILT node using the ",(0,a.kt)("inlineCode",{parentName:"p"},"Kilt.connect()")," method:"),(0,a.kt)(u.Z,{groupId:"chain-choice",mdxType:"Tabs"},(0,a.kt)(m.Z,{value:"pere",label:"Peregrine (Testnet)",default:!0,mdxType:"TabItem"},"Peregrine is the development blockchain. For testing and development purposes connect to this network.",(0,a.kt)(l,{className:"language-ts",funcEnd:"return",mdxType:"SnippetBlock"},f)),(0,a.kt)(m.Z,{value:"spirit",label:"Spiritnet (Production)",mdxType:"TabItem"},"Spiritnet is the production blockchain. When you are ready to publish your DApp, connect to the Spiritnet network for production purposes.",(0,a.kt)(l,{className:"language-ts",funcEnd:"return",mdxType:"SnippetBlock"},g))),(0,a.kt)("p",null,"To ensure proper cleanup, call the ",(0,a.kt)("inlineCode",{parentName:"p"},"Kilt.disconnect()")," function at the bottom of the main function:"),(0,a.kt)(l,{className:"language-ts",mdxType:"SnippetBlock"},T),(0,a.kt)("p",null,"By adding ",(0,a.kt)("inlineCode",{parentName:"p"},"await Kilt.disconnect()")," at the end of the main function, you ensure that the connection to the blockchain node is properly closed when the script finishes executing.\nThis helps maintain the integrity of your application and is a good practice to follow."),(0,a.kt)("p",null,"Congratulations!\nYou have connected to a KILT blockchain node.\nLet's now start querying some data from the chain!"),(0,a.kt)("h2",{id:"query-a-kilt-identity"},"Query a KILT Identity"),(0,a.kt)("p",null,"We will be querying information related to a ",(0,a.kt)("strong",{parentName:"p"},"web3name")," (",(0,a.kt)("inlineCode",{parentName:"p"},"john_doe"),"), and using them to retrieve the ",(0,a.kt)("strong",{parentName:"p"},"KILT DID")," linked to it.\nIn between the ",(0,a.kt)("inlineCode",{parentName:"p"},"Kilt.connect()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Kilt.disconnect()")," lines, add the following code:"),(0,a.kt)(l,{className:"language-ts",funcEnd:"return",mdxType:"SnippetBlock"},y),(0,a.kt)("p",null,"Try executing it and check the result."),(0,a.kt)("p",null,"Did you get the DID? Nice work! You now have ",(0,a.kt)("inlineCode",{parentName:"p"},"john_doe"),"'s DID.\nNow let's see if John Doe has any public KILT credentials that we could retrieve and verify!"),(0,a.kt)("h2",{id:"retrieve-and-verify-a-credential"},"Retrieve and Verify a Credential"),(0,a.kt)("p",null,"A ",(0,a.kt)("strong",{parentName:"p"},"KILT DID")," can expose services, which allow external resources to be linked to the DID.\nOne type of external resource is represented by, you guessed it, ",(0,a.kt)("strong",{parentName:"p"},"KILT credentials"),"!\nTherefore, let's see how we can retrieve the ",(0,a.kt)("strong",{parentName:"p"},"services")," of John Doe's DID and see if they link to any public credentials for us to ",(0,a.kt)("strong",{parentName:"p"},"query")," and ",(0,a.kt)("strong",{parentName:"p"},"verify"),"."),(0,a.kt)("p",null,"We will keep adding code below what we just added.\nThe code snippet retrieves the services exposed by the DID we found for ",(0,a.kt)("inlineCode",{parentName:"p"},"john_doe"),":"),(0,a.kt)(l,{className:"language-ts",funcEnd:"return",mdxType:"SnippetBlock"},b),(0,a.kt)("p",null,"If the snippet printed some endpoints, congratulations!\nLet's see if we can find a credential among them."),(0,a.kt)("p",null,"We can select one of the endpoints and query the URL to see if it returns a KILT credential\xa0collection as described in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/KILTprotocol/spec-KiltPublishedCredentialCollectionV1"},"KiltPublishedCredentialCollectionV1 specification"),":"),(0,a.kt)(k,{funcEnd:"return",mdxType:"TsJsSnippet"},v),(0,a.kt)("p",null,"If the script completes with no errors, it means that we were able to retrieve the published credential using the URL specified in the service."),(0,a.kt)("p",null,"We will now have to make sure the credential is ",(0,a.kt)("strong",{parentName:"p"},"valid")," and has a valid ",(0,a.kt)("strong",{parentName:"p"},"structure"),"."),(0,a.kt)("p",null,"It is then time to verify the credential.\nThis will be indicated by the result of the ",(0,a.kt)("strong",{parentName:"p"},"verification")," process as shown in the snippet below:"),(0,a.kt)(l,{className:"language-ts",mdxType:"SnippetBlock"},N),(0,a.kt)("p",null,"Now execute the script wait to see whether we can successfully retrieve ",(0,a.kt)("strong",{parentName:"p"},"and")," verify one of John Doe's credentials!"),(0,a.kt)("p",null,"Was it successful? Nice Job!"),(0,a.kt)("p",null,"If you want to explore more of KILT's features, check out our ",(0,a.kt)("a",{parentName:"p",href:"/docs/concepts/what-is-kilt"},"Concepts section"),".\nIf you want to dive deeper into the SDK, please advance to the next section: ",(0,a.kt)("a",{parentName:"p",href:"/docs/develop/sdk/cookbook/dids/light-did-creation"},"the KILT Cookbook"),"."))}L.isMDXComponent=!0}}]);