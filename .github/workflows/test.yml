name: test-code-examples

on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:
    branches:
      - master

jobs:
  integration_test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        image: ['latest-rc']
        required: ['required']
        include:
          - image: 'latest-develop'
            required: 'optional'

    continue-on-error: ${{ matrix.required == 'optional' }}

    steps:
      - uses: actions/checkout@v1
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: run integration tests
        timeout-minutes: 60
        working-directory: code-examples
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: kilt/prototype-chain
          IMAGE_TAG: ${{ matrix.image }}
          NODE_OPTIONS: --unhandled-rejections=strict
          FAUCET_SEED: ${{ secrets.PEREGRINE_FAUCET_SEED }}
        run: |
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker run -d --rm -p 9944:9944 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --dev --ws-port 9944 --ws-external
          sleep 5s
          yarn install
          yarn run ts-node index.ts
          docker stop $(docker ps -f ancestor=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -q)
