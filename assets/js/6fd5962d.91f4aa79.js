(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1537],{5764:e=>{function t(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=()=>[],t.resolve=t,t.id=5764,e.exports=t},3961:(e,t,i)=>{"use strict";i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>u});var n=i(4848),d=i(8453),a=i(3172);const o="import * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function updateFullDid(\n  newAuthKeypair: Kilt.KiltKeyringPair,\n  fullDid: Kilt.DidUri,\n  submitterAccount: Kilt.KiltKeyringPair,\n  signCallback: Kilt.SignExtrinsicCallback\n): Promise<Kilt.DidDocument> {\n  const api = Kilt.ConfigService.get('api')\n\n  // Create the tx to update the authentication key.\n  const didKeyUpdateTx = api.tx.did.setAuthenticationKey(\n    Kilt.Did.publicKeyToChain(newAuthKeypair)\n  )\n  // Create the tx to remove the service with ID `#my-service`.\n  const didServiceRemoveTx = api.tx.did.removeServiceEndpoint(\n    Kilt.Did.resourceIdToChain('#my-service')\n  )\n\n  // Create the tx to add a new service with ID `#my-new-service`.\n  const newServiceEndpointTx = api.tx.did.addServiceEndpoint({\n    id: Kilt.Did.resourceIdToChain('#my-new-service'),\n    serviceTypes: [Kilt.KiltPublishedCredentialCollectionV1Type],\n    urls: ['https://www.new-example.com']\n  })\n\n  // Create and sign the DID operation that contains the two (unsigned) txs.\n  // This results in a DID-signed tx that can be then signed and submitted to the KILT blockchain by the account\n  // authorized in this operation, Alice in this case.\n  const authorizedBatchedTxs = await Kilt.Did.authorizeBatch({\n    batchFunction: api.tx.utility.batchAll,\n    did: fullDid,\n    extrinsics: [didKeyUpdateTx, didServiceRemoveTx, newServiceEndpointTx],\n    sign: signCallback,\n    submitter: submitterAccount.address\n  })\n\n  // Submit the DID update tx to the KILT blockchain after signing it with the authorized KILT account.\n  await Kilt.Blockchain.signAndSubmitTx(authorizedBatchedTxs, submitterAccount)\n\n  // Get the updated DID Document.\n  const encodedUpdatedDidDetails = await api.call.did.query(\n    Kilt.Did.toChain(fullDid)\n  )\n  return Kilt.Did.linkedInfoFromChain(encodedUpdatedDidDetails).document\n}\n",s={id:"full-did-update",title:"Update a Full DID keys and service endpoints"},l=void 0,r={id:"develop/sdk/cookbook/dids/full-did-update",title:"Update a Full DID keys and service endpoints",description:"Once anchored to the KILT blockchain, a full DID can be updated.",source:"@site/docs/develop/01_sdk/02_cookbook/01_dids/03_full_did_update.md",sourceDirName:"develop/01_sdk/02_cookbook/01_dids",slug:"/develop/sdk/cookbook/dids/full-did-update",permalink:"/docs/develop/sdk/cookbook/dids/full-did-update",draft:!1,unlisted:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/01_sdk/02_cookbook/01_dids/03_full_did_update.md",tags:[],version:"current",lastUpdatedAt:172198217e4,sidebarPosition:3,frontMatter:{id:"full-did-update",title:"Update a Full DID keys and service endpoints"},sidebar:"sdk",previous:{title:"Create a Full DID",permalink:"/docs/develop/sdk/cookbook/dids/full-did-creation"},next:{title:"Resolve a DID",permalink:"/docs/develop/sdk/cookbook/dids/did-query"}},c={},u=[];function p(e){const t={code:"code",em:"em",p:"p",...(0,d.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["Once anchored to the KILT blockchain, a full DID can be updated.\nFor instance, the following snippet shows how to use the ",(0,n.jsx)(t.code,{children:"authorizeBatch"})," function to update the authentication key, remove an old service ",(0,n.jsx)(t.em,{children:"and"})," add a new one for a full DID in the same transaction."]}),"\n",(0,n.jsx)(a.A,{children:o})]})}function h(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},3172:(e,t,i)=>{"use strict";i.d(t,{A:()=>h});var n=i(6540),d=i(4586),a=i(6352),o=i(8463),s=i(5283),l=i(6745),r=i(1470),c=i(9365),u=i(1432),p=i(4848);const h=e=>{let{children:t,fileName:i,...h}=e;const m=t,[f,D]=(0,n.useState)("# loading code..."),{siteConfig:{customFields:{prettierConfig:k}}}=(0,d.A)(),v=(0,n.useMemo)((()=>{const{code:e}=(0,a.transform)(m,{plugins:["transform-typescript"],retainLines:!0}),t=["./generateAccount","./generateKeypairs","./ctypeSchema","./createClaim","./generateLightDid","../attester/ctypeSchema","../claimer/generateLightDid","../claimer/generateCredential","./claimer/createPresentation","./claimer/generateKeypairs","./claimer/generateLightDid"];let i=e.replace(/from\s+['"](.+)['"]/g,((e,i)=>t.includes(i)?`from '${i}.js'`:e));return i=i.replace("if (require.main === module)","if (process.argv[1] === new URL(import.meta.url).pathname)"),i}),[m]);(0,n.useEffect)((()=>{o.GP(v,{parser:"babel",plugins:[s.A,l.Ay],...k}).then(D)}),[k,v]);const b=[{fileName:i?`${i}.ts`:void 0,fileContents:m,fileID:"ts",fileLabel:"Typescript"},{fileName:i?`${i}.js`:void 0,fileContents:f,fileID:"js",fileLabel:"Javascript"}];return(0,p.jsx)(p.Fragment,{children:(0,p.jsx)(r.A,{groupId:"ts-js-choice",children:b.map((e=>(0,p.jsx)(c.A,{value:e.fileID,label:e.fileLabel,default:!0,children:(0,p.jsx)(u.A,{...h,className:"language-"+e.fileID,title:e.fileName,children:e.fileContents})})))})})}}}]);