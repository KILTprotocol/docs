"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5052],{1220:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>h,frontMatter:()=>d,metadata:()=>a,toc:()=>o});var i=t(17624),c=t(4552);const d={id:"advanced",title:"Advanced Usage"},s=void 0,a={id:"develop/opendid/advanced",title:"Advanced Usage",description:"Use dynamic client management with etcd",source:"@site/docs/develop/08_opendid/06_advanced.md",sourceDirName:"develop/08_opendid",slug:"/develop/opendid/advanced",permalink:"/docs/develop/opendid/advanced",draft:!1,unlisted:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/08_opendid/06_advanced.md",tags:[],version:"current",lastUpdatedAt:1718808267,formattedLastUpdatedAt:"Jun 19, 2024",sidebarPosition:6,frontMatter:{id:"advanced",title:"Advanced Usage"},sidebar:"opendid",previous:{title:"Demo Project",permalink:"/docs/develop/opendid/demo_project"}},r={},o=[{value:"Use dynamic client management with etcd",id:"use-dynamic-client-management-with-etcd",level:2},{value:"Add advanced claim checks using RHAI scripts",id:"add-advanced-claim-checks-using-rhai-scripts",level:2}];function l(e){const n={a:"a",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,c.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"use-dynamic-client-management-with-etcd",children:"Use dynamic client management with etcd"}),"\n",(0,i.jsxs)(n.p,{children:["To dynamically create or remove OpenID Connect clients, configure the service to get its configuration from an ",(0,i.jsx)(n.a,{href:"https://etcd.io",children:"etcd cluster"})," by adding the connection parameters for the cluster in the ",(0,i.jsx)(n.code,{children:"config.yaml"})," file."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"etcd:\n    endpoints: ['localhost:2379']\n    user: etcd-user\n    password: my-password\n    tlsDomainName: my.etcd.cluster.example.com\n    tlsCaCert: |\n        -----BEGIN CERTIFICATE-----\n        <ca certificate data>\n        -----END CERTIFICATE-----\n    tlsClientCert: |\n        -----BEGIN CERTIFICATE-----\n        <client certificate data>\n        -----END CERTIFICATE-----\n    tlsClientKey: |\n        -----BEGIN RSA PRIVATE KEY-----\n        <client key data>\n        -----END RSA PRIVATE KEY-----\n"})}),"\n",(0,i.jsxs)(n.p,{children:["All fields except ",(0,i.jsx)(n.code,{children:"endpoints"})," are optional.\nWhen everything is set up you can start adding client configurations into the etcd cluster."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'CLIENT_SPEC=$(cat <<EOF\n{\n  "requirements": [{\n    "cTypeHash":"0x3291bb126e33b4862d421bfaa1d2f272e6cdfc4f96658988fbcffea8914bd9ac",\n    "trustedAttesters": [\n    "did:kilt:4pehddkhEanexVTTzWAtrrfo2R7xPnePpuiJLC7shQU894aY",\n    "did:kilt:4pnfkRn5UurBJTW92d9TaVLR2CqJdY4z5HPjrEbpGyBykare"\n    ],\n    "requiredProperties": ["Email"]\n  }],\n  "redirectUrls": ["http://localhost:1606/callback.html"]\n}\nEOF\n)\nCLIENT_SPEC=$(echo $CLIENT_SPEC | jq -c)\netcdctl put /opendid/clients/new-client "${CLIENT_SPEC}"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["If you want to try this out, first generate a configuration file using the setup image as described in ",(0,i.jsx)(n.a,{href:"/docs/develop/opendid/opendid_service",children:"the OpenDID service step"}),".\nThen add the etcd configuration and start the service using the example script in ",(0,i.jsx)(n.em,{children:"./scripts/start-demo-etcd.sh"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"add-advanced-claim-checks-using-rhai-scripts",children:"Add advanced claim checks using RHAI scripts"}),"\n",(0,i.jsxs)(n.p,{children:["To add custom checks executed on the claims of the Verifiable Credential, use ",(0,i.jsx)(n.a,{href:"https://rhai.rs",children:"Rhai"})," scripts.\nTo try it, add a ",(0,i.jsx)(n.code,{children:"checksDirectory"})," entry to the client configuration in the ",(0,i.jsx)(n.code,{children:"config.yaml"})," file."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"---\nclients:\n    example-client:\n        requirements:\n            - cTypeHash: '0x3291bb126e33b4862d421bfaa1d2f272e6cdfc4f96658988fbcffea8914bd9ac'\n              trustedAttesters:\n                  [\n                      'did:kilt:4pehddkhEanexVTTzWAtrrfo2R7xPnePpuiJLC7shQU894aY',\n                      'did:kilt:4pnfkRn5UurBJTW92d9TaVLR2CqJdY4z5HPjrEbpGyBykare',\n                  ]\n              requiredProperties: ['Email']\n        redirectUrls:\n            - http://localhost:1606/callback.html\n        checksDirectory: /app/checks\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Create a ",(0,i.jsx)(n.code,{children:"checks"})," directory in the same directory as the ",(0,i.jsx)(n.code,{children:"config.yaml"})," file and add a ",(0,i.jsx)(n.code,{children:"example-check.rhai"})," file with the following content:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// This is an example of a simple login policy that allows only users with an email address ending with `kilt.io` to login.\n\nlet SUFFIX = "kilt.io";\n\n// ID_TOKEN contains the id_token to send to the user from the OpenID connect (OIDC) provider\nlet token = parse_id_token(ID_TOKEN);\n\n// Inspect the token and the `pro` sub-object that contains the users claims\nif token.pro.Email.ends_with(SUFFIX) {\n  // The user is allowed to login\n  return true;\n}\n\n// The user is not allowed to login\nreturn false;\n'})}),"\n",(0,i.jsx)(n.p,{children:"Start the service bind-mounting the script:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker run -d --rm \\\n    -v $(pwd)/config.yaml:/app/config.yaml \\\n    -v $(pwd)/checks:/app/checks \\\n    -e RUNTIME=spiritnet \\\n    -p 3001:3001 \\\n    docker.io/kiltprotocol/opendid:latest\n"})}),"\n",(0,i.jsxs)(n.p,{children:["When you now log in with a user that has an email address ending with ",(0,i.jsx)(n.code,{children:"kilt.io"})," as attested by the configured attester, the service allows you to log in.\nIf you use a different email address, the service denies you access."]})]})}function h(e={}){const{wrapper:n}={...(0,c.M)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},4552:(e,n,t)=>{t.d(n,{I:()=>a,M:()=>s});var i=t(11504);const c={},d=i.createContext(c);function s(e){const n=i.useContext(d);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:s(e.components),i.createElement(d.Provider,{value:n},e.children)}}}]);