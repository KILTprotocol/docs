"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4080],{2801:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>o,contentTitle:()=>r,default:()=>l,frontMatter:()=>a,metadata:()=>c,toc:()=>d});var n=t(4848),i=t(8453);t(1122);const a={id:"asset-dids",title:"AssetDIDs"},r=void 0,c={id:"concepts/asset-dids",title:"AssetDIDs",description:'KILT DIDs are suitable for use cases that involve "active" participants.',source:"@site/docs/concepts/04_asset_dids.md",sourceDirName:"concepts",slug:"/concepts/asset-dids",permalink:"/docs/concepts/asset-dids",draft:!1,unlisted:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/concepts/04_asset_dids.md",tags:[],version:"current",lastUpdatedAt:1733496053e3,sidebarPosition:4,frontMatter:{id:"asset-dids",title:"AssetDIDs"},sidebar:"concepts",previous:{title:"web3names",permalink:"/docs/concepts/web3names"},next:{title:"Overview",permalink:"/docs/concepts/credentials/overview"}},o={},d=[{value:"AssetDID structure",id:"assetdid-structure",level:2},{value:"Chain namespace and reference",id:"chain-namespace-and-reference",level:3},{value:"Asset namespace, reference and identifier",id:"asset-namespace-reference-and-identifier",level:3}];function h(e){const s={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",p:"p",strong:"strong",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.p,{children:'KILT DIDs are suitable for use cases that involve "active" participants.\nFor example, entities that can act of their will (a person, an organization, a DAO).'}),"\n",(0,n.jsxs)(s.p,{children:['There are classes of entities that represent "passive" participants.\nThat is, they can be "used" by active participants within a given use case.\nKILT defines these class of participants as ',(0,n.jsx)(s.strong,{children:"assets"}),".\nAs with traditional KILT users, assets also need to be uniquely identified, with an ",(0,n.jsx)(s.em,{children:"AssetDID"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["An example of a valid AssetDID is the following: ",(0,n.jsx)(s.code,{children:"did:asset:eip155:1.erc721:0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb"}),".\nThis AssetDID refers to the ",(0,n.jsx)(s.a,{href:"https://opensea.io/collection/cryptopunks",children:"CryptoPunks NFT collection"}),"."]}),"\n",(0,n.jsx)(s.h2,{id:"assetdid-structure",children:"AssetDID structure"}),"\n",(0,n.jsxs)(s.p,{children:["An AssetDID is a ",(0,n.jsx)(s.em,{children:"generative"})," identifier, meaning that it doesn't depend nor rely on any information stored anywhere.\nRather, given the asset to identify, it's ",(0,n.jsx)(s.strong,{children:"always"})," possible to generate its AssetDID.\nThe reverse is also true. Given an AssetDID, it's always possible to dereference it into its components, which, together, uniquely identify a given asset."]}),"\n",(0,n.jsxs)(s.p,{children:["AssetDIDs always start with the ",(0,n.jsx)(s.code,{children:"did:asset"})," prefix, and then contain a ",(0,n.jsx)(s.em,{children:"chain"})," component (namespace + reference) and an ",(0,n.jsx)(s.em,{children:"asset"})," component (namespace + reference + identifier)."]}),"\n",(0,n.jsx)(s.h3,{id:"chain-namespace-and-reference",children:"Chain namespace and reference"}),"\n",(0,n.jsx)(s.p,{children:"Together, the namespace and reference identify the (blockchain) network on which the asset lives."}),"\n",(0,n.jsxs)(s.p,{children:["In the case of NFTs, this represents the blockchain on which the smart contract is deployed.\nDifferent deployments of the same network have the same chain namespace but a different reference.\nFor instance, both the Ethereum mainnet and the Goerli testnet have a chain namespace of ",(0,n.jsx)(s.code,{children:"eip155"}),", but the former is identified by the reference ",(0,n.jsx)(s.code,{children:"1"})," (as the mainnet), while the Goerli testnet is identified by the reference ",(0,n.jsx)(s.code,{children:"5"}),"."]}),"\n",(0,n.jsx)(s.h3,{id:"asset-namespace-reference-and-identifier",children:"Asset namespace, reference and identifier"}),"\n",(0,n.jsxs)(s.p,{children:["Similar to their chain counterparts, you use asset ",(0,n.jsx)(s.em,{children:"namespaces"})," to distinguish among different asset classes within the same environment.\nIn the case of NFTs, a smart contract could support both ERC20 (fungible) and ERC721 (non-fungible) tokens, hence the namespace distinguishes between the two token types."]}),"\n",(0,n.jsxs)(s.p,{children:["Each asset namespace defines the semantics and the meaning of asset references and asset identifiers within that namespace.\nIn the example of Ethereum-based NFTs, the asset ",(0,n.jsx)(s.em,{children:"reference"})," identifies the smart contract address that stores the NFT."]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.strong,{children:"The combination of asset namespace + asset reference is sufficient to identify an NFT collection on a given network."})}),"\n",(0,n.jsxs)(s.p,{children:["For some assets, for instance NFTs, it's possible to specify an asset ",(0,n.jsx)(s.em,{children:"identifier"}),", used to refer to a single item within the collection.\nIn the example of the CryptoPunks collection, the AssetDID could be extended with an additional ",(0,n.jsx)(s.code,{children:":1005"})," to now refer to the ",(0,n.jsx)(s.a,{href:"https://opensea.io/assets/ethereum/0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb/1005",children:"CryptoPunk piece #1005"})," rather than to the CryptoPunks collection as a whole."]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.img,{src:"https://i.seadn.io/gae/qoR1cWuIZzjlrNVcSMAzhrwDvXNtMxaYuDbNqkc_J5WGGqMSrF0wzO7K2MnSCEBLG8G8pZyJPqV7eTGt4wGwret85sbXJBYoAkypdQ?auto=format&w=3840",alt:""})}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.em,{children:"Credits to OpenSea for the NFT image above."})}),"\n",(0,n.jsxs)(s.p,{children:["For a more technical explanation of AssetDIDs, please visit our ",(0,n.jsx)(s.a,{href:"https://github.com/KILTprotocol/spec-asset-did",children:"official specification"}),"."]})]})}function l(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>r,x:()=>c});var n=t(6540);const i={},a=n.createContext(i);function r(e){const s=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(a.Provider,{value:s},e.children)}}}]);