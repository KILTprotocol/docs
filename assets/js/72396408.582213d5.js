(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5561],{5380:e=>{function t(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=()=>[],t.resolve=t,t.id=5380,e.exports=t},1909:(e,t,n)=>{"use strict";n.d(t,{Z:()=>h});var a=n(7462),i=n(7294),r=n(2263),o=n(3945),s=n(8182),p=n(2175),l=n(4866),c=n(5162),d=n(814);const h=e=>{let{children:t,fileName:n,...h}=e;const m=t,{code:u}=(0,p.transform)(m,{plugins:["transform-typescript"],retainLines:!0}),{siteConfig:{customFields:{prettierConfig:y}}}=(0,r.Z)(),k=(0,o.format)(u,{parser:s.parsers.babel.parse,...y}),g=n?`${n}.ts`:void 0,C=n?`${n}.js`:void 0;return i.createElement(l.Z,{groupId:"ts-js-choice"},i.createElement(c.Z,{value:"ts",label:"Typescript",default:!0},i.createElement(d.Z,(0,a.Z)({},h,{className:"language-ts",title:g}),m)),i.createElement(c.Z,{value:"js",label:"Javascript"},i.createElement(d.Z,(0,a.Z)({},h,{className:"language-js",title:C}),k)))}},8332:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>y,contentTitle:()=>m,default:()=>T,frontMatter:()=>h,metadata:()=>u,toc:()=>k});var a=n(7462),i=(n(7294),n(3905)),r=n(814),o=n(1909),s=n(4866),p=n(5162);const l="import * as Kilt from '@kiltprotocol/sdk-js'\n\n// Return CType with the properties matching a given schema.\nexport function getCtypeSchema(): Kilt.ICType {\n  return Kilt.CType.fromProperties('Drivers License', {\n    name: {\n      type: 'string'\n    },\n    age: {\n      type: 'integer'\n    }\n  })\n}\n",c="import { config as envConfig } from 'dotenv'\n\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nimport { generateAccount } from './generateAccount'\nimport { generateKeypairs } from './generateKeypairs'\nimport { getCtypeSchema } from './ctypeSchema'\n\nexport async function ensureStoredCtype(\n  attesterAccount: Kilt.KiltKeyringPair,\n  attesterDid: Kilt.DidUri,\n  signCallback: Kilt.SignExtrinsicCallback\n): Promise<Kilt.ICType> {\n  const api = Kilt.ConfigService.get('api')\n\n  // Get the CTYPE and see if it's stored, if yes return it.\n  const ctype = getCtypeSchema()\n  try {\n    await Kilt.CType.verifyStored(ctype)\n    console.log('Ctype already stored. Skipping creation')\n    return ctype\n  } catch {\n    console.log('Ctype not present. Creating it now...')\n    // Authorize the tx.\n    const encodedCtype = Kilt.CType.toChain(ctype)\n    const tx = api.tx.ctype.add(encodedCtype)\n    const extrinsic = await Kilt.Did.authorizeTx(\n      attesterDid,\n      tx,\n      signCallback,\n      attesterAccount.address\n    )\n\n    // Write to chain then return the CType.\n    await Kilt.Blockchain.signAndSubmitTx(extrinsic, attesterAccount)\n\n    return ctype\n  }\n}\n\n// Don't execute if this is imported by another file.\nif (require.main === module) {\n  ;(async () => {\n    envConfig()\n\n    try {\n      await Kilt.connect(process.env.WSS_ADDRESS as string)\n\n      const accountMnemonic = process.env.ATTESTER_ACCOUNT_MNEMONIC as string\n      const { account } = generateAccount(accountMnemonic)\n\n      const didMnemonic = process.env.ATTESTER_DID_MNEMONIC as string\n      const { authentication, assertionMethod } = generateKeypairs(didMnemonic)\n      const attesterDidUri = Kilt.Did.getFullDidUriFromKey(authentication)\n\n      await ensureStoredCtype(account, attesterDidUri, async ({ data }) => ({\n        signature: assertionMethod.sign(data),\n        keyType: assertionMethod.type\n      }))\n    } catch (e) {\n      console.log('Error while checking on chain ctype')\n      throw e\n    }\n  })()\n}\n";var d=n(4430);const h={id:"ctype",title:"CType"},m=void 0,u={unversionedId:"develop/workshop/attester/ctype",id:"develop/workshop/attester/ctype",title:"CType",description:"A claim type (CType) is a KILT-specific term, but the concept is simple:",source:"@site/docs/develop/03_workshop/04_attester/03_ctype.md",sourceDirName:"develop/03_workshop/04_attester",slug:"/develop/workshop/attester/ctype",permalink:"/docs/develop/workshop/attester/ctype",draft:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/03_workshop/04_attester/03_ctype.md",tags:[],version:"current",lastUpdatedAt:1701504096,formattedLastUpdatedAt:"Dec 2, 2023",sidebarPosition:3,frontMatter:{id:"ctype",title:"CType"},sidebar:"workshop",previous:{title:"DID",permalink:"/docs/develop/workshop/attester/did"},next:{title:"\ud83d\udc64 Claimer",permalink:"/docs/develop/workshop/claimer/"}},y={},k=[{value:"Create CType",id:"create-ctype",level:2},{value:"Get CType",id:"get-ctype",level:2},{value:"Run",id:"run",level:2}],g={toc:k},C="wrapper";function T(e){let{components:t,...n}=e;return(0,i.kt)(C,(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"A claim type (CType) is a KILT-specific term, but the concept is simple:\nA CType is a JSON schema that defines the structure of a claim, and you can think of it as the data model for your claim."),(0,i.kt)("admonition",{title:"CType",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"A CType ensures that a credential contains all required attributes, e.g., a driver's license has to contain a name, date of birth, and the vehicle types that the claimer can drive.\nThe CType is important since a Verifier requests credentials for a specific CType.\nFor example, the traffic police want to see your driver's license, not your gym membership."),(0,i.kt)("p",{parentName:"admonition"},"To learn more about CTypes, read the ",(0,i.kt)("a",{parentName:"p",href:"/docs/concepts/credentials/ctypes"},"in-depth CType documentation"),".\nYou can also ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/KILTprotocol/ctype-index"},"read through existing CTypes in the CType-index"),".")),(0,i.kt)("p",null,"Before the ",(0,i.kt)("span",{className:"label-role attester"},"Attester")," can attest credentials, they must decide which CType they support.\nFor example, a traffic authority only issues driver's licenses (A CType for driver's license), not a university diploma."),(0,i.kt)("p",null,"Since CTypes enable interoperability between Attesters, using existing CTypes rather than creating new ones is highly recommended.\nHowever, this workshop creates a new CType to show the process."),(0,i.kt)("p",null,"Creating CTypes requires an account and a full DID.\nMake sure your account holds KILT tokens so that you can pay the fees for creating a CType."),(0,i.kt)("p",null,"For example, a basic CType for a driver's license could look like this:"),(0,i.kt)(r.Z,{className:"language-json",mdxType:"CodeBlock"},d.Z),(0,i.kt)("p",null,"The CType has the following attributes:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Key"),(0,i.kt)("th",{parentName:"tr",align:null},"Value"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"$id")),(0,i.kt)("td",{parentName:"tr",align:null},"The KILT id of this CType. It's the most important property as it represents the ",(0,i.kt)("strong",{parentName:"td"},"digital footprint")," of the CType.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"$schema")),(0,i.kt)("td",{parentName:"tr",align:null},"A reference to the meta-schema describing what a CType may look like. There are two versions.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"title")),(0,i.kt)("td",{parentName:"tr",align:null},"The title of the CType.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"properties")),(0,i.kt)("td",{parentName:"tr",align:null},"The properties that a claim conforming to this CType may have.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"type")),(0,i.kt)("td",{parentName:"tr",align:null},"Type is an object for all CTypes.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"additionalProperties")),(0,i.kt)("td",{parentName:"tr",align:null},"The default is false. This restricts unwanted properties in a claim.")))),(0,i.kt)("p",null,"A CType is stored on the KILT blockchain."),(0,i.kt)("p",null,"In a real-world situation, a user would retrieve an existing CType from the chain or a CType registry.\nFor example, via a Credential Registry's REST API."),(0,i.kt)("p",null,"In this tutorial, the ",(0,i.kt)("span",{className:"label-role attester"},"Attester")," creates and attempts to store a CType on the KILT test blockchain."),(0,i.kt)("h2",{id:"create-ctype"},"Create CType"),(0,i.kt)("p",null,"Copy the following to define a ",(0,i.kt)("inlineCode",{parentName:"p"},"CType")," with a given schema:"),(0,i.kt)(o.Z,{fileName:"attester/ctypeSchema",mdxType:"TsJsBlock"},l),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"As many people follow this workshop, using the CType schema defined above will result in a duplicate error when you run the code later.\nTo avoid this, change the value of ",(0,i.kt)("inlineCode",{parentName:"p"},"fromProperties"),' to something unique, such as adding your name to the "Drivers License" string.')),(0,i.kt)("h2",{id:"get-ctype"},"Get CType"),(0,i.kt)("p",null,"Copy the following to create a ",(0,i.kt)("inlineCode",{parentName:"p"},"CType")," on the chain:"),(0,i.kt)(o.Z,{fileName:"attester/generateCtype",mdxType:"TsJsBlock"},c),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ensureStoredCType")," function takes the Attester's account, DID, and a callback to sign the function and checks if the CType is already on chain.\nIt uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"verifyStored")," method to pass the CType to the KILT blockchain and make the check.\nIf it does not exist, it stores it on chain, using the ",(0,i.kt)("inlineCode",{parentName:"p"},"toChain")," method to encode the CType into a unique hash and the ",(0,i.kt)("inlineCode",{parentName:"p"},"add")," method to create a new CType from the given unique hash and associate it with the Attester.\nThe function then uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"authorizeTx")," to authorize the transaction and ",(0,i.kt)("inlineCode",{parentName:"p"},"signAndSubmitTx")," to sign and submit the transaction containing the new CType."),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"Remember, an account must have the required amount of tokens to pay the transaction fee and deposit.")),(0,i.kt)("h2",{id:"run"},"Run"),(0,i.kt)(s.Z,{groupId:"ts-js-choice",mdxType:"Tabs"},(0,i.kt)(p.Z,{value:"ts",label:"Typescript",default:!0,mdxType:"TabItem"},(0,i.kt)("p",null,"  Run the ",(0,i.kt)("inlineCode",{parentName:"p"},"attester/generateCtype.ts")," file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn ts-node attester/generateCtype.ts\n"))),(0,i.kt)(p.Z,{value:"js",label:"Javascript",default:!0,mdxType:"TabItem"},(0,i.kt)("p",null,"  Run the ",(0,i.kt)("inlineCode",{parentName:"p"},"attester/generateCtype.js")," file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"node attester/generateCtype.js\n")))),(0,i.kt)("p",null,"Before you can attest Credentials, you need a ",(0,i.kt)("span",{className:"label-role claimer"},"Claimer")," to request it"))}T.isMDXComponent=!0},4430:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});const a='{\n  "$id": "kilt:ctype:0x4f1d68ac46daf4613181b33b16faaf10cf94879dc2246d7485dc2ccbb843641d",\n  "$schema": "ipfs://bafybeiah66wbkhqbqn7idkostj2iqyan2tstc4tpqt65udlhimd7hcxjyq/",\n  "additionalProperties": false,\n  "properties": {\n    "age": {\n      "type": "integer"\n    },\n    "id": {\n      "type": "string"\n    },\n    "name": {\n      "type": "string"\n    }\n  },\n  "title": "Drivers License by did:kilt:4t9FPVbcN42UMxt3Z2Y4Wx38qPL8bLduAB11gLZSwn5hVEfH",\n  "type": "object"\n}'}}]);