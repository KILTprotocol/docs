(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[678],{25380:function(n){function t(n){var t=new Error("Cannot find module '"+n+"'");throw t.code="MODULE_NOT_FOUND",t}t.keys=function(){return[]},t.resolve=t,t.id=25380,n.exports=t},51909:function(n,t,i){"use strict";var o=i(83117),e=i(67294),c=i(52263),a=i(73945),r=i(28182),s=i(12175),l=i(65488),u=i(85162),d=i(90814);t.Z=n=>{let{children:t,fileName:i,...k}=n;const g=t,{code:p}=(0,s.transform)(g,{plugins:["transform-typescript"],retainLines:!0}),{siteConfig:{customFields:{prettierConfig:m}}}=(0,c.Z)(),h=(0,a.format)(p,{parser:r.parsers.babel.parse,...m}),b=i?`${i}.ts`:void 0,f=i?`${i}.js`:void 0;return e.createElement(l.Z,{groupId:"ts-js-choice"},e.createElement(u.Z,{value:"ts",label:"Typescript",default:!0},e.createElement(d.Z,(0,o.Z)({},k,{className:"language-ts",title:b}),g)),e.createElement(u.Z,{value:"js",label:"Javascript"},e.createElement(d.Z,(0,o.Z)({},k,{className:"language-js",title:f}),h)))}},46907:function(n,t,i){"use strict";i.r(t),i.d(t,{assets:function(){return l},contentTitle:function(){return r},default:function(){return k},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return u}});var o=i(83117),e=(i(67294),i(3905)),c=i(51909);const a={id:"account-link",title:"Link an Account to a KILT DID"},r=void 0,s={unversionedId:"develop/sdk/cookbook/account_linking/account-link",id:"develop/sdk/cookbook/account_linking/account-link",title:"Link an Account to a KILT DID",description:"An account can be linked to a DID in one of two ways:",source:"@site/docs/develop/01_sdk/02_cookbook/03_account_linking/01_link.md",sourceDirName:"develop/01_sdk/02_cookbook/03_account_linking",slug:"/develop/sdk/cookbook/account_linking/account-link",permalink:"/docs/develop/sdk/cookbook/account_linking/account-link",draft:!1,editUrl:"https://github.com/KILTprotocol/docs/edit/master/docs/develop/01_sdk/02_cookbook/03_account_linking/01_link.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"account-link",title:"Link an Account to a KILT DID"},sidebar:"sdk",previous:{title:"Release a web3name",permalink:"/docs/develop/sdk/cookbook/web3names/web3name-release"},next:{title:"Query the web3name of an Account",permalink:"/docs/develop/sdk/cookbook/account_linking/account-name"}},l={},u=[],d={toc:u};function k(n){let{components:t,...i}=n;return(0,e.kt)("wrapper",(0,o.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,e.kt)("p",null,"An account can be linked to a DID in one of two ways:"),(0,e.kt)("ol",null,(0,e.kt)("li",{parentName:"ol"},"The account to be linked generates a signature over the payload ",(0,e.kt)("inlineCode",{parentName:"li"},"<Bytes>(SubmitterDid, BlockNumberExpiration)</Bytes>"),", which is the default encoding of the PolkadotJS extension:")),(0,e.kt)(c.Z,{mdxType:"TsJsBlock"},"import type { KeyringPair } from '@polkadot/keyring/types'\n\nimport * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function linkAccountToDid(\n  did: Kilt.DidUri,\n  submitterAccount: Kilt.KiltKeyringPair,\n  linkedAccount: KeyringPair,\n  signCallback: Kilt.SignExtrinsicCallback\n): Promise<void> {\n  const api = Kilt.ConfigService.get('api')\n\n  // The account to be linked has to sign a specifically-crafted payload to prove\n  // willingness to be linked to the DID.\n  const linkingAccountSignatureGeneration = async (\n    signaturePayload: string | Uint8Array\n  ) => linkedAccount.sign(signaturePayload)\n\n  // Authorizing the tx with the full DID and including a signature of the linked account\n  // results in the provided account being linked to the DID authorizing the operation.\n  const accountLinkingParameters = await Kilt.Did.associateAccountToChainArgs(\n    linkedAccount.address,\n    did,\n    linkingAccountSignatureGeneration\n  )\n  const accountLinkingTx = await api.tx.didLookup.associateAccount(\n    ...accountLinkingParameters\n  )\n  const authorizedAccountLinkingTx = await Kilt.Did.authorizeTx(\n    did,\n    accountLinkingTx,\n    signCallback,\n    submitterAccount.address\n  )\n\n  await Kilt.Blockchain.signAndSubmitTx(\n    authorizedAccountLinkingTx,\n    submitterAccount\n  )\n}\n"),(0,e.kt)("ol",{start:2},(0,e.kt)("li",{parentName:"ol"},"The account submitting the linking transaction is linked to the DID authorizing such transaction:")),(0,e.kt)(c.Z,{mdxType:"TsJsBlock"},"import * as Kilt from '@kiltprotocol/sdk-js'\n\nexport async function linkDidToAccount(\n  did: Kilt.DidUri,\n  submitterAccount: Kilt.KiltKeyringPair,\n  signCallback: Kilt.SignExtrinsicCallback\n): Promise<void> {\n  const api = Kilt.ConfigService.get('api')\n\n  // Authorizing the tx with the full DID and submitting it with the provided account\n  // results in the submitter's account being linked to the DID authorizing the operation.\n  const accountLinkingTx = api.tx.didLookup.associateSender()\n  const authorizedAccountLinkingTx = await Kilt.Did.authorizeTx(\n    did,\n    accountLinkingTx,\n    signCallback,\n    submitterAccount.address\n  )\n\n  await Kilt.Blockchain.signAndSubmitTx(\n    authorizedAccountLinkingTx,\n    submitterAccount\n  )\n}\n"))}k.isMDXComponent=!0}}]);